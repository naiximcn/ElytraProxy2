From 0cee0df0babf85dfaff5920a2189cb26ca0d2e0d Mon Sep 17 00:00:00 2001
From: mdxd44 <mdxd44@ely.su>
Date: Thu, 17 Jun 2021 04:09:51 +0900
Subject: [PATCH] Merge botfilter upstream, checkstyle fixes, settings and
 brand checks


diff --git a/api/build.gradle b/api/build.gradle
index 6fc5999b..34832fdc 100644
--- a/api/build.gradle
+++ b/api/build.gradle
@@ -37,6 +37,11 @@ dependencies {
     api("net.kyori:adventure-text-serializer-legacy")
     api("net.kyori:adventure-text-serializer-plain")
 
+    api "net.kyori:text-api:${textVersion}"
+    api "net.kyori:text-serializer-gson:${textVersion}"
+    api "net.kyori:text-serializer-legacy:${textVersion}"
+    api "net.kyori:text-serializer-plain:${textVersion}"
+
     api "org.slf4j:slf4j-api:${slf4jVersion}"
     api 'com.google.inject:guice:5.0.1'
     api "org.checkerframework:checker-qual:${checkerFrameworkVersion}"
@@ -86,7 +91,7 @@ javadoc {
             'http://www.slf4j.org/apidocs/',
             'https://google.github.io/guava/releases/25.1-jre/api/docs/',
             'https://google.github.io/guice/api-docs/5.0.1/javadoc/',
-            'https://docs.oracle.com/en/java/javase/11/docs/api//',
+            'https://docs.oracle.com/en/java/javase/11/docs/api/',
             'https://jd.adventure.kyori.net/api/4.7.0/'
     )
 
diff --git a/proxy/lombok.config b/proxy/lombok.config
new file mode 100644
index 00000000..46401d2f
--- /dev/null
+++ b/proxy/lombok.config
@@ -0,0 +1,3 @@
+# This file is generated by the 'io.freefair.lombok' Gradle plugin
+config.stopBubbling = true
+lombok.extern.findbugs.addSuppressFBWarnings = true
\ No newline at end of file
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java b/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
index aa43731c..c87322bc 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
@@ -653,7 +653,9 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
 
   @Override
   public int getPlayerCount() {
-    return connectionsByUuid.size();
+    return (int) getAllPlayers().stream().filter(p ->
+        !Settings.IMP.MAIN_SETTINGS.IGNORE_ONLINE_AT.contains(p.getCurrentServer()
+        .get().getServerInfo().getName())).count();
   }
 
   @Override
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java
index deeb16fa..d54444a1 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java
@@ -24,19 +24,21 @@ import ru.elytrium.elytraproxy.config.Settings;
 public class CommandMessages {
 
   public static final Component PLAYERS_ONLY = LegacyComponentSerializer
-          .legacyAmpersand()
-          .deserialize((
-                  Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                  + Settings.IMP.MESSAGES.VELOCITY.COMMAND.PLAYERS_ONLY)
-                          .replace("%nl%", "\n"));
+      .legacyAmpersand()
+      .deserialize((
+          Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+          + Settings.IMP.MESSAGES.VELOCITY.COMMAND.PLAYERS_ONLY)
+              .replace("%nl%", "\n")
+      );
 
   public static Component SERVER_DOES_NOT_EXIST(String serverName) {
     return LegacyComponentSerializer
-            .legacyAmpersand()
-            .deserialize((
-                    Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                    + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_DOES_NOT_EXIST)
-                            .replace("%nl%", "\n")
-                            .replace("{0}", serverName));
+        .legacyAmpersand()
+        .deserialize((
+            Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+            + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_DOES_NOT_EXIST)
+                .replace("%nl%", "\n")
+                .replace("{0}", serverName)
+        );
   }
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java
index b2b9d87b..a6510be0 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java
@@ -80,12 +80,13 @@ public class GlistCommand {
     final CommandSource source = context.getSource();
     sendTotalProxyCount(source);
     source.sendMessage(Identity.nil(),
-            LegacyComponentSerializer
-                    .legacyAmpersand()
-                    .deserialize((
-                            Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                            + Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_VIEW_ALL)
-                                    .replace("%nl%", "\n")));
+        LegacyComponentSerializer
+            .legacyAmpersand()
+            .deserialize((
+                Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                + Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_VIEW_ALL)
+                    .replace("%nl%", "\n")
+            ));
     return 1;
   }
 
@@ -112,20 +113,22 @@ public class GlistCommand {
   private void sendTotalProxyCount(CommandSource target) {
     int online = server.getAllPlayers().size();
     Component msg = online == 1
-            ? LegacyComponentSerializer
-                    .legacyAmpersand()
-                    .deserialize((
-                            Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                            + Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_PLAYER_SINGULAR)
-                                    .replace("%nl%", "\n")
-                                    .replace("{0}", Integer.toString(online)))
+        ? LegacyComponentSerializer
+            .legacyAmpersand()
+            .deserialize((
+                Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                + Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_PLAYER_SINGULAR)
+                    .replace("%nl%", "\n")
+                    .replace("{0}", Integer.toString(online)
+        ))
             : LegacyComponentSerializer
-                    .legacyAmpersand()
-                    .deserialize((
-                            Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                            + Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_PLAYER_PLURAL)
-                                    .replace("%nl%", "\n")
-                                    .replace("{0}", Integer.toString(online)));
+                .legacyAmpersand()
+                .deserialize((
+                    Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                    + Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_PLAYER_PLURAL)
+                        .replace("%nl%", "\n")
+                        .replace("{0}", Integer.toString(online)
+        ));
     target.sendMessage(msg);
   }
 
@@ -135,14 +138,16 @@ public class GlistCommand {
       return;
     }
 
-    TextComponent.Builder builder = Component.text().append(LegacyComponentSerializer
-                            .legacyAmpersand()
-                            .deserialize((
-                                    Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_FORMAT_VIEW_ALL)
-                                            .replace("%nl%", "\n")
-                                            .replace("{0}", server.getServerInfo().getName())
-                                            .replace("{1}", Integer.toString(onServer.size()))))
-        .resetStyle();
+    TextComponent.Builder builder = Component
+        .text().append(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize((
+                    Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_FORMAT_VIEW_ALL)
+                        .replace("%nl%", "\n")
+                        .replace("{0}", server.getServerInfo().getName())
+                        .replace("{1}", Integer.toString(onServer.size())
+        ))).resetStyle();
 
     for (int i = 0; i < onServer.size(); i++) {
       Player player = onServer.get(i);
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java
index b666855f..756acb8e 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java
@@ -80,34 +80,38 @@ public class ServerCommand implements SimpleCommand {
     String currentServer = executor.getCurrentServer().map(ServerConnection::getServerInfo)
         .map(ServerInfo::getName).orElse("<unknown>");
     executor.sendMessage(Identity.nil(),
-            LegacyComponentSerializer
-                    .legacyAmpersand()
-                    .deserialize((
-                            Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                            + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_CURRENT_SERVER)
-                                    .replace("%nl%", "\n")
-                                    .replace("{0}", currentServer)));
+        LegacyComponentSerializer
+            .legacyAmpersand()
+            .deserialize((
+                Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_CURRENT_SERVER)
+                    .replace("%nl%", "\n")
+                    .replace("{0}", currentServer)
+            ));
 
     List<RegisteredServer> servers = BuiltinCommandUtil.sortedServerList(server);
     if (servers.size() > MAX_SERVERS_TO_LIST) {
       executor.sendMessage(Identity.nil(),
-              LegacyComponentSerializer
-                      .legacyAmpersand()
-                      .deserialize((
-                              Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                              + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOO_MANY)
-                                      .replace("%nl%", "\n")));
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                  Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                  + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOO_MANY)
+                      .replace("%nl%", "\n")
+              ));
       return;
     }
 
     // Assemble the list of servers as components
-    TextComponent.Builder serverListBuilder = Component.text()
-            .append(LegacyComponentSerializer
-                    .legacyAmpersand()
-                    .deserialize((
-                            Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                            + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_AVAILABLE)
-                                    .replace("%nl%", "\n")));
+    TextComponent.Builder serverListBuilder = Component
+        .text().append(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize((
+                    Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                    + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_AVAILABLE)
+                        .replace("%nl%", "\n")
+                ));
     for (int i = 0; i < servers.size(); i++) {
       RegisteredServer rs = servers.get(i);
       serverListBuilder.append(formatServerComponent(currentServer, rs));
@@ -127,20 +131,22 @@ public class ServerCommand implements SimpleCommand {
     Component playersTextComponent;
     if (connectedPlayers == 1) {
       playersTextComponent = LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize((
-                      Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                      + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_PLAYER_ONLINE)
-                              .replace("%nl%", "\n")
-                              .replace("{0}", String.valueOf(connectedPlayers)));
+          .legacyAmpersand()
+          .deserialize((
+              Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+              + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_PLAYER_ONLINE)
+                  .replace("%nl%", "\n")
+                  .replace("{0}", String.valueOf(connectedPlayers))
+          );
     } else {
       playersTextComponent = LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize((
-                      Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                      + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_PLAYERS_ONLINE)
-                              .replace("%nl%", "\n")
-                              .replace("{0}", String.valueOf(connectedPlayers)));
+          .legacyAmpersand()
+          .deserialize((
+              Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+              + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_PLAYERS_ONLINE)
+                  .replace("%nl%", "\n")
+                  .replace("{0}", String.valueOf(connectedPlayers))
+          );
     }
 
     if (serverInfo.getName().equals(currentPlayerServer)) {
@@ -154,28 +160,29 @@ public class ServerCommand implements SimpleCommand {
                           + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_CURRENT_SERVER)
                               .replace("%nl%", "\n")
                               .replace("{0}",
-                                      LegacyComponentSerializer
-                                              .legacySection()
-                                              .serialize(
-                                                      playersTextComponent))))
-          );
+                                  LegacyComponentSerializer
+                                      .legacySection()
+                                      .serialize(
+                                          playersTextComponent))
+                      )));
     } else {
       serverTextComponent = serverTextComponent.color(NamedTextColor.GRAY)
           .clickEvent(ClickEvent.runCommand("/server " + serverInfo.getName()))
           .hoverEvent(
               showText(
-                LegacyComponentSerializer
-                  .legacyAmpersand()
-                  .deserialize((
-                    Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                    + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_OFFER_CONNECT_SERVER)
-                      .replace("%nl%", "\n")
-                      .replace("{0}",
-                              LegacyComponentSerializer
+                  LegacyComponentSerializer
+                      .legacyAmpersand()
+                      .deserialize((
+                          Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                          + Settings.IMP.MESSAGES.VELOCITY.COMMAND
+                              .SERVER_TOOLTIP_OFFER_CONNECT_SERVER)
+                              .replace("%nl%", "\n")
+                              .replace("{0}",
+                                  LegacyComponentSerializer
                                       .legacySection()
                                       .serialize(
-                                              playersTextComponent))))
-          );
+                                          playersTextComponent))
+                      )));
     }
     return serverTextComponent;
   }
@@ -184,7 +191,7 @@ public class ServerCommand implements SimpleCommand {
   public List<String> suggest(final SimpleCommand.Invocation invocation) {
     final String[] currentArgs = invocation.arguments();
     Stream<String> possibilities = server.getAllServers().stream()
-            .map(rs -> rs.getServerInfo().getName());
+        .map(rs -> rs.getServerInfo().getName());
 
     if (currentArgs.length == 0) {
       return possibilities.collect(Collectors.toList());
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
index e9d64d40..8328752a 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
@@ -154,6 +154,7 @@ public class MinecraftConnection extends ChannelInboundHandlerAdapter {
                   server.getElytraProxy().getLogger().info(notifymsg,
                           ctx.channel().remoteAddress(),
                           adr.getAddress().getHostAddress());
+                  server.getElytraProxy().getStatistics().addBlockedConnection();
                   return;
                 }
               }
@@ -163,6 +164,7 @@ public class MinecraftConnection extends ChannelInboundHandlerAdapter {
                   server.getElytraProxy().getLogger().info(notifymsg,
                           ctx.channel().remoteAddress(),
                           adr.getHostName());
+                  server.getElytraProxy().getStatistics().addBlockedConnection();
                   return;
                 }
               }
@@ -173,6 +175,7 @@ public class MinecraftConnection extends ChannelInboundHandlerAdapter {
                   server.getElytraProxy().getLogger().info(notifymsg,
                           ctx.channel().remoteAddress(),
                           adr.getAddress().getHostAddress());
+                  server.getElytraProxy().getStatistics().addBlockedConnection();
                   return;
                 }
               }
@@ -182,6 +185,7 @@ public class MinecraftConnection extends ChannelInboundHandlerAdapter {
                   server.getElytraProxy().getLogger().info(notifymsg,
                           ctx.channel().remoteAddress(),
                           adr.getHostName());
+                  server.getElytraProxy().getStatistics().addBlockedConnection();
                   return;
                 }
               }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java
index 227ea644..298552e3 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java
@@ -52,10 +52,11 @@ import ru.elytrium.elytraproxy.config.Settings;
 public class LoginSessionHandler implements MinecraftSessionHandler {
 
   private static final TextComponent MODERN_IP_FORWARDING_FAILURE = LegacyComponentSerializer
-          .legacyAmpersand()
-          .deserialize((
-                  Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_FAILED)
-                          .replace("%nl%", "\n"));
+      .legacyAmpersand()
+      .deserialize((
+          Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_FAILED)
+              .replace("%nl%", "\n")
+      );
 
   private final VelocityServer server;
   private final VelocityServerConnection serverConn;
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
index 81cf1a4b..c9b18041 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
@@ -27,13 +27,11 @@ import com.velocitypowered.api.event.command.CommandExecuteEvent.CommandResult;
 import com.velocitypowered.api.event.connection.PluginMessageEvent;
 import com.velocitypowered.api.event.player.PlayerChannelRegisterEvent;
 import com.velocitypowered.api.event.player.PlayerChatEvent;
-import com.velocitypowered.api.event.player.PlayerResourcePackStatusEvent;
 import com.velocitypowered.api.event.player.TabCompleteEvent;
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.api.proxy.messages.ChannelIdentifier;
 import com.velocitypowered.api.proxy.messages.LegacyChannelIdentifier;
 import com.velocitypowered.api.proxy.messages.MinecraftChannelIdentifier;
-import com.velocitypowered.api.proxy.player.ResourcePackInfo;
 import com.velocitypowered.proxy.VelocityServer;
 import com.velocitypowered.proxy.connection.ConnectionTypes;
 import com.velocitypowered.proxy.connection.MinecraftConnection;
@@ -68,12 +66,13 @@ import java.util.Optional;
 import java.util.Queue;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
+import lombok.Getter;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
+import ru.elytrium.elytraproxy.commands.ElytraProxyCommand;
 import ru.elytrium.elytraproxy.config.Settings;
 
 /**
@@ -86,6 +85,8 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
 
   private final ConnectedPlayer player;
   private boolean spawned = false;
+  private boolean checkedBySettings = false;
+  private boolean checkedByBrand = false;
   private final List<UUID> serverBossBars = new ArrayList<>();
   private final Queue<PluginMessage> loginPluginMessages = new ArrayDeque<>();
   private final VelocityServer server;
@@ -138,11 +139,64 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
   @Override
   public boolean handle(ClientSettings packet) {
     player.setPlayerSettings(packet);
+    // TODO: Move to botfilter check
+    String toStringPacket = "{} send settings \"locale= '"
+        + packet.getLocale() + '\''
+        + ", viewDistance=" + packet.getViewDistance()
+        + ", chatVisibility=" + packet.getChatVisibility()
+        + ", chatColors=" + packet.isChatColors()
+        + ", skinParts=" + packet.getSkinParts()
+        + ", mainHand=" + packet.getMainHand()
+        + ", chatFilteringEnabled=" + packet.isChatFilteringEnabled() + '"';
+    if (Settings.IMP.ANTIBOT.ENABLE) {
+      if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
+        if (packet.toString().contains("null")) {
+          logger.error(toStringPacket, player);
+          player.disconnect(
+              LegacyComponentSerializer
+                  .legacyAmpersand()
+                  .deserialize((
+                      Settings.IMP.MESSAGES.ELYTRAPROXY.CLIENT_CHECK_SETTINGS)
+                      .replace("%nl%", "\n")
+                  ));
+          server.getElytraProxy().getLogger().error("{} has null in settings packet", player);
+          server.getElytraProxy().getStatistics().addBlockedConnection();
+        } else if (!packet.isChatColors()) {
+          logger.error(toStringPacket, player);
+          player.disconnect(
+              LegacyComponentSerializer
+                  .legacyAmpersand()
+                  .deserialize((
+                      Settings.IMP.MESSAGES.ELYTRAPROXY.CLIENT_CHECK_SETTINGS_CHAT_COLOR)
+                      .replace("%nl%", "\n")
+                  ));
+          server.getElytraProxy().getLogger().error("{} doesn't send isChatColors packet",
+              player);
+          server.getElytraProxy().getStatistics().addBlockedConnection();
+        } else if (packet.getSkinParts() == 0) {
+          logger.error(toStringPacket, player);
+          player.disconnect(
+              LegacyComponentSerializer
+                  .legacyAmpersand()
+                  .deserialize((
+                      Settings.IMP.MESSAGES.ELYTRAPROXY.CLIENT_CHECK_SETTINGS_SKIN_PARTS)
+                      .replace("%nl%", "\n")
+                  ));
+          server.getElytraProxy().getLogger().error("{} doesn't send skin parts packet",
+              player);
+          server.getElytraProxy().getStatistics().addBlockedConnection();
+        }
+        logger.info(toStringPacket, player);
+      }
+    }
+    checkedBySettings = true;
     return false; // will forward onto the server
   }
 
   @Override
   public boolean handle(Chat packet) {
+    // TODO: Move to botfilter check
+    kickIfCheckNotPassed();
     VelocityServerConnection serverConnection = player.getConnectedServer();
     if (serverConnection == null) {
       return true;
@@ -159,40 +213,42 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
           .thenComposeAsync(event -> processCommandExecuteResult(originalCommand,
               event.getResult()))
           .whenComplete((ignored, throwable) -> {
-            if (Settings.IMP.MAIN_SETTINGS.ENABLE_COMMAND_SPY_IN_CHAT) {
-              for (ConnectedPlayer player1 : VelocityServer.getConnectionsByUuid().values()) {
-                if (player1.hasPermission("elytraproxy.commandspy")) {
-                  if (!player1.getUsername().equalsIgnoreCase(player.getUsername())) {
-                    player1.sendMessage(LegacyComponentSerializer
-                            .legacyAmpersand()
-                            .deserialize(
-                                    Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_FORMAT
-                                            .replace("%nl%", "\n")
-                                            .replace("{0}", player.getUsername())
-                                            .replace("{1}", "/" + originalCommand)));
-                  }
+            for (ConnectedPlayer player1 : ElytraProxyCommand.getPlayersWithSpy()) {
+              if (player1.hasPermission("elytraproxy.command.commandspy")) {
+                if (!player1.getUsername().equals(player.getUsername())) {
+                  player1.sendMessage(
+                      LegacyComponentSerializer
+                          .legacyAmpersand()
+                          .deserialize((
+                              Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_FORMAT)
+                                  .replace("%nl%", "\n")
+                                  .replace("{0}", player.getUsername())
+                                  .replace("{1}", "/" + originalCommand)
+                          ));
                 }
               }
             }
             if (server.getConfiguration().isLogCommandExecutions()) {
-              logger.info(
-                      Settings.IMP.MESSAGES.ELYTRAPROXY.CONSOLE_LOG_COMMAND_EXECUTIONS_FORMAT
-                              .replace("%nl%", "\n")
-                              .replace("&", "§")
-                              .replace("{0}", String.valueOf(player))
-                              .replace("{1}", "/" + originalCommand));
+              logger.info((
+                  Settings.IMP.MESSAGES.ELYTRAPROXY.CONSOLE_LOG_COMMAND_EXECUTIONS_FORMAT)
+                      .replace("%nl%", "\n")
+                      .replace("&", "§")
+                      .replace("{0}", String.valueOf(player))
+                      .replace("{1}", "/" + originalCommand)
+              );
             }
           })
           .exceptionally(e -> {
             logger.info("Exception occurred while running command for {}",
                 player.getUsername(), e);
             player.sendMessage(Identity.nil(),
-                    LegacyComponentSerializer
-                            .legacyAmpersand()
-                            .deserialize((
-                                    Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                                    + Settings.IMP.MESSAGES.VELOCITY.COMMAND.GENERIC_ERROR)
-                                            .replace("%nl%", "\n")));
+                LegacyComponentSerializer
+                    .legacyAmpersand()
+                    .deserialize((
+                        Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                        + Settings.IMP.MESSAGES.VELOCITY.COMMAND.GENERIC_ERROR)
+                            .replace("%nl%", "\n")
+                    ));
             return null;
           });
     } else {
@@ -217,6 +273,31 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
     return true;
   }
 
+  private void kickIfCheckNotPassed() {
+    if (Settings.IMP.ANTIBOT.ENABLE) {
+      if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
+        player.disconnect(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize((
+                    Settings.IMP.MESSAGES.ELYTRAPROXY.CLIENT_CHECK_BRAND)
+                    .replace("%nl%", "\n")
+                ));
+        server.getElytraProxy().getStatistics().addBlockedConnection();
+      }
+      if ((!checkedByBrand) && Settings.IMP.ANTIBOT.CHECK_CLIENT_BRAND) {
+        player.disconnect(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize((
+                    Settings.IMP.MESSAGES.ELYTRAPROXY.CLIENT_CHECK_BRAND)
+                    .replace("%nl%", "\n")
+                ));
+        server.getElytraProxy().getStatistics().addBlockedConnection();
+      }
+    }
+  }
+
   @Override
   public boolean handle(TabCompleteRequest packet) {
     boolean isCommand = !packet.isAssumeCommand() && packet.getCommand().startsWith("/");
@@ -248,7 +329,7 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
           }
         }
         server.getEventManager().fireAndForget(new PlayerChannelRegisterEvent(player,
-                ImmutableList.copyOf(channelIdentifiers)));
+            ImmutableList.copyOf(channelIdentifiers)));
         backendConn.write(packet.retain());
       } else if (PluginMessageUtil.isUnregister(packet)) {
         player.getKnownChannels().removeAll(PluginMessageUtil.getChannels(packet));
@@ -257,6 +338,11 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
         player.setClientBrand(PluginMessageUtil.readBrandMessage(packet.content()));
         backendConn.write(PluginMessageUtil
             .rewriteMinecraftBrand(packet, server.getVersion(), player.getProtocolVersion()));
+        if (!checkedByBrand) {
+          logger.info("{} has client brand {}", player,
+              PluginMessageUtil.readBrandMessage(packet.content()));
+          checkedByBrand = true;
+        }
       } else if (BungeeCordMessageResponder.isBungeeCordMessage(packet)) {
         return true;
       } else {
@@ -342,6 +428,8 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
     if (smc != null && !smc.isClosed() && serverConnection.getPhase().consideredComplete()) {
       smc.write(buf.retain());
     }
+    // TODO: Move to botfilter check
+    kickIfCheckNotPassed();
   }
 
   @Override
@@ -355,8 +443,9 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
         LegacyComponentSerializer
             .legacyAmpersand()
             .deserialize((
-                    Settings.IMP.MESSAGES.VELOCITY.ERROR.PLAYER_CONNECTION_ERROR)
-                            .replace("%nl%", "\n")));
+                Settings.IMP.MESSAGES.VELOCITY.ERROR.PLAYER_CONNECTION_ERROR)
+                    .replace("%nl%", "\n")
+            ));
   }
 
   @Override
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
index 59bd0fab..2f537859 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
@@ -514,20 +514,22 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
     Component friendlyError;
     if (connectedServer != null && connectedServer.getServerInfo().equals(server.getServerInfo())) {
       friendlyError = LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize((
-                      Settings.IMP.MESSAGES.VELOCITY.ERROR.CONNECTED_SERVER_ERROR)
-                              .replace("%nl%", "\n")
-                              .replace("{0}", server.getServerInfo().getName()));
+          .legacyAmpersand()
+          .deserialize((
+              Settings.IMP.MESSAGES.VELOCITY.ERROR.CONNECTED_SERVER_ERROR)
+                  .replace("%nl%", "\n")
+                  .replace("{0}", server.getServerInfo().getName())
+          );
     } else {
       logger.error("{}: unable to connect to server {}", this, server.getServerInfo().getName(),
           wrapped);
       friendlyError = LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize((
-                      Settings.IMP.MESSAGES.VELOCITY.ERROR.CONNECTING_SERVER_ERROR)
-                              .replace("%nl%", "\n")
-                              .replace("{0}", server.getServerInfo().getName()));
+          .legacyAmpersand()
+          .deserialize((
+              Settings.IMP.MESSAGES.VELOCITY.ERROR.CONNECTING_SERVER_ERROR)
+                  .replace("%nl%", "\n")
+                  .replace("{0}", server.getServerInfo().getName())
+          );
     }
     handleConnectionException(server, null, friendlyError, safe);
   }
@@ -548,40 +550,46 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
     Component disconnectReason = GsonComponentSerializer.gson().deserialize(disconnect.getReason());
     if (connectedServer != null && connectedServer.getServerInfo().equals(server.getServerInfo())) {
       logger.info("{}: kicked from server {}: {}", this, server.getServerInfo().getName(),
-              LegacyComponentSerializer
-                      .legacySection()
-                      .serialize(disconnectReason));
+          LegacyComponentSerializer
+              .legacySection()
+              .serialize(
+                  disconnectReason
+              ));
       // TODO: rewrite this shit
       handleConnectionException(server, disconnectReason,
-              LegacyComponentSerializer
-                      .legacyAmpersand()
-                      .deserialize((
-                              Settings.IMP.MESSAGES.VELOCITY.ERROR.MOVED_TO_NEW_SERVER)
-                                      .replace("%nl%", "\n")
-                                      .replace("{0}", server.getServerInfo().getName())
-                                      .replace("{1}",
-                                              LegacyComponentSerializer
-                                                      .legacySection()
-                                                      .serialize(
-                                                              disconnectReason))), safe);
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                  Settings.IMP.MESSAGES.VELOCITY.ERROR.MOVED_TO_NEW_SERVER)
+                      .replace("%nl%", "\n")
+                      .replace("{0}", server.getServerInfo().getName())
+                      .replace("{1}",
+                          LegacyComponentSerializer
+                              .legacySection()
+                              .serialize(
+                                  disconnectReason))
+              ), safe);
     } else {
       logger.error("{}: disconnected while connecting to {}: {}", this,
           server.getServerInfo().getName(),
               LegacyComponentSerializer
-                      .legacySection()
-                      .serialize(disconnectReason));
+                  .legacySection()
+                  .serialize(
+                      disconnectReason
+                  ));
       handleConnectionException(server, disconnectReason,
-              LegacyComponentSerializer
-                      .legacyAmpersand()
-                      .deserialize((
-                              Settings.IMP.MESSAGES.VELOCITY.ERROR.CANT_CONNECT)
-                                      .replace("%nl%", "\n")
-                                      .replace("{0}", server.getServerInfo().getName())
-                                      .replace("{1}",
-                                              LegacyComponentSerializer
-                                                      .legacySection()
-                                                      .serialize(
-                                                              disconnectReason))), safe);
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                  Settings.IMP.MESSAGES.VELOCITY.ERROR.CANT_CONNECT)
+                      .replace("%nl%", "\n")
+                      .replace("{0}", server.getServerInfo().getName())
+                      .replace("{1}",
+                          LegacyComponentSerializer
+                              .legacySection()
+                              .serialize(
+                                  disconnectReason))
+              ), safe);
     }
   }
 
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java
index ed8765e1..5914c277 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java
@@ -75,8 +75,8 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
   public boolean handle(LegacyHandshake packet) {
     connection.closeWith(LegacyDisconnect
         .from(Component.text(
-                "Your client is extremely old. Please update to a newer version of Minecraft.",
-                NamedTextColor.RED)
+            "Your client is extremely old. Please update to a newer version of Minecraft.",
+            NamedTextColor.RED)
         ));
     return true;
   }
@@ -150,11 +150,12 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
     if (server.getConfiguration().getPlayerInfoForwardingMode() == PlayerInfoForwarding.MODERN
         && handshake.getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_13) < 0) {
       ic.disconnectQuietly(
-             LegacyComponentSerializer
-                    .legacyAmpersand()
-                    .deserialize((
-                           Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_NEEDS_NEW_CLIENT)
-                                  .replace("%nl%", "\n")));
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                  Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_NEEDS_NEW_CLIENT)
+                      .replace("%nl%", "\n")
+              ));
       return;
     }
 
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
index f59d1d34..de0a6100 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
@@ -44,6 +44,7 @@ import com.velocitypowered.proxy.config.VelocityConfiguration;
 import com.velocitypowered.proxy.connection.MinecraftConnection;
 import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
 import com.velocitypowered.proxy.protocol.StateRegistry;
+import com.velocitypowered.proxy.protocol.packet.ClientSettings;
 import com.velocitypowered.proxy.protocol.packet.Disconnect;
 import com.velocitypowered.proxy.protocol.packet.EncryptionRequest;
 import com.velocitypowered.proxy.protocol.packet.EncryptionResponse;
@@ -153,11 +154,12 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
           } else if (profileResponse.getStatusCode() == 204) {
             // Apparently an offline-mode user logged onto this online-mode proxy.
             inbound.disconnect(
-                    LegacyComponentSerializer
-                            .legacyAmpersand()
-                            .deserialize((
-                                    Settings.IMP.MESSAGES.VELOCITY.ERROR.ONLINE_MODE_ONLY)
-                                            .replace("%nl%", "\n")));
+                LegacyComponentSerializer
+                    .legacyAmpersand()
+                    .deserialize((
+                        Settings.IMP.MESSAGES.VELOCITY.ERROR.ONLINE_MODE_ONLY)
+                            .replace("%nl%", "\n")
+                    ));
           } else {
             // Something else went wrong
             logger.error(
@@ -181,6 +183,7 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
   }
 
   private void beginPreLogin() {
+    server.getElytraProxy().getStatistics().addTotalConnectionPerSecond();
     ServerLogin login = this.login;
     if (login == null) {
       throw new IllegalStateException("No ServerLogin packet received yet.");
@@ -247,11 +250,12 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
       this.connectedPlayer = player;
       if (!server.canRegisterConnection(player)) {
         player.disconnect0(
-                LegacyComponentSerializer
-                        .legacyAmpersand()
-                        .deserialize((
-                                Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY)
-                                        .replace("%nl%", "\n")), true);
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize((
+                    Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY)
+                        .replace("%nl%", "\n")
+                ), true);
         return;
       }
       /*
@@ -270,15 +274,17 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
       }
       */
       logger.info("{} has connected", player);
-      // ElytraProxy Start - Init antibot & protocol blocker
+      server.getElytraProxy().getStatistics().addConnectionPerSecond();
+      // ElytraProxy Start
       if (Settings.IMP.MAIN_SETTINGS.BANNED_PROTOCOLS
-              .contains(mcConnection.getProtocolVersion().getProtocol())) {
+          .contains(mcConnection.getProtocolVersion().getProtocol())) {
         player.disconnect0(
-                LegacyComponentSerializer
-                        .legacyAmpersand()
-                        .deserialize((
-                                Settings.IMP.MESSAGES.ELYTRAPROXY.PROTOCOL_BLOCKED)
-                                        .replace("%nl%", "\n")), true);
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize((
+                    Settings.IMP.MESSAGES.ELYTRAPROXY.PROTOCOL_BLOCKED)
+                        .replace("%nl%", "\n")
+                ), true);
         return;
       }
       if (Settings.IMP.ANTIBOT.ENABLE) {
@@ -296,28 +302,27 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
 
   private void preLoginCheck(ConnectedPlayer player) {
     String formattedNickname = player.getUsername().toLowerCase();
-
     if (Settings.IMP.ANTIBOT.BANNED_NICK_PATTERNS
-              .stream().anyMatch(formattedNickname::contains)) {
+        .stream().anyMatch(formattedNickname::contains)) {
       player.disconnect0(
-              LegacyComponentSerializer
-                      .legacyAmpersand()
-                      .deserialize((
-                              Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                              + Settings.IMP.MESSAGES.ELYTRAPROXY.NICK_BLOCKED)
-                                      .replace("%nl%", "\n")), true);
-      server.getElytraProxy().getLogger().info("Firewalled bot {}", player.getUsername());
-    } else {
-      //injectBotFilterOrFinishLogin(player);
-
-      // temp
-      completeLoginProtocol(player, true);
-      initialize(player);
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                  Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                  + Settings.IMP.MESSAGES.ELYTRAPROXY.NICK_BLOCKED)
+                      .replace("%nl%", "\n")
+              ), true);
+      server.getElytraProxy().getStatistics().addBlockedConnection();
+      return;
     }
+    // injectBotFilterOrFinishLogin(player);
+
+    // temp
+    completeLoginProtocol(player, true);
+    initialize(player);
   }
 
   private void injectBotFilterOrFinishLogin(ConnectedPlayer player) {
-
     if (server.getElytraProxy().shouldCheck(player)) {
       server.getElytraProxy().setupPipelineAndStartCheck(player, this);
     } else {
@@ -383,11 +388,12 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
           } else {
             if (!server.registerConnection(player)) {
               player.disconnect0(
-                      LegacyComponentSerializer
-                              .legacyAmpersand()
-                              .deserialize((
-                                      Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY)
-                                              .replace("%nl%", "\n")), true);
+                  LegacyComponentSerializer
+                      .legacyAmpersand()
+                      .deserialize((
+                          Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY)
+                              .replace("%nl%", "\n")
+                      ), true);
               return;
             }
 
@@ -417,11 +423,12 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
           Optional<RegisteredServer> toTry = event.getInitialServer();
           if (!toTry.isPresent()) {
             player.disconnect0(
-                    LegacyComponentSerializer
-                            .legacyAmpersand()
-                            .deserialize((
-                                    Settings.IMP.MESSAGES.VELOCITY.ERROR.NO_AVAILABLE_SERVERS)
-                                            .replace("%nl%", "\n")), true);
+                LegacyComponentSerializer
+                    .legacyAmpersand()
+                    .deserialize((
+                        Settings.IMP.MESSAGES.VELOCITY.ERROR.NO_AVAILABLE_SERVERS)
+                            .replace("%nl%", "\n")
+                    ), true);
             return;
           }
           player.createConnectionRequest(toTry.get()).fireAndForget();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/StatusSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/StatusSessionHandler.java
index 3e7d5ac4..3e4e719f 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/StatusSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/StatusSessionHandler.java
@@ -72,6 +72,7 @@ public class StatusSessionHandler implements MinecraftSessionHandler {
       logger.info("{} is pinging the server with version {}", this.inbound,
           this.connection.getProtocolVersion());
     }
+    server.getElytraProxy().getStatistics().addPingPerSecond();
   }
 
   private ServerPing constructLocalPing(ProtocolVersion version) {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/network/ServerChannelInitializer.java b/proxy/src/main/java/com/velocitypowered/proxy/network/ServerChannelInitializer.java
index a0ae648c..ca1c8619 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/network/ServerChannelInitializer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/network/ServerChannelInitializer.java
@@ -55,11 +55,15 @@ public class ServerChannelInitializer extends ChannelInitializer<Channel> {
   @Override
   protected void initChannel(final Channel ch) {
 
+    if (server.getElytraProxy() == null) {
+      return;
+    }
     //BotFilter start - global rate limiter
     boolean isProxyProtocol = this.server.getConfiguration().isProxyProtocol();
     if (!isProxyProtocol && !server.getIpAttemptLimiter()
         .attempt(((InetSocketAddress)ch.remoteAddress()).getAddress())) {
       ch.close();
+      server.getElytraProxy().getStatistics().addBlockedConnection();
       return;
     }
     //BotFilter end
@@ -78,6 +82,7 @@ public class ServerChannelInitializer extends ChannelInitializer<Channel> {
     final MinecraftConnection connection = new MinecraftConnection(ch, this.server);
     connection.setSessionHandler(new HandshakeSessionHandler(connection, this.server));
     ch.pipeline().addLast(Connections.HANDLER, connection);
+    server.getElytraProxy().getStatistics().addTotalConnectionPerSecond();
 
     if (isProxyProtocol) { //BotFilter - reuse variable
       ch.pipeline().addFirst(new HAProxyMessageDecoder());
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/GS4QueryHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/GS4QueryHandler.java
index ff4a63b2..f4390b56 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/GS4QueryHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/GS4QueryHandler.java
@@ -24,7 +24,6 @@ import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
 import com.google.common.collect.ImmutableSet;
 import com.velocitypowered.api.event.query.ProxyQueryEvent;
-import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.api.plugin.PluginContainer;
 import com.velocitypowered.api.plugin.PluginDescription;
 import com.velocitypowered.api.proxy.Player;
@@ -47,6 +46,7 @@ import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
 import net.kyori.adventure.text.serializer.plain.PlainComponentSerializer;
 import org.apache.logging.log4j.LogManager;
+import ru.elytrium.elytraproxy.config.Settings;
 
 public class GS4QueryHandler extends SimpleChannelInboundHandler<DatagramPacket> {
 
@@ -84,15 +84,18 @@ public class GS4QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
   private QueryResponse createInitialResponse() {
     return QueryResponse.builder()
         .hostname(PlainComponentSerializer.plain().serialize(server.getConfiguration().getMotd()))
-        .gameVersion(ProtocolVersion.SUPPORTED_VERSION_STRING)
+        .gameVersion("")
         .map(server.getConfiguration().getQueryMap())
         .currentPlayers(server.getPlayerCount())
         .maxPlayers(server.getConfiguration().getShowMaxPlayers())
         .proxyPort(server.getConfiguration().getBind().getPort())
         .proxyHost(server.getConfiguration().getBind().getHostString())
-        .players(server.getAllPlayers().stream().map(Player::getUsername)
+        .players(server.getAllPlayers().stream().filter(p ->
+            !Settings.IMP.MAIN_SETTINGS.IGNORE_ONLINE_AT.contains(p.getCurrentServer()
+                .get().getServerInfo().getName()))
+            .map(Player::getUsername)
             .collect(Collectors.toList()))
-        .proxyVersion("Velocity")
+        .proxyVersion(Settings.IMP.MAIN_SETTINGS.PING_VERSION)
         .plugins(
             server.getConfiguration().shouldQueryShowPlugins() ? getRealPluginInformation()
                 : Collections.emptyList())
@@ -179,6 +182,8 @@ public class GS4QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
 
               // Send the response
               DatagramPacket responsePacket = new DatagramPacket(queryResponse, msg.sender());
+              server.getElytraProxy().getLogger().info("New query response by {}", senderAddress);
+              server.getElytraProxy().getStatistics().addTotalConnectionPerSecond();
               ctx.writeAndFlush(responsePacket, ctx.voidPromise());
             }, ctx.channel().eventLoop())
             .exceptionally((ex) -> {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/util/InformationUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/util/InformationUtils.java
index f054e0cc..2199dfa1 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/util/InformationUtils.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/util/InformationUtils.java
@@ -32,7 +32,6 @@ import com.velocitypowered.api.proxy.ProxyServer;
 import com.velocitypowered.api.proxy.config.ProxyConfig;
 import com.velocitypowered.api.proxy.server.RegisteredServer;
 import com.velocitypowered.api.util.ProxyVersion;
-
 import java.net.Inet4Address;
 import java.net.Inet6Address;
 import java.net.InetAddress;
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/util/ratelimit/GuavaCacheRatelimiter.java b/proxy/src/main/java/com/velocitypowered/proxy/util/ratelimit/GuavaCacheRatelimiter.java
index 85ba984f..96448f0c 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/util/ratelimit/GuavaCacheRatelimiter.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/util/ratelimit/GuavaCacheRatelimiter.java
@@ -24,11 +24,9 @@ import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
-
 import java.net.InetAddress;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
-
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/ElytraProxy.java b/proxy/src/main/java/ru/elytrium/elytraproxy/ElytraProxy.java
index b297f5d5..83efc010 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/ElytraProxy.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/ElytraProxy.java
@@ -26,7 +26,6 @@ import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
 import com.velocitypowered.proxy.network.Connections;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.channel.ChannelPipeline;
-
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.IOException;
@@ -34,8 +33,8 @@ import java.io.InputStreamReader;
 import java.net.URL;
 import java.net.URLConnection;
 import java.nio.charset.StandardCharsets;
-
 import lombok.Getter;
+import lombok.ToString;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
@@ -49,10 +48,12 @@ import ru.elytrium.elytraproxy.commands.ElytraProxyCommand;
 import ru.elytrium.elytraproxy.commands.FindCommand;
 import ru.elytrium.elytraproxy.commands.SendCommand;
 import ru.elytrium.elytraproxy.config.Settings;
+import ru.elytrium.elytraproxy.stats.Statistics;
 
 @Getter
+@ToString
 @SuppressFBWarnings({"RV_RETURN_VALUE_IGNORED",
-        "OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE"})
+    "OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE"})
 public class ElytraProxy {
   private final Logger logger = LogManager.getLogger("ElytraProxy");
   //private Database database;
@@ -62,17 +63,20 @@ public class ElytraProxy {
 
   private final VelocityServer velocityServer;
   private final VirtualServer virtualServer;
+  private final Statistics statistics;
   // BotFilter end
 
   public ElytraProxy(VelocityServer velocityServer) {
-    Settings.IMP.reload(new File("ElytraProxy", "config.yml"));
     // BotFilter start
     this.velocityServer = velocityServer;
     this.virtualServer = new VirtualServer(this);
     this.virtualServer.reload();
     // BotFilter end
+    Settings.IMP.reload(new File("ElytraProxy", "config.yml"));
     registerCommand(velocityServer);
     //initDatabase(velocityServer);
+    statistics = new Statistics();
+    statistics.startUpdating();
     checkForUpdates();
     logger.info("ElytraProxy was loaded.");
   }
@@ -131,7 +135,7 @@ public class ElytraProxy {
       connection.setSessionHandler(sessionHandler);
 
       ChannelPipeline pipeline = connection.getChannel().pipeline();
-
+      System.out.println("pre changed");
       if (sessionHandler.getPlayer().isOnlineMode()) {
         pipeline.addAfter(Connections.CIPHER_ENCODER, "prepared-encoder",
             PreparedPacketEncoder.getEncoder(connection.getProtocolVersion(), true));
@@ -141,6 +145,7 @@ public class ElytraProxy {
         pipeline.addFirst("multipleprepared-encoder",
             MultiplePreparedPacketsEncoder.getEncoder(connection.getProtocolVersion()));
       }
+      System.out.println("changed");
 
       virtualServer.spawnPlayer(sessionHandler);
     } catch (Throwable t) {
@@ -152,21 +157,23 @@ public class ElytraProxy {
     try {
       new ElytraProxy(velocityServer);
       source.sendMessage(Identity.nil(),
-              LegacyComponentSerializer
-                      .legacyAmpersand()
-                      .deserialize((
-                              Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                              + Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_SUCCESS)
-                                      .replace("%nl%", "\n")));
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                  Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                  + Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_SUCCESS)
+                      .replace("%nl%", "\n")
+              ));
     } catch (Exception e) {
       logger.error("Unable to reload configuration", e);
       source.sendMessage(Identity.nil(),
-              LegacyComponentSerializer
-                      .legacyAmpersand()
-                      .deserialize((
-                              Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                              + Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_FAILURE)
-                                      .replace("%nl%", "\n")));
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                  Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                  + Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_FAILURE)
+                      .replace("%nl%", "\n")
+              ));
     }
   }
 
@@ -178,7 +185,7 @@ public class ElytraProxy {
       conn.setConnectTimeout(1200);
       conn.setReadTimeout(1200);
       try (BufferedReader in = new BufferedReader(
-              new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))) {
+          new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))) {
         if (!Settings.IMP.VERSION.contains("-DEV")) {
           if (!in.readLine().trim().equalsIgnoreCase(Settings.IMP.VERSION)) {
             logger.error("****************************************");
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/BotFilterProtocol.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/BotFilterProtocol.java
index e4103416..aa2cfcc9 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/BotFilterProtocol.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/BotFilterProtocol.java
@@ -24,6 +24,7 @@ import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_14;
 import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_15;
 import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_16;
 import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_16_2;
+import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_17;
 import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_7_2;
 import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_9;
 import static com.velocitypowered.proxy.protocol.StateRegistry.map;
@@ -32,6 +33,7 @@ import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.StateRegistry;
 import ru.elytrium.elytraproxy.botfilter.protocol.packet.JoinGame;
 import ru.elytrium.elytraproxy.botfilter.protocol.packet.PlayerPositionAndLook;
+import ru.elytrium.elytraproxy.botfilter.protocol.packet.UpdateViewPosition;
 import ru.elytrium.elytraproxy.botfilter.protocol.packet.world.ChunkData;
 import ru.elytrium.elytraproxy.botfilter.protocol.packet.world.UpdateLight;
 
@@ -46,7 +48,8 @@ public class BotFilterProtocol {
         map(0x25, MINECRAFT_1_14, false),
         map(0x26, MINECRAFT_1_15, false),
         map(0x25, MINECRAFT_1_16, false),
-        map(0x24, MINECRAFT_1_16_2, false)
+        map(0x24, MINECRAFT_1_16_2, false),
+        map(0x26, MINECRAFT_1_17, false)
     );
     StateRegistry.BotFilter.clientbound.register(
         PlayerPositionAndLook.class, PlayerPositionAndLook::new,
@@ -57,7 +60,8 @@ public class BotFilterProtocol {
         map(0x35, ProtocolVersion.MINECRAFT_1_14, true),
         map(0x36, ProtocolVersion.MINECRAFT_1_15, true),
         map(0x35, ProtocolVersion.MINECRAFT_1_16, true),
-        map(0x34, ProtocolVersion.MINECRAFT_1_16_2, true));
+        map(0x34, ProtocolVersion.MINECRAFT_1_16_2, true),
+        map(0x38, ProtocolVersion.MINECRAFT_1_17, true));
 
     StateRegistry.BotFilter.clientbound.register(
         ChunkData.class, ChunkData::new,
@@ -68,12 +72,20 @@ public class BotFilterProtocol {
         map(0x21, ProtocolVersion.MINECRAFT_1_14, true),
         map(0x22, ProtocolVersion.MINECRAFT_1_15, true),
         map(0x21, ProtocolVersion.MINECRAFT_1_16, true),
-        map(0x20, ProtocolVersion.MINECRAFT_1_16_2, true));
+        map(0x20, ProtocolVersion.MINECRAFT_1_16_2, true),
+        map(0x22, ProtocolVersion.MINECRAFT_1_17, true));
 
     StateRegistry.BotFilter.clientbound.register(
         UpdateLight.class, UpdateLight::new,
         map(0x24, ProtocolVersion.MINECRAFT_1_14, true),
         map(0x25, ProtocolVersion.MINECRAFT_1_15, true),
-        map(0xF0, ProtocolVersion.MINECRAFT_1_16, true)); //RANDOM ID
+        map(0x24, ProtocolVersion.MINECRAFT_1_16, true),
+        map(0x23, ProtocolVersion.MINECRAFT_1_16_2, true),
+        map(0x25, ProtocolVersion.MINECRAFT_1_17, true));
+
+    StateRegistry.BotFilter.clientbound.register(
+        UpdateViewPosition.class, UpdateViewPosition::new,
+        map(0x49, ProtocolVersion.MINECRAFT_1_17, true));
+
   }
 }
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/MultiplePreparedPackets.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/MultiplePreparedPackets.java
index 06eac8b1..30d1d98e 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/MultiplePreparedPackets.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/MultiplePreparedPackets.java
@@ -23,7 +23,6 @@ import com.google.common.base.Preconditions;
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.connection.MinecraftConnection;
 import io.netty.buffer.ByteBuf;
-
 import java.util.EnumMap;
 import java.util.EnumSet;
 import java.util.HashSet;
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/PacketCompressor.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/PacketCompressor.java
index e6e8cc07..b4b6b724 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/PacketCompressor.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/PacketCompressor.java
@@ -25,7 +25,6 @@ import com.velocitypowered.proxy.config.VelocityConfiguration;
 import com.velocitypowered.proxy.protocol.ProtocolUtils;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
-
 import java.util.function.Supplier;
 
 public class PacketCompressor {
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/PreparedPacket.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/PreparedPacket.java
index 59699e83..a2168d08 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/PreparedPacket.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/PreparedPacket.java
@@ -27,13 +27,11 @@ import com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
 import com.velocitypowered.proxy.protocol.StateRegistry;
 import io.netty.buffer.ByteBuf;
 import io.netty.util.ReferenceCountUtil;
-
 import java.util.EnumMap;
 import java.util.EnumSet;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Map.Entry;
-
 import ru.elytrium.elytraproxy.botfilter.protocol.BotFilterProtocol;
 
 public class PreparedPacket<T extends MinecraftPacket> {
@@ -42,7 +40,7 @@ public class PreparedPacket<T extends MinecraftPacket> {
     BotFilterProtocol.init();
   }
 
-  private final Map<ProtocolVersion, ByteBufHolder> offlineMode =
+  private final Map<ProtocolVersion, ByteBufHolder> packets =
       new EnumMap<>(ProtocolVersion.class);
   private boolean finished = false;
 
@@ -65,6 +63,10 @@ public class PreparedPacket<T extends MinecraftPacket> {
     prepare(packet, from, ProtocolVersion.MAXIMUM_VERSION);
   }
 
+  public void prepare(T packet, ProtocolVersion from, StateRegistry protocol) {
+    prepare(packet, from, ProtocolVersion.MAXIMUM_VERSION, protocol);
+  }
+
   public void prepare(T packet, ProtocolVersion from, ProtocolVersion to) {
     prepare(packet, from, to, StateRegistry.BotFilter);
   }
@@ -73,7 +75,7 @@ public class PreparedPacket<T extends MinecraftPacket> {
     for (ProtocolVersion protocolVersion : EnumSet.range(from, to)) {
       ByteBuf buf = encodePacket(packet, protocolVersion, protocol);
       ByteBufHolder holder = getHolder(buf, protocolVersion);
-      offlineMode.put(protocolVersion, holder);
+      packets.put(protocolVersion, holder);
     }
   }
 
@@ -106,17 +108,17 @@ public class PreparedPacket<T extends MinecraftPacket> {
   }
 
   public ByteBuf getBuffer(ProtocolVersion version) {
-    ByteBufHolder holder = offlineMode.get(version);
+    ByteBufHolder holder = packets.get(version);
     return holder == null ? null : holder.byteBuf.retainedSlice();
   }
 
   public int getBufferLength(ProtocolVersion version) {
-    ByteBufHolder holder = offlineMode.get(version);
+    ByteBufHolder holder = packets.get(version);
     return holder == null ? 0 : holder.byteBuf.readableBytes();
   }
 
   public void selfWrite(MinecraftConnection mc, boolean flush) {
-    if (offlineMode.containsKey(mc.getProtocolVersion())) {
+    if (packets.containsKey(mc.getProtocolVersion())) {
       if (flush) {
         mc.write(this);
       } else {
@@ -131,7 +133,7 @@ public class PreparedPacket<T extends MinecraftPacket> {
 
   private ByteBufHolder getHolder(ByteBuf buf, ProtocolVersion version) {
     if (version.isBefore(ProtocolVersion.MINECRAFT_1_8)) {
-      ByteBufHolder holder = offlineMode.get(ProtocolVersion.MINECRAFT_1_7_2);
+      ByteBufHolder holder = packets.get(ProtocolVersion.MINECRAFT_1_7_2);
       if (holder != null && holder.byteBuf.equals(buf)) {
         buf.release();
         return holder;
@@ -139,7 +141,7 @@ public class PreparedPacket<T extends MinecraftPacket> {
       return new ByteBufHolder(true, buf);
     }
 
-    for (ByteBufHolder holder : new HashSet<>(offlineMode.values())) {
+    for (ByteBufHolder holder : new HashSet<>(packets.values())) {
       if (!holder.mc1_7 && holder.byteBuf.equals(buf)) {
         buf.release();
         return holder;
@@ -152,7 +154,7 @@ public class PreparedPacket<T extends MinecraftPacket> {
     if (finished) {
       throw new IllegalStateException("Packet compression does not allowed after adapt");
     }
-    for (Entry<ProtocolVersion, ByteBufHolder> prepared : offlineMode.entrySet()) {
+    for (Entry<ProtocolVersion, ByteBufHolder> prepared : packets.entrySet()) {
       ByteBufHolder holder = prepared.getValue();
       if (holder.mc1_7 || holder.compressed) {
         continue;
@@ -174,7 +176,7 @@ public class PreparedPacket<T extends MinecraftPacket> {
   }
 
   public void finish() {
-    for (Entry<ProtocolVersion, ByteBufHolder> prepared : offlineMode.entrySet()) {
+    for (Entry<ProtocolVersion, ByteBufHolder> prepared : packets.entrySet()) {
       ByteBufHolder holder = prepared.getValue();
       if (holder.varint) {
         continue;
@@ -192,7 +194,7 @@ public class PreparedPacket<T extends MinecraftPacket> {
   }
 
   public void releaseBuffers() {
-    for (ByteBufHolder holder : new HashSet<>(offlineMode.values())) {
+    for (ByteBufHolder holder : new HashSet<>(packets.values())) {
       holder.byteBuf.release();
     }
   }
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/netty/MultiplePreparedPacketsEncoder.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/netty/MultiplePreparedPacketsEncoder.java
index 4b7f0662..9ef2cc61 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/netty/MultiplePreparedPacketsEncoder.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/netty/MultiplePreparedPacketsEncoder.java
@@ -24,11 +24,9 @@ import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandler.Sharable;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToMessageEncoder;
-
 import java.util.EnumMap;
 import java.util.List;
 import java.util.Map;
-
 import lombok.RequiredArgsConstructor;
 import ru.elytrium.elytraproxy.botfilter.protocol.cache.MultiplePreparedPackets;
 
@@ -51,6 +49,7 @@ public class MultiplePreparedPacketsEncoder extends
   @Override
   protected void encode(ChannelHandlerContext ctx, MultiplePreparedPackets msg, List<Object> out)
       throws Exception {
+    System.out.println("Processing multiple encoder");
     ByteBuf buf = msg.getBuffer(protocolVersion);
     out.add(buf);
   }
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/netty/PreparedPacketEncoder.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/netty/PreparedPacketEncoder.java
index 84c4f16b..c36a017b 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/netty/PreparedPacketEncoder.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/cache/netty/PreparedPacketEncoder.java
@@ -28,9 +28,7 @@ import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandler.Sharable;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToMessageEncoder;
-
 import java.util.List;
-
 import lombok.RequiredArgsConstructor;
 import ru.elytrium.elytraproxy.botfilter.protocol.cache.PreparedPacket;
 
@@ -56,6 +54,7 @@ public class PreparedPacketEncoder extends MessageToMessageEncoder<PreparedPacke
   @Override
   protected void encode(ChannelHandlerContext ctx, PreparedPacket msg, List<Object> out)
       throws Exception {
+    System.out.println("Processing prepared");
     ByteBuf buf = msg.getBuffer(protocolVersion);
     out.add(buf);
   }
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/registry/Biome.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/registry/Biome.java
similarity index 97%
rename from proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/registry/Biome.java
rename to proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/registry/Biome.java
index 39d1b7e8..7759d00b 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/registry/Biome.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/registry/Biome.java
@@ -17,16 +17,15 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package ru.elytrium.elytraproxy.botfilter.protocol.registry;
+package ru.elytrium.elytraproxy.botfilter.protocol.data.registry;
 
 import javax.annotation.Nullable;
-
 import lombok.Data;
 import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
 import net.kyori.adventure.nbt.CompoundBinaryTag.Builder;
-import ru.elytrium.elytraproxy.botfilter.protocol.registry.Biome.Effects.MoodSound;
+import ru.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome.Effects.MoodSound;
 
 public class Biome {
 
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/registry/Dimension.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/registry/Dimension.java
similarity index 88%
rename from proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/registry/Dimension.java
rename to proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/registry/Dimension.java
index 35fe7d72..a2fc2af5 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/registry/Dimension.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/registry/Dimension.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package ru.elytrium.elytraproxy.botfilter.protocol.registry;
+package ru.elytrium.elytraproxy.botfilter.protocol.data.registry;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import lombok.AllArgsConstructor;
@@ -32,11 +32,7 @@ public class Dimension {
 
   public static final Dimension OVERWORLD = new Dimension("minecraft:overworld", 0, false, true,
       0.0f, null, false, "minecraft:infiniburn_overworld",
-      false, true, true, "minecraft:overworld", true, 256, 1.0f, false, false);
-
-  public static final Dimension THEEND = new Dimension("minecraft:the_end", 1, false, true,
-          0.0f, null, false, "minecraft:infiniburn_the_end",
-          false, true, true, "minecraft:the_end", true, 256, 1.0f, false, false);
+      false, true, true, "minecraft:overworld", true, 0, 256, 256, 1.0f, false, false);
 
   @NonNull
   private final String key;
@@ -55,11 +51,14 @@ public class Dimension {
   @NonNull
   private final String effects;
   private final boolean hasRaids;
+  private final int minY;
+  private final int height;
   private final int logicalHeight;
   private final float coordinateScale;
   private final boolean ultrawarm;
   private final boolean hasCeiling;
 
+
   public CompoundBinaryTag encodeAttributes(ProtocolVersion protocolVersion) {
     Builder tag = CompoundBinaryTag.builder()
         .putString("name", key)
@@ -86,6 +85,10 @@ public class Dimension {
           .putString("effects", effects)
           .putFloat("coordinate_scale", coordinateScale);
     }
+    if (protocolVersion.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17)) {
+      tag.putInt("min_y", minY);
+      tag.putInt("height", height);
+    }
 
     return tag.build();
   }
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/registry/DimensionRegistry.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/registry/DimensionRegistry.java
similarity index 98%
rename from proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/registry/DimensionRegistry.java
rename to proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/registry/DimensionRegistry.java
index 5b773e27..253c6de3 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/registry/DimensionRegistry.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/registry/DimensionRegistry.java
@@ -17,12 +17,11 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package ru.elytrium.elytraproxy.botfilter.protocol.registry;
+package ru.elytrium.elytraproxy.botfilter.protocol.data.registry;
 
 import com.google.common.base.Preconditions;
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.connection.registry.DimensionInfo;
-
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -31,7 +30,6 @@ import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
 import java.util.stream.Collectors;
-
 import net.kyori.adventure.nbt.BinaryTagTypes;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
 import net.kyori.adventure.nbt.ListBinaryTag;
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage.java
new file mode 100644
index 00000000..2198206e
--- /dev/null
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage.java
@@ -0,0 +1,52 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package ru.elytrium.elytraproxy.botfilter.protocol.data.storage;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import io.netty.buffer.ByteBuf;
+import lombok.NonNull;
+import org.jetbrains.annotations.NotNull;
+import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
+import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
+
+public interface BlockStorage {
+
+  void set(int x, int y, int z, @NonNull SimpleBlock block);
+
+  @NotNull SimpleBlock get(int x, int y, int z);
+
+  void write(ByteBuf buf, ProtocolVersion version);
+
+  int getDataLength(ProtocolVersion version);
+
+  BlockStorage copy();
+
+  static int index(int x, int y, int z) {
+    return y << 8 | z << 4 | x;
+  }
+
+  static BlockStorage create(Version version) {
+    if (version.isBefore(Version.MINECRAFT_1_9)) {
+      return new BlockStorage17();
+    } else {
+      return new BlockStorage19(version);
+    }
+  }
+}
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage17.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage17.java
new file mode 100644
index 00000000..277d4b07
--- /dev/null
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage17.java
@@ -0,0 +1,110 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package ru.elytrium.elytraproxy.botfilter.protocol.data.storage;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+import io.netty.buffer.ByteBuf;
+import java.util.Arrays;
+import lombok.AccessLevel;
+import lombok.NonNull;
+import lombok.RequiredArgsConstructor;
+import org.jetbrains.annotations.NotNull;
+import ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
+import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
+import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
+import ru.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
+
+@RequiredArgsConstructor(access = AccessLevel.PRIVATE)
+public class BlockStorage17 implements BlockStorage {
+
+  private final SimpleBlock[] blocks;
+  private int pass = 0;
+
+  public BlockStorage17() {
+    this(new SimpleBlock[SimpleChunk.MAX_BLOCKS_PER_SECTION]);
+  }
+
+  @Override
+  public void set(int x, int y, int z, @NonNull SimpleBlock block) {
+    blocks[BlockStorage.index(x, y, z)] = block;
+  }
+
+  @SuppressFBWarnings("NP_NONNULL_RETURN_VIOLATION")
+  @Override
+  public @NotNull SimpleBlock get(int x, int y, int z) {
+    SimpleBlock block = blocks[BlockStorage.index(x, y, z)];
+    return block == null ? SimpleBlock.AIR : block;
+  }
+
+  @Override
+  public void write(ByteBuf buf, ProtocolVersion version) {
+    if (pass == 0) {
+      if (version.isBefore(ProtocolVersion.MINECRAFT_1_8)) {
+        writeBlocks17(buf);
+      } else {
+        writeBlocks18(buf);
+      }
+      pass++;
+    } else if (pass == 1) {
+      NibbleArray3d metadata = new NibbleArray3d(16 * 16 * 16);
+      for (int i = 0; i < blocks.length; i++) {
+        metadata.set(i, blocks[i] == null ? 0 : blocks[i].getData(Version.MINECRAFT_1_7));
+      }
+      buf.writeBytes(metadata.getData());
+      pass = 0;
+    }
+  }
+
+  @Override
+  public BlockStorage copy() {
+    return new BlockStorage17(Arrays.copyOf(blocks, blocks.length));
+  }
+
+  private void writeBlocks17(ByteBuf buf) {
+    byte[] raw = new byte[blocks.length];
+    for (int i = 0; i < blocks.length; i++) {
+      SimpleBlock block = blocks[i];
+      raw[i] = (byte) (block == null ? 0 : block.getId(Version.MINECRAFT_1_7));
+    }
+    buf.writeBytes(raw);
+  }
+
+  private void writeBlocks18(ByteBuf buf) {
+    short[] raw = new short[blocks.length];
+    for (int i = 0; i < blocks.length; i++) {
+      SimpleBlock block = blocks[i];
+      raw[i] = (short) (block == null ? 0
+          : (block.getId(Version.MINECRAFT_1_8) << 4 | block.getData(Version.MINECRAFT_1_8)));
+    }
+    for (Short s : raw) {
+      buf.writeShortLE(s);
+    }
+  }
+
+  @Override
+  public int getDataLength(ProtocolVersion version) {
+    if (version.isBefore(ProtocolVersion.MINECRAFT_1_8)) {
+      return blocks.length + (SimpleChunk.MAX_BLOCKS_PER_SECTION >> 1);
+    } else {
+      return blocks.length * 2;
+    }
+  }
+}
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage19.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage19.java
new file mode 100644
index 00000000..67b4feac
--- /dev/null
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage19.java
@@ -0,0 +1,185 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package ru.elytrium.elytraproxy.botfilter.protocol.data.storage;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+import io.netty.buffer.ByteBuf;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.NonNull;
+import org.jetbrains.annotations.NotNull;
+import ru.elytrium.elytraproxy.botfilter.protocol.util.CompactStorage;
+import ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BitStorage116;
+import ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BitStorage19;
+import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
+import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
+import ru.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
+
+@AllArgsConstructor(access = AccessLevel.PRIVATE)
+public class BlockStorage19 implements BlockStorage {
+
+  private final Version version;
+  private List<SimpleBlock> palette = new ArrayList<>();
+  private Map<Integer, SimpleBlock> rawToBlock = new HashMap<>();
+  private CompactStorage storage;
+
+  public BlockStorage19(Version version) {
+    this.version = version;
+    this.storage = createStorage(4);
+    palette.add(SimpleBlock.AIR);
+    rawToBlock.put(toRaw(SimpleBlock.AIR, version), SimpleBlock.AIR);
+  }
+
+  public void set(int x, int y, int z, @NonNull SimpleBlock block) {
+    int id = getIndex(block);
+    storage.set(index(x, y, z), id);
+  }
+
+  @SuppressFBWarnings("NP_NONNULL_RETURN_VIOLATION")
+  public @NotNull SimpleBlock get(int x, int y, int z) {
+    return get(index(x, y, z));
+  }
+
+  private SimpleBlock get(int index) {
+    int id = storage.get(index);
+
+    if (storage.getBitsPerEntry() > 8) {
+      return rawToBlock.get(id);
+    } else {
+      return palette.get(id);
+    }
+  }
+
+  @Override
+  public void write(ByteBuf buf, ProtocolVersion version) {
+    buf.writeByte(storage.getBitsPerEntry());
+    if (storage.getBitsPerEntry() > 8) {
+      if (this.version.isBefore(Version.MINECRAFT_1_13)) {
+        ProtocolUtils.writeVarInt(buf, 0);
+      }
+    } else {
+      ProtocolUtils.writeVarInt(buf, palette.size());
+      for (SimpleBlock state : palette) {
+        ProtocolUtils.writeVarInt(buf, toRaw(state, this.version));
+      }
+    }
+    storage.write(buf, version);
+  }
+
+  @Override
+  public int getDataLength(ProtocolVersion version) {
+    int length = 1;
+    if (storage.getBitsPerEntry() > 8) {
+      if (this.version.isBefore(Version.MINECRAFT_1_13)) {
+        length += 1;
+      }
+    } else {
+      length += ProtocolUtils.varIntBytes(palette.size());
+      for (SimpleBlock state : palette) {
+        length += ProtocolUtils.varIntBytes(toRaw(state, this.version));
+      }
+    }
+    return length + storage.getDataLength();
+  }
+
+
+  private int getIndex(SimpleBlock block) {
+    if (storage.getBitsPerEntry() > 8) {
+      int raw = toRaw(block, version);
+      rawToBlock.put(raw, block);
+      return raw;
+    }
+    int id = palette.indexOf(block);
+    if (id == -1) {
+      if (palette.size() >= (1 << storage.getBitsPerEntry())) {
+        resize(storage.getBitsPerEntry() + 1);
+        return getIndex(block);
+      }
+      palette.add(block);
+      id = palette.size() - 1;
+    }
+    return id;
+  }
+
+  @Override
+  public BlockStorage copy() {
+    return new BlockStorage19(version, new ArrayList<>(palette), new HashMap<>(rawToBlock),
+        storage.copy());
+  }
+
+  private void resize(int newSize) {
+    newSize = fixBitsPerEntry(newSize);
+    CompactStorage newStorage = createStorage(newSize);
+
+    for (int i = 0; i < SimpleChunk.MAX_BLOCKS_PER_SECTION; i++) {
+      int newId = newSize > 8 ? toRaw(palette.get(storage.get(i)), version) : storage.get(i);
+      newStorage.set(i, newId);
+    }
+    this.storage = newStorage;
+  }
+
+  private int fixBitsPerEntry(int newSize) {
+    if (newSize < 4) {
+      return 4;
+    } else if (newSize < 9) {
+      return newSize;
+    } else if (version.isBefore(Version.MINECRAFT_1_13)) {
+      return 13;
+    } else if (version.isBefore(Version.MINECRAFT_1_16_4)) {
+      return 14;
+    } else {
+      return 15;
+    }
+  }
+
+  private CompactStorage createStorage(int bits) {
+    return version.isBefore(Version.MINECRAFT_1_16)
+        ? new BitStorage19(bits, SimpleChunk.MAX_BLOCKS_PER_SECTION)
+        : new BitStorage116(bits, SimpleChunk.MAX_BLOCKS_PER_SECTION);
+  }
+
+  @Override
+  public String toString() {
+    return "BlockStorage19{"
+        + "version=" + version
+        + ", palette=" + palette
+        + ", rawToBlock=" + rawToBlock
+        + ", storage=" + storage
+        + '}';
+  }
+
+  private static int toRaw(SimpleBlock state, Version version) {
+    if (version.isBefore(Version.MINECRAFT_1_13)) {
+      return (state.getId(version) << 4) | (state.getData(version) & 0xF);
+    } else {
+      return state.getId(version);
+    }
+  }
+
+  private static int index(int x, int y, int z) {
+    return y << 8 | z << 4 | x;
+  }
+}
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/JoinGame.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/JoinGame.java
index 4a9804ab..8a3abcdc 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/JoinGame.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/JoinGame.java
@@ -26,18 +26,14 @@ import com.velocitypowered.proxy.protocol.ProtocolUtils;
 import io.netty.buffer.ByteBuf;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
-import lombok.Getter;
+import lombok.Data;
 import lombok.NoArgsConstructor;
-import lombok.Setter;
-import lombok.ToString;
-import ru.elytrium.elytraproxy.botfilter.protocol.registry.DimensionRegistry;
+import ru.elytrium.elytraproxy.botfilter.protocol.data.registry.DimensionRegistry;
 
-@Getter
-@Setter
-@AllArgsConstructor
-@NoArgsConstructor
-@ToString
+@Data
 @Builder
+@NoArgsConstructor
+@AllArgsConstructor
 public class JoinGame implements MinecraftPacket {
 
   private int entityId;
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/PlayerPositionAndLook.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/PlayerPositionAndLook.java
index 023b5382..d63fa4b5 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/PlayerPositionAndLook.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/PlayerPositionAndLook.java
@@ -45,6 +45,7 @@ public class PlayerPositionAndLook implements MinecraftPacket {
   private float pitch;
   private int teleportId;
   private boolean onGround;
+  private boolean dismountVehicle;
 
   @Override
   public void encode(ByteBuf buf, Direction direction, ProtocolVersion protocolVersion) {
@@ -62,6 +63,9 @@ public class PlayerPositionAndLook implements MinecraftPacket {
     if (protocolVersion.isBefore(ProtocolVersion.MINECRAFT_1_8)) {
       buf.writeBoolean(onGround);
     }
+    if (protocolVersion.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17)) {
+      buf.writeBoolean(dismountVehicle);
+    }
   }
 
   @Override
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/UpdateViewPosition.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/UpdateViewPosition.java
new file mode 100644
index 00000000..0dd5ed62
--- /dev/null
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/UpdateViewPosition.java
@@ -0,0 +1,48 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package ru.elytrium.elytraproxy.botfilter.protocol.packet;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+import lombok.ToString;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+@ToString
+public class UpdateViewPosition implements MinecraftPacket {
+
+  private int chunkX;
+  private int chunkZ;
+
+  @Override
+  public void encode(ByteBuf buf, Direction direction, ProtocolVersion protocolVersion) {
+    ProtocolUtils.writeVarInt(buf, chunkX);
+    ProtocolUtils.writeVarInt(buf, chunkZ);
+  }
+}
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/world/Chunk17to115.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/world/Chunk17to115.java
deleted file mode 100644
index e1e837f5..00000000
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/world/Chunk17to115.java
+++ /dev/null
@@ -1,217 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package ru.elytrium.elytraproxy.botfilter.protocol.packet.world;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.Unpooled;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.zip.Deflater;
-
-import net.kyori.adventure.nbt.CompoundBinaryTag;
-import ru.elytrium.elytraproxy.botfilter.protocol.util.NetworkSection;
-import ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.FlexibleStorage;
-import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import ru.elytrium.elytraproxy.botfilter.server.world.SimpleChunk;
-import ru.elytrium.elytraproxy.botfilter.server.world.SimpleChunk.ChunkSection;
-
-/**
- * 1.7 - 1.15.2
- */
-public class Chunk17to115 extends ChunkData {
-
-  private final SimpleChunk simpleChunk;
-  private final List<NetworkSection> networkSections = new ArrayList<>(16);
-
-  public Chunk17to115(SimpleChunk simpleChunk) {
-    super(simpleChunk.getX(), simpleChunk.getZ());
-    this.simpleChunk = simpleChunk;
-  }
-
-  @Override
-  public void encode(ByteBuf buf, Direction direction, ProtocolVersion version) {
-
-    //write data to out buffer
-    buf.writeInt(getX());
-    buf.writeInt(getZ());
-    buf.writeBoolean(true); //Full chunk
-
-    ByteBuf data = Unpooled.buffer(getInitialDataSize(version));
-    int mask = writeChunkData(data, version);
-
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_9)) {
-      buf.ensureWritable(1024 * 4 + ((36 * 8) * 2) + 150);
-      ProtocolUtils.writeVarInt(buf, mask);
-
-      if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_14)) {
-        ProtocolUtils.writeCompoundTag(buf, buildHeightMap());
-      }
-      if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_15)) {
-        writeChunkBiomes(buf, version);
-      }
-      buf.ensureWritable(data.readableBytes() + 5 + 1);
-      ProtocolUtils.writeVarInt(buf, data.readableBytes());
-      buf.writeBytes(data);
-      if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_9_4)) {
-        ProtocolUtils.writeVarInt(buf, 0); // no tile entities nbts
-      }
-    } else {
-      buf.writeShort(mask); //Number of chunks
-      if (version.isBefore(ProtocolVersion.MINECRAFT_1_8)) {
-        write17(buf, data);
-      } else {
-        ProtocolUtils.writeVarInt(buf, data.readableBytes());
-        buf.writeBytes(data);
-      }
-    }
-    data.release();
-
-  }
-
-  private CompoundBinaryTag buildHeightMap() {
-    FlexibleStorage surface = new FlexibleStorage(9, 256);
-    FlexibleStorage motionBlocking = new FlexibleStorage(9, 256);
-
-    for (int y = 0; y < 256; y++) {
-      for (int x = 0; x < 16; x++) {
-        for (int z = 0; z < 16; z++) {
-          SimpleBlock block = simpleChunk.getBlock(x, y, z);
-          if (!block.isAir()) {
-            surface.set(x + z * 16, y + 1);
-          }
-          if (block.isMotionBlocking()) {
-            motionBlocking.set(x + z * 16, y + 1);
-          }
-        }
-      }
-    }
-    return CompoundBinaryTag.builder().putLongArray("MOTION_BLOCKING", motionBlocking.getData())
-        .putLongArray("WORLD_SURFACE", surface.getData()).build();
-  }
-
-  private int writeChunkData(ByteBuf data, ProtocolVersion version) {
-    networkSections.clear();
-    ChunkSection[] sections = simpleChunk.getSections();
-    List<NetworkSection> nSections = new ArrayList<>(16);
-    boolean skyLight = simpleChunk.getInstance().getDimension().isHasSkylight();
-    int bitMask = 0;
-    int dataLength = data.capacity();
-    //Calculate bitMask, data length and convert chunk sections to network sections
-    for (int s = 0; s < sections.length; s++) {
-      ChunkSection section = sections[s];
-      if (section != null && section.hasAnyData()) {
-        bitMask |= 1 << s;
-        NetworkSection networkSection = NetworkSection.create(version, section, skyLight);
-        dataLength += networkSection.getDataLength();
-        nSections.add(networkSection);
-      }
-    }
-
-    data.ensureWritable(dataLength); //resize buffer
-    //Write chunk sections data to buffer
-    for (int pass = 0; pass < 4; pass++) {
-      int finalPass = pass;
-      nSections.forEach(n -> n.writeData(data, finalPass));
-    }
-    if (version.isBefore(ProtocolVersion.MINECRAFT_1_15)) {
-      writeChunkBiomes(data, version);
-    }
-    return bitMask;
-  }
-
-  private void writeChunkBiomes(ByteBuf data, ProtocolVersion version) {
-    Object biomes = createBiomesArray(version);
-    if (version.isBefore(ProtocolVersion.MINECRAFT_1_15)) {
-      if (version.isBefore(ProtocolVersion.MINECRAFT_1_13)) {
-        data.ensureWritable(256);
-        data.writeBytes((byte[]) biomes);
-      } else {
-        data.ensureWritable(256 * 4);
-        for (byte b : (byte[]) biomes) {
-          data.writeInt(b);
-        }
-      }
-    } else {
-      data.ensureWritable(1024 * 4);
-      for (int i : ((int[]) biomes)) {
-        data.writeInt(i);
-      }
-    }
-  }
-
-  private Object createBiomesArray(ProtocolVersion version) {
-    ChunkSection[] sections = simpleChunk.getSections();
-    Object biomes = null;
-    if (version.isBefore(ProtocolVersion.MINECRAFT_1_15)) {
-      biomes = new byte[256];
-      Arrays.fill((byte[]) biomes, (byte) 1);
-    } else {
-      biomes = new int[1024];
-      Arrays.fill((int[]) biomes, 1);
-    }
-    for (int s = 0; s < sections.length; s++) {
-      ChunkSection section = sections[s];
-      if (section != null) {
-        int biome = section.getBiome().id;
-        if (version.isBefore(ProtocolVersion.MINECRAFT_1_15)) {
-          Arrays.fill((byte[]) biomes, s * 16, (s * 16) + 16, (byte) biome);
-        } else {
-          Arrays.fill((int[]) biomes, s * 16 * 4, (s * 16 * 4) + 64, biome);
-        }
-      }
-    }
-    return biomes;
-  }
-
-  private int getInitialDataSize(ProtocolVersion version) {
-    if (version.isBefore(ProtocolVersion.MINECRAFT_1_13)) {
-      return 256;
-    }
-    if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_14_4)) {
-      return 256 * 4;
-    }
-    return 0;
-  }
-
-  private void write17(ByteBuf out, ByteBuf data) {
-    out.writeShort(0); //Extended bitmask
-
-    byte[] uncompressed = new byte[data.readableBytes()];
-    data.readBytes(uncompressed);
-    ByteBuf compressed = Unpooled.buffer();
-    Deflater deflater = new Deflater(9);
-    deflater.setInput(uncompressed);
-    deflater.finish();
-    byte[] buffer = new byte[1024];
-    while (!deflater.finished()) {
-      int count = deflater.deflate(buffer);
-      compressed.writeBytes(buffer, 0, count);
-    }
-    deflater.end();
-    out.writeInt(compressed.readableBytes()); // compressed size
-    out.writeBytes(compressed);
-    compressed.release();
-  }
-}
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/world/ChunkData.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/world/ChunkData.java
index e0a382e0..86d543e0 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/world/ChunkData.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/world/ChunkData.java
@@ -19,28 +19,215 @@
 
 package ru.elytrium.elytraproxy.botfilter.protocol.packet.world;
 
+import com.google.common.base.Preconditions;
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
 import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
 import com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
 import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import io.netty.util.ReferenceCountUtil;
+import java.util.ArrayList;
+import java.util.BitSet;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.zip.Deflater;
+import lombok.Getter;
+import net.kyori.adventure.nbt.CompoundBinaryTag;
+import ru.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
+import ru.elytrium.elytraproxy.botfilter.protocol.util.CompactStorage;
+import ru.elytrium.elytraproxy.botfilter.protocol.util.NetworkSection;
+import ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BitStorage116;
+import ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BitStorage19;
+import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
+import ru.elytrium.elytraproxy.botfilter.server.world.chunk.ChunkSnapshot;
+import ru.elytrium.elytraproxy.botfilter.server.world.chunk.LightSection;
+import ru.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
 
 public class ChunkData implements MinecraftPacket {
 
-  private int x;
-  private int z;
+  private final ChunkSnapshot chunk;
+  private final List<NetworkSection> sections = new ArrayList<>(16);
+  private final int mask;
+  private final BiomeData biomeData;
+  private CompoundBinaryTag heightmap114;
+  private CompoundBinaryTag heightmap116;
 
-  public ChunkData(int x, int z) {
-    this.x = x;
-    this.z = z;
+  public ChunkData(ChunkSnapshot chunkSnapshot, boolean skyLight) {
+    this.chunk = chunkSnapshot;
+    int mask = 0;
+    for (int i = 0; i < chunkSnapshot.getSections().length; i++) {
+      if (chunkSnapshot.getSections()[i] != null) {
+        mask |= 1 << i;
+        LightSection light = chunkSnapshot.getLight()[i];
+        NetworkSection section = new NetworkSection(chunkSnapshot.getSections()[i],
+            light.getBlockLight(), skyLight ? light.getSkyLight() : null);
+        sections.add(section);
+      }
+    }
+    this.mask = mask;
+    this.heightmap114 = createHeightMap(true);
+    this.heightmap116 = createHeightMap(false);
+    this.biomeData = new BiomeData(chunkSnapshot);
   }
 
   public ChunkData() {
+    throw new IllegalStateException();
   }
 
   @Override
-  public void encode(ByteBuf buf, Direction direction, ProtocolVersion protocolVersion) {
-    throw new UnsupportedOperationException("should be override");
+  public void encode(ByteBuf buf, Direction direction, ProtocolVersion version) {
+    if (!chunk.isFullChunk()) {
+      //1.17 supports only full chunks
+      Preconditions.checkState(version.isBefore(ProtocolVersion.MINECRAFT_1_17));
+    }
+    buf.writeInt(chunk.getX());
+    buf.writeInt(chunk.getZ());
+    if (version.isBefore(ProtocolVersion.MINECRAFT_1_17)) {
+      buf.writeBoolean(chunk.isFullChunk());
+
+      if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16) &&
+          version.isBefore(ProtocolVersion.MINECRAFT_1_16_2)) {
+        buf.writeBoolean(true); //ignore old data
+      }
+
+      //mask
+      if (version.isAfter(ProtocolVersion.MINECRAFT_1_8)) {
+        ProtocolUtils.writeVarInt(buf, mask);
+      } else {
+        buf.writeShort(mask);
+      }
+    } else {
+      //1.17 mask
+      long[] mask = create117Mask();
+      ProtocolUtils.writeVarInt(buf, mask.length);
+      for (long m : mask) {
+        buf.writeLong(m);
+      }
+    }
+
+    //1.14+ HeightMap
+    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_14)) {
+      if (version.isBefore(ProtocolVersion.MINECRAFT_1_16)) {
+        ProtocolUtils.writeCompoundTag(buf, heightmap114);
+      } else {
+        ProtocolUtils.writeCompoundTag(buf, heightmap116);
+      }
+    }
+
+    //1.15+ Biomes
+    if (chunk.isFullChunk() && version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_15)) {
+      if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16_2)) {
+        ProtocolUtils.writeVarInt(buf, biomeData.getPost115Biomes().length);
+        for (int b : biomeData.getPost115Biomes()) {
+          ProtocolUtils.writeVarInt(buf, b);
+        }
+      } else {
+        for (int b : biomeData.getPost115Biomes()) {
+          buf.writeInt(b);
+        }
+      }
+    }
+    ByteBuf data = createChunkData(version);
+    try {
+      if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_8)) {
+        buf.ensureWritable(
+            data.readableBytes() + ProtocolUtils.varIntBytes(data.readableBytes()) + 1);
+        ProtocolUtils.writeVarInt(buf, data.readableBytes());
+        buf.writeBytes(data);
+        if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_9_4)) {
+          ProtocolUtils.writeVarInt(buf, 0); //Tile entities currently doesnt supported
+        }
+      } else {
+        write17(buf, data);
+      }
+    } finally {
+      ReferenceCountUtil.release(data);
+    }
+  }
+
+  private ByteBuf createChunkData(ProtocolVersion version) {
+    int dataLength = 0;
+    for (NetworkSection networkSection : sections) {
+      dataLength += networkSection.getDataLength(version);
+    }
+    if (chunk.isFullChunk() && version.isBefore(ProtocolVersion.MINECRAFT_1_15)) {
+      dataLength += (version.isBefore(ProtocolVersion.MINECRAFT_1_13) ? 256 : 256 * 4);
+    }
+
+    ByteBuf data = Unpooled.buffer(dataLength);
+    for (int pass = 0; pass < 4; pass++) {
+      int finalPass = pass;
+      sections.forEach(ns -> ns.writeData(data, finalPass, version));
+    }
+    if (chunk.isFullChunk() && version.isBefore(ProtocolVersion.MINECRAFT_1_15)) {
+      for (byte b : biomeData.getPre115Biomes()) {
+        if (version.isBefore(ProtocolVersion.MINECRAFT_1_13)) {
+          data.writeByte(b);
+        } else {
+          data.writeInt(b);
+        }
+      }
+    }
+
+    if (dataLength != data.readableBytes()) {
+      System.out.println(
+          "Data length missmatch: " + dataLength + " != " + data.readableBytes() + ". Version: "
+              + version);
+    }
+    return data;
+  }
+
+  private CompoundBinaryTag createHeightMap(boolean pre116) {
+    CompactStorage surface = pre116 ? new BitStorage19(9, 256) : new BitStorage116(9, 256);
+    CompactStorage motionBlocking = pre116 ? new BitStorage19(9, 256) : new BitStorage116(9, 256);
+
+    for (int y = 0; y < 256; y++) {
+      for (int x = 0; x < 16; x++) {
+        for (int z = 0; z < 16; z++) {
+          SimpleBlock block = chunk.getBlock(x, y, z);
+          if (!block.isAir()) {
+            surface.set(x + z * 16, y + 1);
+          }
+          if (block.isMotionBlocking()) {
+            motionBlocking.set(x + z * 16, y + 1);
+          }
+        }
+      }
+    }
+    return CompoundBinaryTag.builder().putLongArray("MOTION_BLOCKING", motionBlocking.getData())
+        .putLongArray("WORLD_SURFACE", surface.getData()).build();
+  }
+
+  private long[] create117Mask() {
+    BitSet bitSet = BitSet.valueOf(new long[]{mask});
+    return bitSet.toLongArray();
+  }
+
+  private void write17(ByteBuf out, ByteBuf data) {
+    out.writeShort(0); //Extended bitmask
+    byte[] uncompressed = new byte[data.readableBytes()];
+    data.readBytes(uncompressed);
+    ByteBuf compressed = Unpooled.buffer();
+    Deflater deflater = new Deflater(9);
+    try {
+      deflater.setInput(uncompressed);
+      deflater.finish();
+      byte[] buffer = new byte[1024];
+      while (!deflater.finished()) {
+        int count = deflater.deflate(buffer);
+        compressed.writeBytes(buffer, 0, count);
+      }
+      out.writeInt(compressed.readableBytes()); // compressed size
+      out.writeBytes(compressed);
+    } finally {
+      deflater.end();
+      compressed.release();
+    }
+
   }
 
   @Override
@@ -53,11 +240,38 @@ public class ChunkData implements MinecraftPacket {
     throw new UnsupportedOperationException("cant be called");
   }
 
-  public int getX() {
-    return x;
-  }
+  @Getter
+  private static class BiomeData {
+
+    private byte[] pre115Biomes = new byte[256];
+    private int[] post115Biomes = new int[1024];
+
+    public BiomeData(ChunkSnapshot chunk) {
+      Biome[] biomes = chunk.getBiomes();
+      for (int i = 0; i < biomes.length; i++) {
+        post115Biomes[i] = biomes[i].id;
+      }
 
-  public int getZ() {
-    return z;
+      //Down sample 4x4x4 3d biomes to 2d XZ
+      Map<Integer, Integer> samples = new HashMap<>(256 / 4);
+      for (int x = 0; x < 16; x += 4) {
+        for (int z = 0; z < 16; z += 4) {
+          samples.clear();
+          for (int y = 0; y < 256; y += 16) {
+            Biome biome = biomes[SimpleChunk.getBiomeIndex(x, y, z)];
+            int curr = samples.getOrDefault(biome.id, 0);
+            samples.put(biome.id, curr + 1);
+          }
+          int id = samples.entrySet().stream()
+              .max(Entry.comparingByValue())
+              .orElseThrow(RuntimeException::new).getKey();
+          for (int xl = x; xl < x + 4; xl++) {
+            for (int zl = z; zl < z + 4; zl++) {
+              this.pre115Biomes[zl * 16 + xl] = (byte) id;
+            }
+          }
+        }
+      }
+    }
   }
 }
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/world/EmptyChunk113.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/world/EmptyChunk113.java
deleted file mode 100644
index b91040e1..00000000
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/world/EmptyChunk113.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package ru.elytrium.elytraproxy.botfilter.protocol.packet.world;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.ByteBufOutputStream;
-
-import java.io.IOException;
-
-/**
- * 1.13 - 1.16.4
- */
-public class EmptyChunk113 extends ChunkData {
-
-  public EmptyChunk113(int x, int z) {
-    super(x, z);
-  }
-
-  @Override
-  public void encode(ByteBuf buf, Direction direction, ProtocolVersion version) {
-    buf.writeInt(getX());
-    buf.writeInt(getZ());
-    buf.writeBoolean(true);
-
-    if (version == ProtocolVersion.MINECRAFT_1_16 || version == ProtocolVersion.MINECRAFT_1_16_1) {
-      buf.writeBoolean(true);
-    }
-
-    ProtocolUtils.writeVarInt(buf, 0);
-
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_14)) {
-      writeHeighmaps(buf);
-    }
-    //Biomes
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_15)) {
-      if (version.isBefore(ProtocolVersion.MINECRAFT_1_16_2)) {
-        for (int i = 0; i < 1024; i++) {
-          buf.writeInt(0);
-        }
-      } else {
-        ProtocolUtils.writeVarInt(buf, 1024);
-        for (int i = 0; i < 1024; i++) {
-          ProtocolUtils.writeVarInt(buf, 1);
-        }
-      }
-    }
-
-    if (version == ProtocolVersion.MINECRAFT_1_13) {
-      ProtocolUtils.writeByteArray(buf, new byte[512]);
-    } else {
-      ProtocolUtils.writeByteArray(buf, new byte[1024]);
-    }
-
-    ProtocolUtils.writeVarInt(buf, 0);
-  }
-
-  //todo use Compound
-  private void writeHeighmaps(ByteBuf buf) {
-    try (ByteBufOutputStream output = new ByteBufOutputStream(buf)) {
-      output.writeByte(10); //CompoundTag
-      output.writeUTF(""); // CompoundName
-      output.writeByte(10); //CompoundTag
-      output.writeUTF("root"); //root compound
-      output.writeByte(12); //long array
-      output.writeUTF("MOTION_BLOCKING");
-      long[] longArrayTag = new long[36];
-      output.writeInt(longArrayTag.length);
-      for (int i = 0, length = longArrayTag.length; i < length; i++) {
-        output.writeLong(longArrayTag[i]);
-      }
-      buf.writeByte(0); //end of compound
-      buf.writeByte(0); //end of compound
-    } catch (IOException ex) {
-      throw new RuntimeException(ex);
-    }
-  }
-}
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/world/UpdateLight.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/world/UpdateLight.java
index 37e5b9e4..707e1af7 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/world/UpdateLight.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/packet/world/UpdateLight.java
@@ -24,13 +24,14 @@ import com.velocitypowered.proxy.protocol.MinecraftPacket;
 import com.velocitypowered.proxy.protocol.ProtocolUtils;
 import com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
 import io.netty.buffer.ByteBuf;
+import java.util.BitSet;
 import ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
-import ru.elytrium.elytraproxy.botfilter.server.world.SimpleChunk;
-import ru.elytrium.elytraproxy.botfilter.server.world.SimpleChunk.ChunkSection;
+import ru.elytrium.elytraproxy.botfilter.server.world.chunk.ChunkSnapshot;
+import ru.elytrium.elytraproxy.botfilter.server.world.chunk.LightSection;
 
 public class UpdateLight implements MinecraftPacket {
 
-  private final SimpleChunk chunk;
+  private final ChunkSnapshot chunk;
   private final NibbleArray3d[] skyLight = new NibbleArray3d[18];
   private final NibbleArray3d[] blockLight = new NibbleArray3d[18];
   private int skyLightMask = 0;
@@ -38,12 +39,15 @@ public class UpdateLight implements MinecraftPacket {
   private int emptySkyLightMask = 0;
   private int emptyBlockLightMask = 0;
 
+  private int skyLightArrayCount;
+  private int blockLightArrayCount;
+
   public UpdateLight() {
     chunk = null;
   }
 
-  public UpdateLight(SimpleChunk simpleChunk) {
-    this.chunk = simpleChunk;
+  public UpdateLight(ChunkSnapshot chunkSnapshot) {
+    this.chunk = chunkSnapshot;
     prepareLighting();
   }
 
@@ -52,16 +56,33 @@ public class UpdateLight implements MinecraftPacket {
     ProtocolUtils.writeVarInt(buf, chunk.getX());
     ProtocolUtils.writeVarInt(buf, chunk.getZ());
 
-    ProtocolUtils.writeVarInt(buf, skyLightMask);
-    ProtocolUtils.writeVarInt(buf, blockLightMask);
-    ProtocolUtils.writeVarInt(buf, emptySkyLightMask);
-    ProtocolUtils.writeVarInt(buf, emptyBlockLightMask);
+    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16)) {
+      buf.writeBoolean(true); //trust edges
+    }
+
+    if (version.isBefore(ProtocolVersion.MINECRAFT_1_17)) {
+      ProtocolUtils.writeVarInt(buf, skyLightMask);
+      ProtocolUtils.writeVarInt(buf, blockLightMask);
+      ProtocolUtils.writeVarInt(buf, emptySkyLightMask);
+      ProtocolUtils.writeVarInt(buf, emptyBlockLightMask);
+    } else {
+      write117Mask(buf, skyLightMask);
+      write117Mask(buf, blockLightMask);
+      write117Mask(buf, emptySkyLightMask);
+      write117Mask(buf, emptyBlockLightMask);
+    }
 
+    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17)) {
+      ProtocolUtils.writeVarInt(buf, skyLightArrayCount);
+    }
     for (NibbleArray3d array3d : skyLight) {
       if (array3d != null) {
         ProtocolUtils.writeByteArray(buf, array3d.getData());
       }
     }
+    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17)) {
+      ProtocolUtils.writeVarInt(buf, blockLightArrayCount);
+    }
     for (NibbleArray3d nibbleArray3d : blockLight) {
       if (nibbleArray3d != null) {
         ProtocolUtils.writeByteArray(buf, nibbleArray3d.getData());
@@ -70,35 +91,35 @@ public class UpdateLight implements MinecraftPacket {
   }
 
   private void prepareLighting() {
-    ChunkSection[] chunkSections = chunk.getSections();
-    ChunkSection[] allSections = new ChunkSection[18];
-    System.arraycopy(chunkSections, 0, allSections, 1, chunkSections.length);
-    allSections[0] = chunk.getExtraLightSections()[0];
-    allSections[17] = chunk.getExtraLightSections()[1];
-
-    for (int i = 0; i < allSections.length; i++) {
-      ChunkSection section = allSections[i];
-      if (section == null || !section.hasAnyData()) {
+
+    LightSection[] lightSections = chunk.getLight();
+
+    for (int i = 0; i < lightSections.length; i++) {
+      LightSection section = lightSections[i];
+      if (section.getSkyLight() == LightSection.NO_LIGHT) {
         emptySkyLightMask |= 1 << i;
-        emptyBlockLightMask |= 1 << i;
+      } else if (section.getSkyLight() != LightSection.ALL_LIGHT) {
+        skyLightMask |= 1 << i;
+        skyLight[i] = section.getSkyLight();
+        skyLightArrayCount++;
+      }
+
+      if (section.getBlockLight() != LightSection.NO_LIGHT) {
+        blockLightMask |= 1 << i;
+        blockLight[i] = section.getBlockLight();
+        blockLightArrayCount++;
       } else {
-        NibbleArray3d sectionSkyLight = section.getSkyLight();
-        if (sectionSkyLight != null) {
-          skyLightMask |= 1 << i;
-          skyLight[i] = sectionSkyLight;
-        } else {
-          emptySkyLightMask |= 1 << i;
-        }
-
-        NibbleArray3d sectionBlockSky = section.getBlockLight();
-        if (sectionBlockSky != null) {
-          blockLightMask |= 1 << i;
-          blockLight[i] = sectionBlockSky;
-        } else {
-          emptyBlockLightMask |= 1 << i;
-        }
+        emptyBlockLightMask |= 1 << i;
       }
     }
+  }
 
+  private static void write117Mask(ByteBuf buf, int mask) {
+    BitSet bitSet = BitSet.valueOf(new long[]{mask});
+    long[] mk = bitSet.toLongArray();
+    ProtocolUtils.writeVarInt(buf, mk.length);
+    for (long m : mk) {
+      buf.writeLong(m);
+    }
   }
 }
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/CompactStorage.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/CompactStorage.java
new file mode 100644
index 00000000..e884c127
--- /dev/null
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/CompactStorage.java
@@ -0,0 +1,40 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package ru.elytrium.elytraproxy.botfilter.protocol.util;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import io.netty.buffer.ByteBuf;
+
+public interface CompactStorage {
+
+  void set(int index, int value);
+
+  int get(int index);
+
+  void write(ByteBuf buf, ProtocolVersion version);
+
+  int getBitsPerEntry();
+
+  int getDataLength();
+
+  long[] getData();
+
+  CompactStorage copy();
+}
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/NetworkSection.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/NetworkSection.java
index c3a3222c..2fb72a3f 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/NetworkSection.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/NetworkSection.java
@@ -19,274 +19,135 @@
 
 package ru.elytrium.elytraproxy.botfilter.protocol.util;
 
-import static ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_7;
-import static ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_8;
-
 import com.velocitypowered.api.network.ProtocolVersion;
 import io.netty.buffer.ByteBuf;
-import lombok.Getter;
-import ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BlockStorage;
-import ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.ByteArray3d;
+import java.util.EnumMap;
+import java.util.Map;
+import lombok.NonNull;
+import ru.elytrium.elytraproxy.botfilter.protocol.data.storage.BlockStorage;
 import ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
-import ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.ShortArray3d;
 import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
 import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
-import ru.elytrium.elytraproxy.botfilter.server.world.SimpleChunk.ChunkSection;
+import ru.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleSection;
 
-public abstract class NetworkSection {
+public class NetworkSection {
 
-  @Getter private final ChunkSection section;
-  @Getter private final boolean skyLight;
+  private final Map<ProtocolVersion, BlockStorage> storages = new EnumMap<>(ProtocolVersion.class);
+  private final NibbleArray3d blockLight;
+  private final NibbleArray3d skyLight;
+  private final SimpleSection section;
+  private int blockCount = -1;
 
-  public NetworkSection(ChunkSection section, boolean skyLight) {
+  public NetworkSection(SimpleSection section, @NonNull NibbleArray3d blockLight,
+      NibbleArray3d skyLight) {
     this.section = section;
+    this.blockLight = blockLight;
     this.skyLight = skyLight;
   }
 
-  public abstract int getDataLength();
-
-  public abstract void writeData(ByteBuf data, int pass);
-
-  abstract void setBlockLight(int x, int y, int z, byte blockLight);
-
-  abstract void setSkyLight(int x, int y, int z, byte skyLight);
-
-  abstract void setBlock(int x, int y, int z, SimpleBlock block);
-
-  protected void create() {
-
-    for (int y = 0; y < 16; y++) {
-      for (int x = 0; x < 16; x++) {
-        for (int z = 0; z < 16; z++) {
-          setBlockLight(x, y, z, getSection().getBlockLightAt(x, y, z));
-          setSkyLight(x, y, z, getSection().getSkyLightAt(x, y, z));
-          SimpleBlock simpleBlock = section.getBlockAt(x, y, z);
-          if (simpleBlock == SimpleBlock.AIR) {
-            continue;
-          }
-          setBlock(x, y, z, simpleBlock);
+  public BlockStorage ensureCreated(ProtocolVersion version) {
+    BlockStorage storage = storages.get(version);
+    if (storage == null) {
+      synchronized (storages) {
+        Version bVersion = Version.map(version);
+        BlockStorage blockStorage = BlockStorage.create(bVersion);
+        fillBlocks(blockStorage);
+        for (ProtocolVersion pVersion : bVersion.getVersions()) {
+          storages.put(pVersion, blockStorage);
         }
+        storage = blockStorage;
       }
     }
+    return storage;
   }
 
-  public static NetworkSection create(ProtocolVersion version, ChunkSection section, boolean sky) {
-
-    if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_7_6)) {
-      return new NetworkSection1_7(section, sky);
-    } else if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_8)) {
-      return new NetworkSection1_8(section, sky);
-    } else if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_13_2)) {
-      return new NetworkSection1_9(section, sky, Version.map(version));
-    } else {
-      return new NetworkSection1_14(section, sky, Version.map(version));
-    }
-    // return null;
-  }
-
-  public static class NetworkSection1_7 extends NetworkSection {
-
-    private final ByteArray3d blocks = new ByteArray3d(16 * 16 * 16);
-    private final NibbleArray3d metadata = new NibbleArray3d(16 * 16 * 16);
-    private final NibbleArray3d blockLight = new NibbleArray3d(16 * 16 * 16);
-    private final NibbleArray3d skyLight;
-
-    public NetworkSection1_7(ChunkSection section, boolean skyLight) {
-      super(section, skyLight);
-      this.skyLight = skyLight ? new NibbleArray3d(16 * 16 * 16) : null;
-      create();
-    }
-
-    @Override
-    void setBlockLight(int x, int y, int z, byte blockLight) {
-      this.blockLight.set(x, y, z, blockLight);
-    }
-
-    @Override
-    void setSkyLight(int x, int y, int z, byte skyLight) {
-      this.skyLight.set(x, y, z, skyLight);
-    }
-
-    @Override
-    void setBlock(int x, int y, int z, SimpleBlock block) {
-      blocks.set(x, y, z, block.getId(MINECRAFT_1_7));
-      metadata.set(x, y, z, block.getData(MINECRAFT_1_7));
-    }
+  public int getDataLength(ProtocolVersion version) {
+    BlockStorage blockStorage = ensureCreated(version);
 
-    @Override
-    public void writeData(ByteBuf data, int pass) {
-      if (pass == 0) {
-        data.writeBytes(blocks.getData());
-      }
-      if (pass == 1) {
-        data.writeBytes(metadata.getData());
-      }
-      if (pass == 2) {
-        data.writeBytes(blockLight.getData());
-      }
-      if (pass == 3 && isSkyLight()) {
-        data.writeBytes(skyLight.getData());
-      }
-    }
+    int dataLength = blockStorage.getDataLength(version);
 
-    @Override
-    public int getDataLength() {
-      int dataLength = 0;
-      dataLength += blocks.getData().length;
-      dataLength += metadata.getData().length;
+    if (version.isBefore(ProtocolVersion.MINECRAFT_1_14)) {
       dataLength += blockLight.getData().length;
-      if (isSkyLight()) {
+      if (skyLight != null) {
         dataLength += skyLight.getData().length;
       }
-      return dataLength;
-    }
-  }
-
-  public static class NetworkSection1_8 extends NetworkSection {
-
-    private final ShortArray3d blocks = new ShortArray3d(16 * 16 * 16);
-    private final NibbleArray3d blockLight = new NibbleArray3d(16 * 16 * 16);
-    private final NibbleArray3d skyLight;
-
-    public NetworkSection1_8(ChunkSection section, boolean skyLight) {
-      super(section, skyLight);
-      this.skyLight = skyLight ? new NibbleArray3d(16 * 16 * 16) : null;
-      create();
-    }
-
-    @Override
-    void setBlockLight(int x, int y, int z, byte blockLight) {
-      this.blockLight.set(x, y, z, blockLight);
-    }
-
-    @Override
-    void setSkyLight(int x, int y, int z, byte skyLight) {
-      this.skyLight.set(x, y, z, skyLight);
-    }
-
-    @Override
-    void setBlock(int x, int y, int z, SimpleBlock block) {
-      blocks.setBlockAndData(x, y, z, block.getId(MINECRAFT_1_8), block.getData(MINECRAFT_1_8));
     }
-
-    @Override
-    public void writeData(ByteBuf data, int pass) {
-      if (pass == 0) {
-        for (Short s : blocks.getData()) {
-          data.writeShortLE(s);
-        }
-      }
-      if (pass == 1) {
-        data.writeBytes(blockLight.getData());
-      }
-      if (pass == 2 && isSkyLight()) {
-        data.writeBytes(skyLight.getData());
-      }
+    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_14)) {
+      dataLength += 2; //Block count short
     }
 
-    @Override
-    public int getDataLength() {
-      int dataLength = 0;
-      dataLength += blocks.getData().length * 2;
-      dataLength += blockLight.getData().length;
-      if (isSkyLight()) {
-        dataLength += skyLight.getData().length;
-      }
-      return dataLength;
-    }
+    return dataLength;
   }
 
-  public static class NetworkSection1_9 extends NetworkSection {
-
-    private final BlockStorage blocks;
-    private final NibbleArray3d blockLight = new NibbleArray3d(16 * 16 * 16);
-    private final NibbleArray3d skyLight;
-
-    public NetworkSection1_9(ChunkSection section, boolean skyLight, Version version) {
-      super(section, skyLight);
-      this.blocks = new BlockStorage(version);
-      this.skyLight = skyLight ? new NibbleArray3d(16 * 16 * 16) : null;
-      create();
-    }
-
-    @Override
-    void setBlockLight(int x, int y, int z, byte blockLight) {
-      this.blockLight.set(x, y, z, blockLight);
-    }
-
-    @Override
-    void setSkyLight(int x, int y, int z, byte skyLight) {
-      this.skyLight.set(x, y, z, skyLight);
-    }
-
-    @Override
-    void setBlock(int x, int y, int z, SimpleBlock block) {
-      blocks.set(x, y, z, block);
-    }
-
-    @Override
-    public void writeData(ByteBuf data, int pass) {
-      if (pass == 0) {
-        blocks.write(data);
-        data.writeBytes(blockLight.getData());
-        if (isSkyLight()) {
-          data.writeBytes(skyLight.getData());
-        }
+  public void writeData(ByteBuf data, int pass, ProtocolVersion version) {
+    if (version.isBefore(ProtocolVersion.MINECRAFT_1_9)) {
+      BlockStorage storage = ensureCreated(version);
+      if (version.isBefore(ProtocolVersion.MINECRAFT_1_8)) {
+        write17Data(data, pass, storage);
+      } else {
+        write18Data(data, pass, storage);
       }
-    }
-
-    @Override
-    public int getDataLength() {
-      int dataLength = 0;
-      dataLength += blocks.calculateMaxSize();
-      dataLength += blockLight.getData().length;
-      if (isSkyLight()) {
-        dataLength += skyLight.getData().length;
+    } else if (pass == 0) {
+      BlockStorage storage = ensureCreated(version);
+      if (version.isBefore(ProtocolVersion.MINECRAFT_1_14)) {
+        write19Data(data, storage, version);
+      } else {
+        write114Data(data, storage, version);
       }
-      return dataLength;
     }
   }
 
-  public static class NetworkSection1_14 extends NetworkSection {
-
-    private final BlockStorage blocks;
-    private int nonAirBlocks = 0;
-
-    public NetworkSection1_14(ChunkSection section, boolean skyLight, Version version) {
-      super(section, skyLight);
-      this.blocks = new BlockStorage(version);
-      create();
+  private void write17Data(ByteBuf data, int pass, BlockStorage storage) {
+    if (pass == 0) {
+      storage.write(data, ProtocolVersion.MINECRAFT_1_7_2);
+    } else if (pass == 1) {
+      storage.write(data, ProtocolVersion.MINECRAFT_1_7_2);
+    } else if (pass == 2) {
+      data.writeBytes(blockLight.getData());
+    } else if (pass == 3 && skyLight != null) {
+      data.writeBytes(skyLight.getData());
     }
+  }
 
-    @Override
-    void setBlockLight(int x, int y, int z, byte blockLight) {
+  private void write18Data(ByteBuf data, int pass, BlockStorage storage) {
+    if (pass == 0) {
+      storage.write(data, ProtocolVersion.MINECRAFT_1_8);
+    } else if (pass == 1) {
+      data.writeBytes(blockLight.getData());
+    } else if (pass == 2 && skyLight != null) {
+      data.writeBytes(skyLight.getData());
     }
+  }
 
-    @Override
-    void setSkyLight(int x, int y, int z, byte skyLight) {
+  private void write19Data(ByteBuf data, BlockStorage storage, ProtocolVersion version) {
+    storage.write(data, version);
+    data.writeBytes(blockLight.getData());
+    if (skyLight != null) {
+      data.writeBytes(skyLight.getData());
     }
+  }
 
-    @Override
-    void setBlock(int x, int y, int z, SimpleBlock block) {
-      blocks.set(x, y, z, block);
-      if (!block.isAir()) {
-        nonAirBlocks++;
-      }
-    }
+  private void write114Data(ByteBuf data, BlockStorage storage, ProtocolVersion version) {
+    data.writeShort(blockCount);
+    storage.write(data, version);
+  }
 
-    @Override
-    public void writeData(ByteBuf data, int pass) {
-      if (pass == 0) {
-        data.writeShort(nonAirBlocks);
-        blocks.write(data);
+  private void fillBlocks(BlockStorage storage) {
+    int blockCount = 0;
+    for (int y = 0; y < 16; y++) {
+      for (int x = 0; x < 16; x++) {
+        for (int z = 0; z < 16; z++) {
+          SimpleBlock block = section.getBlockAt(x, y, z);
+          if (block.isAir()) {
+            continue;
+          }
+          blockCount++;
+          storage.set(x, y, z, block);
+        }
       }
     }
-
-    @Override
-    public int getDataLength() {
-      int dataLength = 0;
-      dataLength += blocks.calculateMaxSize();
-      return dataLength;
+    if (this.blockCount == -1) {
+      this.blockCount = blockCount;
     }
   }
 }
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage116.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage116.java
new file mode 100644
index 00000000..fbb5a2fa
--- /dev/null
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage116.java
@@ -0,0 +1,163 @@
+/*
+ * This file is part of MCProtocolLib, licensed under the MIT License (MIT).
+ *
+ * Copyright (C) 2013-2021 Steveice10
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
+ * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
+ * OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+import io.netty.buffer.ByteBuf;
+import java.util.Arrays;
+import lombok.Getter;
+import ru.elytrium.elytraproxy.botfilter.protocol.util.CompactStorage;
+
+public class BitStorage116 implements CompactStorage {
+
+  private static final int[] MAGIC_VALUES = {
+      -1, -1, 0, Integer.MIN_VALUE, 0, 0, 1431655765, 1431655765, 0, Integer.MIN_VALUE,
+      0, 1, 858993459, 858993459, 0, 715827882, 715827882, 0, 613566756, 613566756,
+      0, Integer.MIN_VALUE, 0, 2, 477218588, 477218588, 0, 429496729, 429496729, 0,
+      390451572, 390451572, 0, 357913941, 357913941, 0, 330382099, 330382099, 0, 306783378,
+      306783378, 0, 286331153, 286331153, 0, Integer.MIN_VALUE, 0, 3, 252645135, 252645135,
+      0, 238609294, 238609294, 0, 226050910, 226050910, 0, 214748364, 214748364, 0,
+      204522252, 204522252, 0, 195225786, 195225786, 0, 186737708, 186737708, 0, 178956970,
+      178956970, 0, 171798691, 171798691, 0, 165191049, 165191049, 0, 159072862, 159072862,
+      0, 153391689, 153391689, 0, 148102320, 148102320, 0, 143165576, 143165576, 0,
+      138547332, 138547332, 0, Integer.MIN_VALUE, 0, 4, 130150524, 130150524, 0, 126322567,
+      126322567, 0, 122713351, 122713351, 0, 119304647, 119304647, 0, 116080197, 116080197,
+      0, 113025455, 113025455, 0, 110127366, 110127366, 0, 107374182, 107374182, 0,
+      104755299, 104755299, 0, 102261126, 102261126, 0, 99882960, 99882960, 0, 97612893,
+      97612893, 0, 95443717, 95443717, 0, 93368854, 93368854, 0, 91382282, 91382282,
+      0, 89478485, 89478485, 0, 87652393, 87652393, 0, 85899345, 85899345, 0,
+      84215045, 84215045, 0, 82595524, 82595524, 0, 81037118, 81037118, 0, 79536431,
+      79536431, 0, 78090314, 78090314, 0, 76695844, 76695844, 0, 75350303, 75350303,
+      0, 74051160, 74051160, 0, 72796055, 72796055, 0, 71582788, 71582788, 0,
+      70409299, 70409299, 0, 69273666, 69273666, 0, 68174084, 68174084, 0, Integer.MIN_VALUE,
+      0, 5
+  };
+
+  private final long[] data;
+  @Getter
+  private final int bitsPerEntry;
+  @Getter
+  private final int size;
+
+  private final long maxValue;
+  private final int valuesPerLong;
+  private final long divideMultiply;
+  private final long divideAdd;
+  private final int divideShift;
+
+  public BitStorage116(int bitsPerEntry, int size) {
+    this(bitsPerEntry, size, null);
+  }
+
+  public BitStorage116(int bitsPerEntry, int size, long[] data) {
+    if (bitsPerEntry < 1 || bitsPerEntry > 32) {
+      throw new IllegalArgumentException("bitsPerEntry must be between 1 and 32, inclusive.");
+    }
+
+    this.bitsPerEntry = bitsPerEntry;
+    this.size = size;
+
+    this.maxValue = (1L << bitsPerEntry) - 1L;
+    this.valuesPerLong = (char) (64 / bitsPerEntry);
+    int expectedLength = (size + this.valuesPerLong - 1) / this.valuesPerLong;
+    if (data != null) {
+      if (data.length != expectedLength) {
+        throw new IllegalArgumentException(
+            "Expected " + expectedLength + " longs but got " + data.length + " longs");
+      }
+
+      this.data = Arrays.copyOf(data, data.length);
+    } else {
+      this.data = new long[expectedLength];
+    }
+
+    int magicIndex = 3 * (this.valuesPerLong - 1);
+    this.divideMultiply = Integer.toUnsignedLong(MAGIC_VALUES[magicIndex]);
+    this.divideAdd = Integer.toUnsignedLong(MAGIC_VALUES[magicIndex + 1]);
+    this.divideShift = MAGIC_VALUES[magicIndex + 2];
+  }
+
+  @Override
+  public int get(int index) {
+    if (index < 0 || index > this.size - 1) {
+      throw new IndexOutOfBoundsException();
+    }
+
+    int cellIndex = cellIndex(index);
+    int bitIndex = bitIndex(index, cellIndex);
+    return (int) (this.data[cellIndex] >> bitIndex & this.maxValue);
+  }
+
+
+  @Override
+  public void set(int index, int value) {
+    if (index < 0 || index > this.size - 1) {
+      throw new IndexOutOfBoundsException();
+    }
+
+    if (value < 0 || value > this.maxValue) {
+      throw new IllegalArgumentException("Value cannot be outside of accepted range.");
+    }
+
+    int cellIndex = cellIndex(index);
+    int bitIndex = bitIndex(index, cellIndex);
+    this.data[cellIndex] = this.data[cellIndex] & ~(this.maxValue << bitIndex)
+        | ((long) value & this.maxValue) << bitIndex;
+  }
+
+  private int cellIndex(int index) {
+    return (int) (index * this.divideMultiply + this.divideAdd >> 32 >> this.divideShift);
+  }
+
+  private int bitIndex(int index, int cellIndex) {
+    return (index - cellIndex * this.valuesPerLong) * this.bitsPerEntry;
+  }
+
+  @Override
+  public void write(ByteBuf buf, ProtocolVersion version) {
+    ProtocolUtils.writeVarInt(buf, data.length);
+    for (long l : data) {
+      buf.writeLong(l);
+    }
+  }
+
+  @Override
+  public int getDataLength() {
+    return ProtocolUtils.varIntBytes(data.length) + data.length * 8;
+  }
+
+  @Override
+  public CompactStorage copy() {
+    return new BitStorage116(bitsPerEntry, size, Arrays.copyOf(data, data.length));
+  }
+
+  @SuppressFBWarnings("EI_EXPOSE_REP")
+  @Override
+  public long[] getData() {
+    return data;
+  }
+}
\ No newline at end of file
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/FlexibleStorage.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage19.java
similarity index 81%
rename from proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/FlexibleStorage.java
rename to proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage19.java
index 0e432e12..2982f556 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/FlexibleStorage.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage19.java
@@ -24,21 +24,26 @@
 
 package ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib;
 
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+import io.netty.buffer.ByteBuf;
+import java.util.Arrays;
+import ru.elytrium.elytraproxy.botfilter.protocol.util.CompactStorage;
 
 @SuppressFBWarnings({"EI_EXPOSE_REP2", "EI_EXPOSE_REP"})
-public class FlexibleStorage {
+public class BitStorage19 implements CompactStorage {
 
   private final long[] data;
   private final int bitsPerEntry;
   private final int size;
   private final long maxEntryValue;
 
-  public FlexibleStorage(int bitsPerEntry, int size) {
+  public BitStorage19(int bitsPerEntry, int size) {
     this(bitsPerEntry, new long[roundToNearest(size * bitsPerEntry, 64) / 64]);
   }
 
-  public FlexibleStorage(int bitsPerEntry, long[] data) {
+  public BitStorage19(int bitsPerEntry, long[] data) {
     if (bitsPerEntry < 4) {
       bitsPerEntry = 4;
     }
@@ -50,18 +55,16 @@ public class FlexibleStorage {
     this.maxEntryValue = (1L << this.bitsPerEntry) - 1;
   }
 
-  public long[] getData() {
-    return this.data;
-  }
-
   public int getBitsPerEntry() {
     return this.bitsPerEntry;
   }
 
+
   public int getSize() {
     return this.size;
   }
 
+  @Override
   public int get(int index) {
     if (index < 0 || index > this.size - 1) {
       throw new IndexOutOfBoundsException();
@@ -81,6 +84,7 @@ public class FlexibleStorage {
     }
   }
 
+  @Override
   public void set(int index, int value) {
     if (index < 0 || index > this.size - 1) {
       throw new IndexOutOfBoundsException();
@@ -103,6 +107,29 @@ public class FlexibleStorage {
     }
   }
 
+  @Override
+  public int getDataLength() {
+    return ProtocolUtils.varIntBytes(data.length) + data.length * 8;
+  }
+
+  @Override
+  public void write(ByteBuf buf, ProtocolVersion version) {
+    ProtocolUtils.writeVarInt(buf, data.length);
+    for (long l : data) {
+      buf.writeLong(l);
+    }
+  }
+
+  @Override
+  public CompactStorage copy() {
+    return new BitStorage19(bitsPerEntry, Arrays.copyOf(data, data.length));
+  }
+
+  @Override
+  public long[] getData() {
+    return data;
+  }
+
   private static int roundToNearest(int value, int roundTo) {
     if (roundTo == 0) {
       return 0;
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BlockStorage.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BlockStorage.java
deleted file mode 100644
index 1e7ee169..00000000
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BlockStorage.java
+++ /dev/null
@@ -1,152 +0,0 @@
-/*
- * This file is part of MCProtocolLib, licensed under the MIT License (MIT).
- *
- * Copyright (C) 2013-2021 Steveice10
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in all
- * copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
- * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
- * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
- * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
- * OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib;
-
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import io.netty.buffer.ByteBuf;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
-
-public class BlockStorage {
-
-  private static final SimpleBlock AIR = SimpleBlock.AIR;
-  private final Version version;
-  private int bitsPerEntry;
-  private List<SimpleBlock> states;
-  private FlexibleStorage storage;
-
-  public BlockStorage(Version version) {
-    this.version = version;
-    this.bitsPerEntry = 4;
-
-    this.states = new ArrayList<>();
-    this.states.add(AIR);
-
-    this.storage = new FlexibleStorage(this.bitsPerEntry, 4096);
-  }
-
-  public void write(ByteBuf out) {
-    out.writeByte(this.bitsPerEntry);
-
-
-    if (this.bitsPerEntry > 8) {
-      if (version.isBefore(Version.MINECRAFT_1_13)) {
-        ProtocolUtils.writeVarInt(out, 0);
-      }
-    } else {
-      ProtocolUtils.writeVarInt(out, this.states.size());
-      for (SimpleBlock state : this.states) {
-        writeBlockState(out, state, version);
-      }
-    }
-
-    long[] data = this.storage.getData();
-    ProtocolUtils.writeVarInt(out, data.length);
-    for (long l : data) {
-      out.writeLong(l);
-    }
-  }
-
-  public int calculateMaxSize() {
-    return (5 + this.states.size() * 4) + (this.storage.getData().length * 8);
-  }
-
-  public int getBitsPerEntry() {
-    return this.bitsPerEntry;
-  }
-
-  public List<SimpleBlock> getStates() {
-    return Collections.unmodifiableList(this.states);
-  }
-
-  public FlexibleStorage getStorage() {
-    return this.storage;
-  }
-
-  public void set(int x, int y, int z, SimpleBlock state) {
-    int id = this.bitsPerEntry <= 8 ? this.states.indexOf(state) : stateToRaw(state, version);
-    if (id == -1) {
-      this.states.add(state);
-      if (this.states.size() > 1 << this.bitsPerEntry) {
-        this.bitsPerEntry++;
-
-        List<SimpleBlock> oldStates = this.states;
-        if (this.bitsPerEntry > 8) {
-          oldStates = new ArrayList<SimpleBlock>(this.states);
-          this.states.clear();
-          this.bitsPerEntry = version.isBefore(Version.MINECRAFT_1_13) ? 13 : 14;
-        }
-
-        FlexibleStorage oldStorage = this.storage;
-        this.storage = new FlexibleStorage(this.bitsPerEntry, this.storage.getSize());
-        for (int index = 0; index < this.storage.getSize(); index++) {
-          this.storage.set(index,
-              this.bitsPerEntry <= 8 ? oldStorage.get(index)
-                  : stateToRaw(oldStates.get(index), version));
-        }
-      }
-
-      id = this.bitsPerEntry <= 8 ? this.states.indexOf(state) : stateToRaw(state, version);
-    }
-
-    this.storage.set(index(x, y, z), id);
-  }
-
-  public boolean isEmpty() {
-    for (int index = 0; index < this.storage.getSize(); index++) {
-      if (this.storage.get(index) != 0) {
-        return false;
-      }
-    }
-
-    return true;
-  }
-
-  private static void writeBlockState(ByteBuf out, SimpleBlock blockState, Version version) {
-    if (version.isBefore(Version.MINECRAFT_1_13)) {
-      ProtocolUtils
-          .writeVarInt(out, (blockState.getId(version) << 4) | (blockState.getData(version) & 0xF));
-    } else {
-      ProtocolUtils.writeVarInt(out, blockState.getId(version));
-    }
-  }
-
-  private static int index(int x, int y, int z) {
-    return y << 8 | z << 4 | x;
-  }
-
-  private static int stateToRaw(SimpleBlock state, Version version) {
-    if (version.isBefore(Version.MINECRAFT_1_13)) {
-      return (state.getId(version) << 4) | (state.getData(version) & 0xF);
-    } else {
-      return state.getId(version);
-    }
-  }
-}
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/ByteArray3d.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/ByteArray3d.java
deleted file mode 100644
index a0159bd0..00000000
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/ByteArray3d.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * This file is part of MCProtocolLib, licensed under the MIT License (MIT).
- *
- * Copyright (C) 2013-2021 Steveice10
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in all
- * copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
- * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
- * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
- * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
- * OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib;
-
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-
-import java.util.Arrays;
-
-@SuppressFBWarnings({"EI_EXPOSE_REP2", "EI_EXPOSE_REP"})
-public class ByteArray3d {
-
-  private byte[] data;
-
-  public ByteArray3d(int size) {
-    this.data = new byte[size];
-  }
-
-  public ByteArray3d(byte[] array) {
-    this.data = array;
-  }
-
-  public byte[] getData() {
-    return this.data;
-  }
-
-  public int get(int x, int y, int z) {
-    return this.data[y << 8 | z << 4 | x] & 0xFF;
-  }
-
-  public void set(int x, int y, int z, int val) {
-    this.data[y << 8 | z << 4 | x] = (byte) val;
-  }
-
-  public void fill(int val) {
-    Arrays.fill(this.data, (byte) val);
-  }
-}
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/NibbleArray3d.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/NibbleArray3d.java
index 29b0d57f..f97dc753 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/NibbleArray3d.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/NibbleArray3d.java
@@ -25,6 +25,7 @@
 package ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+import java.util.Arrays;
 
 @SuppressFBWarnings({"EI_EXPOSE_REP2", "EI_EXPOSE_REP"})
 public class NibbleArray3d {
@@ -35,6 +36,11 @@ public class NibbleArray3d {
     this.data = new byte[size >> 1];
   }
 
+  public NibbleArray3d(int size, int defValue) {
+    this.data = new byte[size >> 1];
+    fill(defValue);
+  }
+
   public NibbleArray3d(byte[] array) {
     this.data = array;
   }
@@ -52,6 +58,10 @@ public class NibbleArray3d {
 
   public void set(int x, int y, int z, int val) {
     int key = y << 8 | z << 4 | x;
+    set(key, val);
+  }
+
+  public void set(int key, int val) {
     int index = key >> 1;
     int part = key & 1;
     if (part == 0) {
@@ -63,13 +73,11 @@ public class NibbleArray3d {
 
   public void fill(int val) {
     for (int index = 0; index < this.data.length << 1; index++) {
-      int ind = index >> 1;
-      int part = index & 1;
-      if (part == 0) {
-        this.data[ind] = (byte) (this.data[ind] & 240 | val & 15);
-      } else {
-        this.data[ind] = (byte) (this.data[ind] & 15 | (val & 15) << 4);
-      }
+      set(index, val);
     }
   }
+
+  public NibbleArray3d copy() {
+    return new NibbleArray3d(Arrays.copyOf(data, data.length));
+  }
 }
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/ShortArray3d.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/ShortArray3d.java
deleted file mode 100644
index e5f6f469..00000000
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/ShortArray3d.java
+++ /dev/null
@@ -1,102 +0,0 @@
-/*
- * This file is part of MCProtocolLib, licensed under the MIT License (MIT).
- *
- * Copyright (C) 2013-2021 Steveice10
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in all
- * copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
- * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
- * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
- * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
- * OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib;
-
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-
-import java.util.Arrays;
-
-@SuppressFBWarnings({"EI_EXPOSE_REP2", "EI_EXPOSE_REP"})
-public class ShortArray3d {
-
-  private short[] data;
-
-  public ShortArray3d(int size) {
-    this.data = new short[size];
-  }
-
-  public ShortArray3d(short[] array) {
-    this.data = array;
-  }
-
-  public short[] getData() {
-    return this.data;
-  }
-
-  public int getData(int x, int y, int z) {
-    return this.get(x, y, z) & 0xF;
-  }
-
-  public int get(int x, int y, int z) {
-    return this.data[y << 8 | z << 4 | x] & 0xFFFF;
-  }
-
-  public void set(int x, int y, int z, int val) {
-    this.data[y << 8 | z << 4 | x] = (short) val;
-  }
-
-  public int getBlock(int x, int y, int z) {
-    return this.get(x, y, z) >> 4;
-  }
-
-  public void setBlock(int x, int y, int z, int block) {
-    this.set(x, y, z, block << 4 | this.getData(x, y, z));
-  }
-
-  public void setData(int x, int y, int z, int data) {
-    this.set(x, y, z, this.getBlock(x, y, z) << 4 | data);
-  }
-
-  public void setBlockAndData(int x, int y, int z, int block, int data) {
-    this.set(x, y, z, block << 4 | data);
-  }
-
-  public void fill(int val) {
-    Arrays.fill(this.data, (short) val);
-  }
-
-  @Override
-  public boolean equals(Object o) {
-    if (this == o) {
-      return true;
-    }
-    if (o == null || getClass() != o.getClass()) {
-      return false;
-    }
-
-    ShortArray3d that = (ShortArray3d) o;
-
-    if (!Arrays.equals(data, that.data)) {
-      return false;
-    }
-
-    return true;
-  }
-
-  @Override
-  public int hashCode() {
-    return Arrays.hashCode(data);
-  }
-}
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/BotFilterSessionHandler.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/BotFilterSessionHandler.java
index 67ab64a8..ccad8cd8 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/BotFilterSessionHandler.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/BotFilterSessionHandler.java
@@ -22,9 +22,7 @@ package ru.elytrium.elytraproxy.botfilter.server;
 import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
 import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
 import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
-
 import java.util.Objects;
-
 import lombok.Data;
 
 @Data
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/ServerPackets.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/ServerPackets.java
index 66a7a6e3..781e4b8c 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/ServerPackets.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/ServerPackets.java
@@ -24,29 +24,26 @@ import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.connection.registry.DimensionInfo;
 import com.velocitypowered.proxy.protocol.StateRegistry;
 import com.velocitypowered.proxy.protocol.packet.Disconnect;
-
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
-
 import lombok.Getter;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import ru.elytrium.elytraproxy.botfilter.protocol.cache.MultiplePreparedPackets;
 import ru.elytrium.elytraproxy.botfilter.protocol.cache.PacketCompressor;
 import ru.elytrium.elytraproxy.botfilter.protocol.cache.PreparedPacket;
+import ru.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
+import ru.elytrium.elytraproxy.botfilter.protocol.data.registry.Dimension;
+import ru.elytrium.elytraproxy.botfilter.protocol.data.registry.DimensionRegistry;
 import ru.elytrium.elytraproxy.botfilter.protocol.packet.JoinGame;
 import ru.elytrium.elytraproxy.botfilter.protocol.packet.PlayerPositionAndLook;
-import ru.elytrium.elytraproxy.botfilter.protocol.packet.world.Chunk17to115;
+import ru.elytrium.elytraproxy.botfilter.protocol.packet.UpdateViewPosition;
 import ru.elytrium.elytraproxy.botfilter.protocol.packet.world.ChunkData;
-import ru.elytrium.elytraproxy.botfilter.protocol.packet.world.EmptyChunk113;
 import ru.elytrium.elytraproxy.botfilter.protocol.packet.world.UpdateLight;
-import ru.elytrium.elytraproxy.botfilter.protocol.registry.Biome;
-import ru.elytrium.elytraproxy.botfilter.protocol.registry.Dimension;
-import ru.elytrium.elytraproxy.botfilter.protocol.registry.DimensionRegistry;
 import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import ru.elytrium.elytraproxy.botfilter.server.world.SimpleChunk;
 import ru.elytrium.elytraproxy.botfilter.server.world.VirtualWorld;
+import ru.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
 
 @Getter
 public class ServerPackets {
@@ -66,9 +63,10 @@ public class ServerPackets {
 
   public void createPackets() {
     releaseAll();
-    this.virtualWorld = new VirtualWorld(Dimension.THEEND,
-        new DimensionInfo(Dimension.THEEND.getKey(), Dimension.THEEND.getKey(), true, false));
-    virtualWorld.setSkyLight(0, 60, 0, (byte) 1); //1.7 workaround
+    this.virtualWorld = new VirtualWorld(Dimension.OVERWORLD,
+        new DimensionInfo(Dimension.OVERWORLD.getKey(), Dimension.OVERWORLD.getKey(), true, false));
+    virtualWorld.setSkyLight(0, 60, 0,
+        (byte) 1); //1.7 workaround //TODO: Maybe broken with new light system realiztion
 
     /*
     for (int x = 0; x < 16; x++) {
@@ -109,13 +107,13 @@ public class ServerPackets {
   private PreparedPacket<JoinGame> createJoinGamePacket() {
     DimensionRegistry dimensionRegistry = new DimensionRegistry();
     dimensionRegistry.addDimension(
-        Dimension.THEEND, ImmutableList.of(Biome.PLAINTS, Biome.SWAMP, Biome.SWAMP_HILLS));
-    dimensionRegistry.setActiveDimension(Dimension.THEEND);
+        Dimension.OVERWORLD, ImmutableList.of(Biome.PLAINTS, Biome.SWAMP, Biome.SWAMP_HILLS));
+    dimensionRegistry.setActiveDimension(Dimension.OVERWORLD);
     dimensionRegistry.setActiveDimensionInfo(
-        new DimensionInfo("minecraft:the_end", "minecraft:the_end", false, false));
+        new DimensionInfo("minecraft:overworld", "minecraft:overworld", false, false));
     PreparedPacket<JoinGame> joinGame = new PreparedPacket<>();
-    joinGame.prepare(JoinGame.builder().entityId(0).gamemode((short) 2).dimension(1)
-        .partialHashedSeed(1).difficulty((short) 0).maxPlayers(1).levelType("flat").viewDistance(4)
+    joinGame.prepare(JoinGame.builder().entityId(0).gamemode((short) 1).dimension(0).
+        partialHashedSeed(1).difficulty((short) 0).maxPlayers(1).levelType("flat").viewDistance(4)
         .reducedDebugInfo(false).showRespawnScreen(true).hardcore(false)
         .dimensionRegistry(dimensionRegistry).build());
 
@@ -124,7 +122,7 @@ public class ServerPackets {
 
   private PreparedPacket<PlayerPositionAndLook> createPlayerPosAndLookPacket() {
     PreparedPacket<PlayerPositionAndLook> playerPosAndLook = new PreparedPacket<>();
-    playerPosAndLook.prepare(new PlayerPositionAndLook(6, 60, 6, 0f, 0f, -133, false));
+    playerPosAndLook.prepare(new PlayerPositionAndLook(6, 60, 6, 0f, 0f, -133, false, true));
     return processCompression(playerPosAndLook);
   }
 
@@ -138,10 +136,8 @@ public class ServerPackets {
 
   private PreparedPacket<ChunkData> createChunkDataPacket(SimpleChunk chunk) {
     PreparedPacket<ChunkData> chunkPacket = new PreparedPacket<>();
-    chunkPacket.prepare(new Chunk17to115(chunk), ProtocolVersion.MINECRAFT_1_7_2,
-        ProtocolVersion.MINECRAFT_1_15_2);
-    chunkPacket.prepare(new EmptyChunk113(chunk.getX(), chunk.getZ()),
-        ProtocolVersion.MINECRAFT_1_16);
+    chunkPacket.prepare(new ChunkData(chunk.getFullChunkSnapshot(),
+        chunk.getWorld().getDimension().isHasSkylight()));
     return processCompression(chunkPacket);
   }
 
@@ -155,11 +151,18 @@ public class ServerPackets {
 
   private PreparedPacket<UpdateLight> createUpdateLightPacket(SimpleChunk chunk) {
     PreparedPacket<UpdateLight> lightPacket = new PreparedPacket<>();
-    lightPacket.prepare(new UpdateLight(chunk), ProtocolVersion.MINECRAFT_1_14,
-        ProtocolVersion.MINECRAFT_1_15_2);
+    lightPacket
+        .prepare(new UpdateLight(chunk.getFullChunkSnapshot()), ProtocolVersion.MINECRAFT_1_14);
     return processCompression(lightPacket);
   }
 
+  private PreparedPacket<UpdateViewPosition> createUpdateViewPositionPacket(SimpleChunk chunk) {
+    PreparedPacket<UpdateViewPosition> update = new PreparedPacket<>();
+    update.prepare(new UpdateViewPosition(chunk.getX(), chunk.getZ()),
+        ProtocolVersion.MINECRAFT_1_17);
+    return processCompression(update);
+  }
+
   private PreparedPacket<Disconnect> createDisconnectPacket(String message,
       StateRegistry protocol) {
     Component component = LegacyComponentSerializer.legacyAmpersand().deserialize(message);
@@ -167,7 +170,7 @@ public class ServerPackets {
     disconnect.prepare(Disconnect.create(component, ProtocolVersion.MINECRAFT_1_7_2),
         ProtocolVersion.MINECRAFT_1_7_2, ProtocolVersion.MINECRAFT_1_15_2, protocol);
     disconnect.prepare(Disconnect.create(component, ProtocolVersion.MINECRAFT_1_16),
-        ProtocolVersion.MINECRAFT_1_16, ProtocolVersion.MAXIMUM_VERSION, protocol);
+        ProtocolVersion.MINECRAFT_1_16, protocol);
     if (protocol == StateRegistry.LOGIN) {
       disconnect.finish();
       return disconnect;
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/VirtualServer.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/VirtualServer.java
index c132d59d..0a1a6214 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/VirtualServer.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/VirtualServer.java
@@ -30,9 +30,10 @@ import ru.elytrium.elytraproxy.botfilter.protocol.cache.PacketCompressor;
 
 public class VirtualServer {
 
-  @Getter private final ElytraProxy elytraProxy;
-  private final ConcurrentMap<String,
-          BotFilterSessionHandler> activeConnections = new ConcurrentHashMap<>();
+  @Getter
+  private final ElytraProxy elytraProxy;
+  private final ConcurrentMap<String, BotFilterSessionHandler>
+      activeConnections = new ConcurrentHashMap<>();
   private final ServerPackets packets;
 
   public VirtualServer(ElytraProxy elytraProxy) {
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/SimpleBlock.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/SimpleBlock.java
index a589722f..83f1f406 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/SimpleBlock.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/SimpleBlock.java
@@ -24,32 +24,58 @@ import static ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.BlockIn
 import static ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_13;
 import static ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_13_1;
 import static ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_14;
+import static ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_16;
+import static ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_16_2;
+import static ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_17;
 import static ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_7;
 import static ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_8;
 
 import com.velocitypowered.api.network.ProtocolVersion;
-
 import java.util.Arrays;
 import java.util.EnumMap;
 import java.util.EnumSet;
 import java.util.Map;
 import java.util.Set;
-
+import lombok.NonNull;
 import org.jetbrains.annotations.NotNull;
 
 public class SimpleBlock {
 
-  public static final SimpleBlock AIR = air(info(MINECRAFT_1_7, 0));
-  public static final SimpleBlock STONE = solid(info(MINECRAFT_1_7, 1));
-  public static final SimpleBlock GRANITE = solid(fallback(MINECRAFT_1_7, STONE),
-      info(MINECRAFT_1_8, 1, 1), info(MINECRAFT_1_13, 2));
-  public static final SimpleBlock GLASS = solid(info(MINECRAFT_1_7, 20),
-      info(MINECRAFT_1_13, 230));
-  public static final SimpleBlock TORCH = nonSolid(false, info(MINECRAFT_1_7, 50, 14),
-      info(MINECRAFT_1_13, 1130), info(MINECRAFT_1_13_1, 1131), info(MINECRAFT_1_14, 1134));
-  public static final SimpleBlock BARRIER = solid(fallback(MINECRAFT_1_7, GLASS),
-      info(MINECRAFT_1_8, 166), info(MINECRAFT_1_13, 6493), info(MINECRAFT_1_13_1, 6494),
-      info(MINECRAFT_1_14, 7000));
+  public static final SimpleBlock AIR = air(
+      info(MINECRAFT_1_7, 0)
+  );
+  public static final SimpleBlock STONE = solid(
+      info(MINECRAFT_1_7, 1)
+  );
+  public static final SimpleBlock GRANITE = solid(
+      fallback(MINECRAFT_1_7, STONE),
+      info(MINECRAFT_1_8, 1, 1),
+      info(MINECRAFT_1_13, 2)
+  );
+  public static final SimpleBlock GLASS = solid(
+      info(MINECRAFT_1_7, 20),
+      info(MINECRAFT_1_13, 230),
+      info(MINECRAFT_1_16, 231),
+      info(MINECRAFT_1_17, 262)
+  );
+  public static final SimpleBlock TORCH = nonSolid(false,
+      info(MINECRAFT_1_7, 50, 14),
+      info(MINECRAFT_1_13, 1130),
+      info(MINECRAFT_1_13_1, 1131),
+      info(MINECRAFT_1_14, 1134),
+      info(MINECRAFT_1_16, 1435),
+      info(MINECRAFT_1_17, 1491)
+  );
+  public static final SimpleBlock BARRIER = solid(
+      fallback(MINECRAFT_1_7, GLASS),
+      info(MINECRAFT_1_8, 166),
+      info(MINECRAFT_1_13, 6493),
+      info(MINECRAFT_1_13_1, 6494),
+      info(MINECRAFT_1_14, 7000),
+      info(MINECRAFT_1_16, 7536),
+      info(MINECRAFT_1_16_2, 7540),
+      info(MINECRAFT_1_17, 7754)
+  );
 
   private final Map<Version, BlockInfo> blockInfos = new EnumMap<>(Version.class);
   private final boolean solid;
@@ -59,7 +85,7 @@ public class SimpleBlock {
   public SimpleBlock(boolean solid, boolean air, boolean motionBlocking, BlockInfo... blockInfos) {
     this.motionBlocking = motionBlocking;
     for (BlockInfo info : blockInfos) {
-      for (Version version : EnumSet.range(info.version, Version.MINECRAFT_1_16)) {
+      for (Version version : EnumSet.range(info.version, MINECRAFT_1_17)) {
         this.blockInfos.put(version, info);
       }
     }
@@ -87,23 +113,23 @@ public class SimpleBlock {
     return motionBlocking;
   }
 
-  public static SimpleBlock solid(BlockInfo... infos) {
+  public static @NotNull SimpleBlock solid(BlockInfo... infos) {
     return solid(true, infos);
   }
 
-  public static SimpleBlock solid(boolean motionBlocking, BlockInfo... infos) {
+  public static @NotNull SimpleBlock solid(boolean motionBlocking, BlockInfo... infos) {
     return new SimpleBlock(true, false, motionBlocking, infos);
   }
 
-  public static SimpleBlock nonSolid(BlockInfo... infos) {
+  public static @NotNull SimpleBlock nonSolid(BlockInfo... infos) {
     return nonSolid(true, infos);
   }
 
-  public static SimpleBlock nonSolid(boolean motionBlocking, BlockInfo... infos) {
+  public static @NotNull SimpleBlock nonSolid(boolean motionBlocking, BlockInfo... infos) {
     return new SimpleBlock(false, false, motionBlocking, infos);
   }
 
-  public static SimpleBlock air(BlockInfo... infos) {
+  public static @NotNull SimpleBlock air(BlockInfo... infos) {
     return new SimpleBlock(false, true, false, infos);
   }
 
@@ -118,7 +144,10 @@ public class SimpleBlock {
     MINECRAFT_1_13_1(ProtocolVersion.MINECRAFT_1_13_1, ProtocolVersion.MINECRAFT_1_13_2),
     MINECRAFT_1_14(EnumSet.range(ProtocolVersion.MINECRAFT_1_14, ProtocolVersion.MINECRAFT_1_14_4)),
     MINECRAFT_1_15(EnumSet.range(ProtocolVersion.MINECRAFT_1_15, ProtocolVersion.MINECRAFT_1_15_2)),
-    MINECRAFT_1_16(EnumSet.range(ProtocolVersion.MINECRAFT_1_16, ProtocolVersion.MINECRAFT_1_16_4));
+    MINECRAFT_1_16(ProtocolVersion.MINECRAFT_1_16, ProtocolVersion.MINECRAFT_1_16_1),
+    MINECRAFT_1_16_2(ProtocolVersion.MINECRAFT_1_16_2, ProtocolVersion.MINECRAFT_1_16_3),
+    MINECRAFT_1_16_4(ProtocolVersion.MINECRAFT_1_16_4),
+    MINECRAFT_1_17(ProtocolVersion.MINECRAFT_1_17);
 
     private static EnumMap<ProtocolVersion, Version> mcVersionToBlockVersions = new EnumMap<>(
         ProtocolVersion.class);
@@ -157,6 +186,10 @@ public class SimpleBlock {
       return this.compareTo(other) >= 0;
     }
 
+    public Set<ProtocolVersion> getVersions() {
+      return versions;
+    }
+
     public static Version map(ProtocolVersion protocolVersion) {
       return mcVersionToBlockVersions.get(protocolVersion);
     }
@@ -164,28 +197,29 @@ public class SimpleBlock {
 
   public static class BlockInfo {
 
+    @NonNull
     @NotNull
     private final Version version;
     private final short id;
     private final byte data;
     private final BlockInfo fallback;
 
-    public BlockInfo(@NotNull Version version, short id, byte data) {
+    public BlockInfo(Version version, short id, byte data) {
       this(version, id, data, null);
     }
 
-    public BlockInfo(@NotNull Version version, @NotNull BlockInfo fallback) {
+    public BlockInfo(Version version, @NonNull BlockInfo fallback) {
       this(version, (short) 0, (byte) 0, fallback);
     }
 
-    public BlockInfo(@NotNull Version version, short id, byte data, BlockInfo fallback) {
+    private BlockInfo(@NonNull Version version, short id, byte data, BlockInfo fallback) {
       this.version = version;
       this.id = id;
       this.data = data;
       this.fallback = fallback;
     }
 
-    public @NotNull Version getVersion() {
+    public Version getVersion() {
       return version;
     }
 
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/SimpleChunk.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/SimpleChunk.java
deleted file mode 100644
index 58c6348c..00000000
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/SimpleChunk.java
+++ /dev/null
@@ -1,242 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package ru.elytrium.elytraproxy.botfilter.server.world;
-
-import com.google.common.base.Preconditions;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-
-import java.util.function.Function;
-import java.util.function.Supplier;
-
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.NonNull;
-import lombok.Setter;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-import ru.elytrium.elytraproxy.botfilter.protocol.registry.Biome;
-import ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
-
-public class SimpleChunk {
-
-  public static final int MAX_BLOCKS_PER_SECTION = 16 * 16 * 16;
-
-  @Getter private final VirtualWorld instance;
-  @Getter private final int x;
-  @Getter private final int z;
-  @SuppressFBWarnings("EI_EXPOSE_REP")
-  @Getter
-  private final ChunkSection[] sections = new ChunkSection[16];
-  //For light update packet; y= -16;-1, 256;271
-  @SuppressFBWarnings("EI_EXPOSE_REP")
-  @Getter
-  private final ChunkSection[] extraLightSections = new ChunkSection[2];
-
-  public SimpleChunk(VirtualWorld instance, int x, int z) {
-    this.instance = instance;
-    this.x = x;
-    this.z = z;
-  }
-
-  public void setBlock(int x, int y, int z, @Nullable SimpleBlock block) {
-    ChunkSection section = getSection(y);
-    section.setBlockAt(x, y % 16, z, block);
-  }
-
-  @NotNull
-  public SimpleBlock getBlock(int x, int y, int z) {
-    return sectionAction(y, (s) -> s.getBlockAt(x, y % 16, z), () -> SimpleBlock.AIR);
-  }
-
-  @NotNull
-  public Biome getBiome(int x, int y, int z) {
-    return sectionAction(y, ChunkSection::getBiome, () -> Biome.PLAINTS);
-  }
-
-  public void setBiome(int x, int y, int z, @NonNull Biome biome) {
-    ChunkSection section = getSection(y);
-    section.setBiome(biome);
-  }
-
-  public byte getBlockLight(int x, int y, int z) {
-    return lightSectionAction(y, (s) -> s.getBlockLightAt(x, y % 16, z), () -> (byte) 0);
-  }
-
-  public void setBlockLight(int x, int y, int z, byte light) {
-    getSectionForLighting(y, true).setBlockLightAt(x, y % 16, z, light);
-  }
-
-  public byte getSkyLight(int x, int y, int z) {
-    return lightSectionAction(y, (s) -> s.getSkyLightAt(x, y % 16, z), () -> (byte) 0);
-  }
-
-  public void setSkyLight(int x, int y, int z, byte light) {
-    getSectionForLighting(y, true).setSkyLightAt(x, y % 16, z, light);
-  }
-
-  private ChunkSection getSection(int y) {
-    int s = getSectionIndex(y);
-    ChunkSection section = sections[s];
-    if (section == null) {
-      sections[s] = (section = new ChunkSection());
-    }
-    return section;
-  }
-
-  private <T> T sectionAction(int y, Function<ChunkSection, T> function, Supplier<T> ifNull) {
-    ChunkSection section = sections[getSectionIndex(y)];
-    if (section == null) {
-      return ifNull.get();
-    }
-    return function.apply(section);
-  }
-
-  private <T> T lightSectionAction(int y, Function<ChunkSection, T> function, Supplier<T> ifNull) {
-    ChunkSection section = getSectionForLighting(y, false);
-    if (section == null) {
-      return ifNull.get();
-    }
-    return function.apply(section);
-  }
-
-  private ChunkSection getSectionForLighting(int y, boolean create) {
-    ChunkSection result = null;
-    if (y < 0) {
-      result = extraLightSections[0];
-      if (create && result == null) {
-        result = (extraLightSections[0] = new ChunkSection());
-      }
-      return result;
-    }
-    if (y >= 256) {
-      result = extraLightSections[1];
-      if (create && result == null) {
-        result = (extraLightSections[1] = new ChunkSection());
-      }
-      return result;
-    }
-    return create ? getSection(y) : sections[getSectionIndex(y)];
-  }
-
-  private static int getSectionIndex(int y) {
-    return y / 16;
-  }
-
-  @NoArgsConstructor
-  public static class ChunkSection {
-
-    private SimpleBlock[] blocks;
-    @Getter private NibbleArray3d blockLight;
-    @Getter private NibbleArray3d skyLight;
-    @Getter
-    @Setter
-    @NonNull
-    private Biome biome = Biome.PLAINTS;
-    @Getter private short blocksCount = 0;
-
-    public ChunkSection(@NonNull Biome biome) {
-      this.biome = biome;
-    }
-
-    @NotNull
-    public SimpleBlock getBlockAt(int x, int y, int z) {
-      checkIndexes(x, y, z);
-      return getBlockAt(getBlockIndex(x, y, z));
-    }
-
-    @NotNull
-    private SimpleBlock getBlockAt(int index) {
-      return (blocks == null || blocks[index] == null) ? SimpleBlock.AIR : blocks[index];
-    }
-
-    public void setBlockAt(int x, int y, int z, @Nullable SimpleBlock block) {
-      checkIndexes(x, y, z);
-      setBlockAt(getBlockIndex(x, y, z), block);
-    }
-
-    private void setBlockAt(int index, @Nullable SimpleBlock block) {
-      if (block == SimpleBlock.AIR) {
-        setBlockAt(index, null);
-        return;
-      }
-      if (blocks == null) {
-        if (block == null) {
-          return;
-        }
-        blocks = new SimpleBlock[MAX_BLOCKS_PER_SECTION];
-      }
-      SimpleBlock old = blocks[index];
-      blocks[index] = block;
-      if (old != null) {
-        blocksCount--;
-      }
-
-      if (block != null) {
-        blocksCount++;
-      }
-    }
-
-    public byte getBlockLightAt(int x, int y, int z) {
-      checkIndexes(x, y, z);
-      return (byte) (blockLight == null ? 0 : blockLight.get(x, y, z));
-    }
-
-    public void setBlockLightAt(int x, int y, int z, byte light) {
-      checkIndexes(x, y, z);
-      Preconditions.checkArgument(light >= 0 && light <= 15, "light should be between 0 and 15");
-      if (blockLight == null) {
-        blockLight = new NibbleArray3d(MAX_BLOCKS_PER_SECTION);
-      }
-      blockLight.set(x, y, z, light);
-    }
-
-    public byte getSkyLightAt(int x, int y, int z) {
-      checkIndexes(x, y, z);
-      return (byte) (skyLight == null ? 0 : skyLight.get(x, y, z));
-    }
-
-    public void setSkyLightAt(int x, int y, int z, byte light) {
-      checkIndexes(x, y, z);
-      Preconditions.checkArgument(light >= 0 && light <= 15, "light should be between 0 and 15");
-      if (skyLight == null) {
-        skyLight = new NibbleArray3d(MAX_BLOCKS_PER_SECTION);
-      }
-      skyLight.set(x, y, z, light);
-    }
-
-    public boolean hasAnyData() {
-      return blocksCount > 0 || skyLight != null || blockLight != null;
-    }
-
-    private void checkIndexes(int x, int y, int z) {
-      Preconditions.checkArgument(checkIndex(x), "x should be between 0 and 15");
-      Preconditions.checkArgument(checkIndex(y), "y should be between 0 and 15");
-      Preconditions.checkArgument(checkIndex(z), "z should be between 0 and 15");
-    }
-
-    private boolean checkIndex(int i) {
-      return i >= 0 && i <= 15;
-    }
-
-    public static int getBlockIndex(int x, int y, int z) {
-      return (y << 8) | (z << 4) | x;
-    }
-  }
-}
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/VirtualWorld.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/VirtualWorld.java
index 0de65b4b..e4d80422 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/VirtualWorld.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/VirtualWorld.java
@@ -21,19 +21,19 @@ package ru.elytrium.elytraproxy.botfilter.server.world;
 
 import com.google.common.collect.ImmutableList;
 import com.velocitypowered.proxy.connection.registry.DimensionInfo;
-
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Function;
 import java.util.function.Supplier;
-
 import lombok.Getter;
 import lombok.NonNull;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
-import ru.elytrium.elytraproxy.botfilter.protocol.registry.Biome;
-import ru.elytrium.elytraproxy.botfilter.protocol.registry.Dimension;
+import ru.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
+import ru.elytrium.elytraproxy.botfilter.protocol.data.registry.Dimension;
+import ru.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
 
 public class VirtualWorld {
 
@@ -55,14 +55,19 @@ public class VirtualWorld {
     getChunkOrNew(x, z).setBlock(getChunkCoordinate(x), y, getChunkCoordinate(z), block);
   }
 
+  @SuppressFBWarnings("NP_NONNULL_RETURN_VIOLATION")
   @NotNull
   public SimpleBlock getBlock(int x, int y, int z) {
     return chunkAction(x, z, (c) -> c.getBlock(getChunkCoordinate(x), y, getChunkCoordinate(z)),
         () -> SimpleBlock.AIR);
   }
 
-  public void setBiome(int x, int y, int z, @NonNull Biome biome) {
-    getChunkOrNew(x, z).setBiome(x, y, z, biome);
+  public void setBiome2d(int x, int z, @NonNull Biome biome) {
+    getChunkOrNew(x, z).setBiome2d(getChunkCoordinate(x), getChunkCoordinate(z), biome);
+  }
+
+  public void setBiome3d(int x, int y, int z, @NonNull Biome biome) {
+    getChunkOrNew(x, z).setBiome3d(getChunkCoordinate(x), y, getChunkCoordinate(z), biome);
   }
 
   public Biome getBiome(int x, int y, int z) {
@@ -104,7 +109,6 @@ public class VirtualWorld {
     return chunks.get(getChunkIndex(getChunkXZ(x), getChunkXZ(z)));
   }
 
-  @NotNull
   public SimpleChunk getChunkOrNew(int x, int z) {
     x = getChunkXZ(x);
     z = getChunkXZ(z);
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/chunk/ChunkSnapshot.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/chunk/ChunkSnapshot.java
new file mode 100644
index 00000000..a4f285c6
--- /dev/null
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/chunk/ChunkSnapshot.java
@@ -0,0 +1,42 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package ru.elytrium.elytraproxy.botfilter.server.world.chunk;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import ru.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
+import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
+
+@RequiredArgsConstructor
+@Getter
+public class ChunkSnapshot {
+
+  private final int x;
+  private final int z;
+  private final boolean fullChunk;
+  private final SimpleSection[] sections;
+  private final LightSection[] light;
+  private final Biome[] biomes;
+
+  public SimpleBlock getBlock(int x, int y, int z) {
+    SimpleSection section = sections[y / 16];
+    return section == null ? SimpleBlock.AIR : section.getBlockAt(x, y % 16, z);
+  }
+}
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/chunk/LightSection.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/chunk/LightSection.java
new file mode 100644
index 00000000..5b49ebb8
--- /dev/null
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/chunk/LightSection.java
@@ -0,0 +1,91 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package ru.elytrium.elytraproxy.botfilter.server.world.chunk;
+
+import static ru.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk.MAX_BLOCKS_PER_SECTION;
+
+import com.google.common.base.Preconditions;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import ru.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
+
+@AllArgsConstructor(access = AccessLevel.PRIVATE)
+@NoArgsConstructor
+public class LightSection {
+
+  public static NibbleArray3d NO_LIGHT = new NibbleArray3d(MAX_BLOCKS_PER_SECTION);
+  public static NibbleArray3d ALL_LIGHT = new NibbleArray3d(MAX_BLOCKS_PER_SECTION, 15);
+  public static final LightSection DEFAULT = new LightSection();
+
+  @Getter
+  private NibbleArray3d blockLight = NO_LIGHT;
+  @Getter
+  private NibbleArray3d skyLight = ALL_LIGHT;
+  @Getter
+  private long lastUpdate = System.nanoTime();
+
+  public byte getBlockLight(int x, int y, int z) {
+    checkIndexes(x, y, z);
+    return (byte) blockLight.get(x, y, z);
+  }
+
+  public byte getSkyLight(int x, int y, int z) {
+    checkIndexes(x, y, z);
+    return (byte) skyLight.get(x, y, z);
+  }
+
+  public void setBlockLight(int x, int y, int z, byte light) {
+    checkIndexes(x, y, z);
+    Preconditions.checkArgument(light >= 0 && light <= 15, "light should be between 0 and 15");
+    if (blockLight == NO_LIGHT && light != 0) {
+      blockLight = new NibbleArray3d(MAX_BLOCKS_PER_SECTION);
+    }
+    blockLight.set(x, y, z, light);
+    lastUpdate = System.nanoTime();
+  }
+
+  public void setSkyLight(int x, int y, int z, byte light) {
+    checkIndexes(x, y, z);
+    Preconditions.checkArgument(light >= 0 && light <= 15, "light should be between 0 and 15");
+    if (skyLight == ALL_LIGHT && light != 15) {
+      skyLight = new NibbleArray3d(MAX_BLOCKS_PER_SECTION);
+    }
+    skyLight.set(x, y, z, light);
+    lastUpdate = System.nanoTime();
+  }
+
+  private void checkIndexes(int x, int y, int z) {
+    Preconditions.checkArgument(checkIndex(x), "x should be between 0 and 15");
+    Preconditions.checkArgument(checkIndex(y), "y should be between 0 and 15");
+    Preconditions.checkArgument(checkIndex(z), "z should be between 0 and 15");
+  }
+
+  private boolean checkIndex(int i) {
+    return i >= 0 && i <= 15;
+  }
+
+  public LightSection copy() {
+    NibbleArray3d skyLight = this.skyLight == ALL_LIGHT ? ALL_LIGHT : this.skyLight.copy();
+    NibbleArray3d blockLight = this.blockLight == NO_LIGHT ? NO_LIGHT : this.blockLight.copy();
+    return new LightSection(blockLight, skyLight, lastUpdate);
+  }
+}
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleChunk.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleChunk.java
new file mode 100644
index 00000000..125e4e7d
--- /dev/null
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleChunk.java
@@ -0,0 +1,160 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package ru.elytrium.elytraproxy.botfilter.server.world.chunk;
+
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+import java.util.Arrays;
+import java.util.function.Function;
+import java.util.function.Supplier;
+import lombok.Getter;
+import lombok.NonNull;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import ru.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
+import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
+import ru.elytrium.elytraproxy.botfilter.server.world.VirtualWorld;
+
+@SuppressFBWarnings("NP_NONNULL_RETURN_VIOLATION")
+public class SimpleChunk {
+
+  public static final int MAX_BLOCKS_PER_SECTION = 16 * 16 * 16;
+
+  @Getter
+  private final VirtualWorld world;
+  @Getter
+  private final int x;
+  @Getter
+  private final int z;
+  private final SimpleSection[] sections = new SimpleSection[16];
+  private final LightSection[] light = new LightSection[18];
+  private final Biome[] biomes = new Biome[1024];
+
+  public SimpleChunk(VirtualWorld world, int x, int z) {
+    this.world = world;
+    this.x = x;
+    this.z = z;
+    Arrays.fill(biomes, Biome.PLAINTS);
+    //Arrays.fill(light, LightSection.DEFAULT);
+  }
+
+  public void setBlock(int x, int y, int z, @Nullable SimpleBlock block) {
+    SimpleSection section = getSection(y);
+    section.setBlockAt(x, y % 16, z, block);
+  }
+
+  @NotNull
+  public SimpleBlock getBlock(int x, int y, int z) {
+    return sectionAction(y, (s) -> s.getBlockAt(x, y % 16, z), () -> SimpleBlock.AIR);
+  }
+
+  @NotNull
+  public Biome getBiome(int x, int y, int z) {
+    return biomes[getBiomeIndex(x, y, z)];
+  }
+
+
+  public void setBiome2d(int x, int z, @NonNull Biome biome) {
+    for (int y = 0; y < 256; y += 4) {
+      setBiome3d(x, y, z, biome);
+    }
+  }
+
+
+  public void setBiome3d(int x, int y, int z, @NonNull Biome biome) {
+    this.biomes[getBiomeIndex(x, y, z)] = biome;
+  }
+
+  public byte getBlockLight(int x, int y, int z) {
+    return getLightSection(y, false).getBlockLight(x, y % 16, z);
+  }
+
+  public void setBlockLight(int x, int y, int z, byte light) {
+    getLightSection(y, true).setBlockLight(x, y % 16, z, light);
+  }
+
+  public byte getSkyLight(int x, int y, int z) {
+    return getLightSection(y, false).getSkyLight(x, y % 16, z);
+  }
+
+  public void setSkyLight(int x, int y, int z, byte light) {
+    getLightSection(y, true).setSkyLight(x, y % 16, z, light);
+  }
+
+  public ChunkSnapshot getFullChunkSnapshot() {
+    return createSnapshot(true, 0);
+  }
+
+  public ChunkSnapshot getPartialChunkSnapshot(long previousUpdate) {
+    return createSnapshot(false, previousUpdate);
+  }
+
+  private ChunkSnapshot createSnapshot(boolean full, long previousUpdate) {
+    SimpleSection[] sectionsSnapshot = new SimpleSection[sections.length];
+    for (int i = 0; i < sections.length; i++) {
+      if (sections[i] != null && sections[i].getLastUpdate() > previousUpdate) {
+        sectionsSnapshot[i] = sections[i].getSnapshot();
+      }
+    }
+    LightSection[] lightSnapshot = new LightSection[18];
+    for (int i = 0; i < light.length; i++) {
+      if (light[i] == null) {
+        lightSnapshot[i] = LightSection.DEFAULT;
+      } else if (light[i].getLastUpdate() > previousUpdate) {
+        lightSnapshot[i] = light[i].copy();
+      }
+    }
+    return new ChunkSnapshot(x, z, full, sectionsSnapshot, lightSnapshot,
+        Arrays.copyOf(biomes, biomes.length));
+  }
+
+  private SimpleSection getSection(int y) {
+    int s = getSectionIndex(y);
+    SimpleSection section = sections[s];
+    if (section == null) {
+      sections[s] = (section = new SimpleSection());
+    }
+    return section;
+  }
+
+  private <T> T sectionAction(int y, Function<SimpleSection, T> function, Supplier<T> ifNull) {
+    SimpleSection section = sections[getSectionIndex(y)];
+    if (section == null) {
+      return ifNull.get();
+    }
+    return function.apply(section);
+  }
+
+  private LightSection getLightSection(int y, boolean create) {
+    int index = y < 0 ? 0 : getSectionIndex(y) + 1;
+    LightSection result = light[index];
+    if (create && result == null) {
+      light[index] = result = new LightSection();
+    }
+    return result == null ? LightSection.DEFAULT : result;
+  }
+
+  private static int getSectionIndex(int y) {
+    return y / 16;
+  }
+
+  public static int getBiomeIndex(int x, int y, int z) {
+    return ((y >> 2) & 63) << 4 | ((z >> 2) & 3) << 2 | ((x >> 2) & 3);
+  }
+}
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleSection.java b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleSection.java
new file mode 100644
index 00000000..cc2c982c
--- /dev/null
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleSection.java
@@ -0,0 +1,69 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package ru.elytrium.elytraproxy.botfilter.server.world.chunk;
+
+import com.google.common.base.Preconditions;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import org.jetbrains.annotations.Nullable;
+import ru.elytrium.elytraproxy.botfilter.protocol.data.storage.BlockStorage;
+import ru.elytrium.elytraproxy.botfilter.protocol.data.storage.BlockStorage19;
+import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
+import ru.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
+
+@RequiredArgsConstructor
+@AllArgsConstructor()
+public class SimpleSection {
+
+  private final BlockStorage blocks;
+  @Getter
+  private long lastUpdate = System.nanoTime();
+
+  public SimpleSection() {
+    this(new BlockStorage19(Version.MINECRAFT_1_17));
+  }
+
+  public SimpleBlock getBlockAt(int x, int y, int z) {
+    checkIndexes(x, y, z);
+    return blocks.get(x, y, z);
+  }
+
+  public void setBlockAt(int x, int y, int z, @Nullable SimpleBlock block) {
+    checkIndexes(x, y, z);
+    blocks.set(x, y, z, block == null ? SimpleBlock.AIR : block);
+    lastUpdate = System.nanoTime();
+  }
+
+  public SimpleSection getSnapshot() {
+    BlockStorage blockStorage = this.blocks.copy();
+    return new SimpleSection(blockStorage, lastUpdate);
+  }
+
+  private void checkIndexes(int x, int y, int z) {
+    Preconditions.checkArgument(checkIndex(x), "x should be between 0 and 15");
+    Preconditions.checkArgument(checkIndex(y), "y should be between 0 and 15");
+    Preconditions.checkArgument(checkIndex(z), "z should be between 0 and 15");
+  }
+
+  private boolean checkIndex(int i) {
+    return i >= 0 && i <= 15;
+  }
+}
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/AlertCommand.java b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/AlertCommand.java
index e5cd0435..e8adb4c3 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/AlertCommand.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/AlertCommand.java
@@ -32,7 +32,6 @@ public class AlertCommand implements SimpleCommand {
   private final ProxyServer server;
   private final String prefix;
 
-
   public AlertCommand(ProxyServer server, String prefix) {
     this.server = server;
     this.prefix = prefix;
@@ -45,27 +44,31 @@ public class AlertCommand implements SimpleCommand {
 
     if (args.length == 0) {
       source.sendMessage(
-              LegacyComponentSerializer
-                      .legacyAmpersand()
-                      .deserialize((
-                              prefix
-                              + Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_MESSAGE_NEEDED)
-                                      .replace("%nl%", "\n")));
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                  prefix
+                  + Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_MESSAGE_NEEDED)
+                      .replace("%nl%", "\n")
+              ));
     } else {
       String message = String.join(" ", args);
       Component component = LegacyComponentSerializer
-                      .legacyAmpersand()
-                      .deserialize((
-                              Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_PREFIX + message)
-                                      .replace("%nl%", "\n"));
+          .legacyAmpersand()
+          .deserialize((
+              Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_PREFIX
+              + message)
+                  .replace("%nl%", "\n")
+          );
       if (server.getAllPlayers().size() == 0) {
         source.sendMessage(
-                LegacyComponentSerializer
-                        .legacyAmpersand()
-                        .deserialize((
-                                prefix
-                                + Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_SERVER_EMPTY)
-                                        .replace("%nl%", "\n")));
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize((
+                    prefix
+                    + Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_SERVER_EMPTY)
+                        .replace("%nl%", "\n")
+                ));
       } else if (server.getAllPlayers().size() >= 1) {
         if (!(source instanceof Player)) {
           source.sendMessage(component);
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/ElytraProxyCommand.java b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/ElytraProxyCommand.java
index 013a3b29..2cf63ba7 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/ElytraProxyCommand.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/ElytraProxyCommand.java
@@ -21,25 +21,33 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.velocitypowered.api.command.CommandSource;
 import com.velocitypowered.api.command.SimpleCommand;
+import com.velocitypowered.api.proxy.Player;
 import com.velocitypowered.proxy.VelocityServer;
-
+import com.velocitypowered.proxy.command.builtin.CommandMessages;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
-
+import java.util.Timer;
+import java.util.TimerTask;
+import lombok.Getter;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import ru.elytrium.elytraproxy.ElytraProxy;
 import ru.elytrium.elytraproxy.config.Settings;
+import ru.elytrium.elytraproxy.stats.Statistics;
 
 public class ElytraProxyCommand implements SimpleCommand {
 
+  @Getter
+  private static final List<ConnectedPlayer> playersWithSpy = new ArrayList<>();
+
   private interface SubCommand {
 
     void execute(final CommandSource source, final String @NonNull [] args);
@@ -61,22 +69,28 @@ public class ElytraProxyCommand implements SimpleCommand {
   public ElytraProxyCommand(VelocityServer server, ElytraProxy elytraProxy) {
     this.commands = ImmutableMap.<String, SubCommand>builder()
         .put("reload", new Reload(server, elytraProxy))
+        .put("stats", new Stats(server))
+        .put("cspy", new CommandSpy())
         .build();
   }
 
   private void usage(CommandSource source) {
     source.sendMessage(Identity.nil(), Component.text("§eThis server is using ElytraProxy"
-            + " that based on Velocity Proxy"));
+          + " that based on Velocity Proxy"));
     source.sendMessage(Identity.nil(), Component.text("§eOriginal Velocity by astei"
-            + " and many-many contributors"));
+          + " and many-many contributors"));
     source.sendMessage(Identity.nil(), Component.text("§eElytraProxy by Elytrium dev team"));
     source.sendMessage(Identity.nil(), Component.text("§dMade With Love ❤"));
     source.sendMessage(Identity.nil(), Component.text("§a"
-            + "https://github.com/Elytrium/ElytraProxy"));
-    if (source.hasPermission("elytraproxy.reload")) {
+          + "https://github.com/Elytrium/ElytraProxy"));
+    if (source.hasPermission("elytraproxy.command.reload")
+        || source.hasPermission("elytraproxy.command.stats")
+        || source.hasPermission("elytraproxy.command.commandspy")) {
       source.sendMessage(Identity.nil(), Component.text("§aCommands: "));
       source.sendMessage(Identity.nil(), Component.text("§6/elytraproxy reload §7-§f"
-              + " reloads proxy server itself, without plugins"));
+          + " reloads proxy server itself, without plugins"));
+      source.sendMessage(Identity.nil(), Component.text("§6/elytraproxy stats §7-§f"
+          + " enables action bars statistics"));
     }
   }
 
@@ -107,9 +121,9 @@ public class ElytraProxyCommand implements SimpleCommand {
 
     if (currentArgs.length == 0) {
       return commands.entrySet().stream()
-              .filter(e -> e.getValue().hasPermission(source, new String[0]))
-              .map(Map.Entry::getKey)
-              .collect(ImmutableList.toImmutableList());
+          .filter(e -> e.getValue().hasPermission(source, new String[0]))
+          .map(Map.Entry::getKey)
+          .collect(ImmutableList.toImmutableList());
     }
 
     if (currentArgs.length == 1) {
@@ -163,30 +177,33 @@ public class ElytraProxyCommand implements SimpleCommand {
       try {
         if (server.reloadConfiguration()) {
           source.sendMessage(Identity.nil(),
-                  LegacyComponentSerializer
-                          .legacyAmpersand()
-                          .deserialize((
-                                  Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                                  + Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_SUCCESS)
-                                          .replace("%nl%", "\n")));
+              LegacyComponentSerializer
+                  .legacyAmpersand()
+                  .deserialize((
+                      Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                      + Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_SUCCESS)
+                          .replace("%nl%", "\n")
+          ));
         } else {
           source.sendMessage(Identity.nil(),
-                  LegacyComponentSerializer
-                          .legacyAmpersand()
-                          .deserialize((
-                                  Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                                  + Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE)
-                                          .replace("%nl%", "\n")));
+              LegacyComponentSerializer
+                  .legacyAmpersand()
+                  .deserialize((
+                      Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                      + Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE)
+                          .replace("%nl%", "\n")
+                  ));
         }
       } catch (Exception e) {
         logger.error("Unable to reload configuration", e);
         source.sendMessage(Identity.nil(),
-                LegacyComponentSerializer
-                        .legacyAmpersand()
-                        .deserialize((
-                                Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
-                                + Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE)
-                                        .replace("%nl%", "\n")));
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize((
+                    Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                    + Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE)
+                        .replace("%nl%", "\n")
+                ));
       }
 
       elytraProxy.reload(source);
@@ -197,4 +214,116 @@ public class ElytraProxyCommand implements SimpleCommand {
       return source.hasPermission("elytraproxy.command.reload");
     }
   }
+
+  private static class Stats implements SubCommand {
+
+    private final List<ConnectedPlayer> playersWithStats = new ArrayList<>();
+
+    private Stats(VelocityServer server) {
+
+      new Timer().scheduleAtFixedRate(new TimerTask() {
+        @Override
+        public void run() {
+          try {
+            if (server.getElytraProxy() == null) {
+              return;
+            }
+            Statistics statistics = server.getElytraProxy().getStatistics();
+            for (ConnectedPlayer player : playersWithStats) {
+              player.sendActionBar(
+                  LegacyComponentSerializer
+                      .legacyAmpersand()
+                      .deserialize((
+                          Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_FORMAT)
+                          .replace("%nl%", "\n")
+                          .replace("{0}", String.valueOf(statistics.getBlockedConnections()))
+                          .replace("{1}", String.valueOf(statistics.getConnectionsPerSecond()))
+                          .replace("{2}", String.valueOf(statistics.getPingsPerSecond()))
+                          .replace("{3}", String.valueOf(statistics.getTotalConnectionsPerSecond()))
+                      ));
+            }
+          } catch (Exception e) {
+            e.printStackTrace();
+          }
+        }
+      }, 120, 120);
+    }
+
+    @Override
+    public void execute(CommandSource source, String @NonNull [] args) {
+      if (!(source instanceof Player)) {
+        source.sendMessage(CommandMessages.PLAYERS_ONLY);
+        return;
+      }
+      ConnectedPlayer player = (ConnectedPlayer) source;
+      if (playersWithStats.contains(player)) {
+        source.sendMessage(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize((
+                    Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                    + Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_DISABLED)
+                        .replace("%nl%", "\n")
+                ));
+        playersWithStats.remove(player);
+      } else {
+        source.sendMessage(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize((
+                    Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                    + Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_ENABLED)
+                        .replace("%nl%", "\n")
+                ));
+        playersWithStats.add(player);
+      }
+    }
+
+    @Override
+    public boolean hasPermission(final CommandSource source, final String @NonNull [] args) {
+      return source.hasPermission("elytraproxy.command.stats");
+    }
+  }
+
+  private static class CommandSpy implements SubCommand {
+
+
+    private CommandSpy() {
+    }
+
+    @Override
+    public void execute(CommandSource source, String @NonNull [] args) {
+      if (!(source instanceof Player)) {
+        source.sendMessage(CommandMessages.PLAYERS_ONLY);
+        return;
+      }
+      ConnectedPlayer player = (ConnectedPlayer) source;
+      if (playersWithSpy.contains(player)) {
+        source.sendMessage(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize((
+                    Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                    + Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_DISABLED)
+                        .replace("%nl%", "\n")
+                ));
+        playersWithSpy.remove(player);
+      } else {
+        source.sendMessage(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize((
+                    Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                    + Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_ENABLED)
+                        .replace("%nl%", "\n")
+                ));
+        playersWithSpy.add(player);
+      }
+    }
+
+    @Override
+    public boolean hasPermission(final CommandSource source, final String @NonNull [] args) {
+      return source.hasPermission("elytraproxy.command.commandspy");
+    }
+  }
 }
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/FindCommand.java b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/FindCommand.java
index 1454ced2..89e4adfd 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/FindCommand.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/FindCommand.java
@@ -22,11 +22,9 @@ import com.velocitypowered.api.command.SimpleCommand;
 import com.velocitypowered.api.proxy.Player;
 import com.velocitypowered.api.proxy.ProxyServer;
 import com.velocitypowered.api.proxy.ServerConnection;
-
 import java.util.List;
 import java.util.Optional;
 import java.util.stream.Collectors;
-
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import ru.elytrium.elytraproxy.config.Settings;
 
@@ -46,15 +44,15 @@ public class FindCommand implements SimpleCommand {
 
     if (args.length == 0) {
       return server.getAllPlayers()
-              .stream()
-              .map(Player::getUsername)
-              .collect(Collectors.toList());
+          .stream()
+          .map(Player::getUsername)
+          .collect(Collectors.toList());
     } else {
       return server.getAllPlayers()
-              .stream()
-              .map(Player::getUsername)
-              .filter(s -> s.startsWith(args[0]))
-              .collect(Collectors.toList());
+          .stream()
+          .map(Player::getUsername)
+          .filter(s -> s.startsWith(args[0]))
+          .collect(Collectors.toList());
     }
   }
 
@@ -65,35 +63,38 @@ public class FindCommand implements SimpleCommand {
 
     if (args.length == 0) {
       source.sendMessage(
-              LegacyComponentSerializer
-                      .legacyAmpersand()
-                      .deserialize((
-                              prefix
-                              + Settings.IMP.MESSAGES.ELYTRAPROXY.FIND_USERNAME_NEEDED)
-                                      .replace("%nl%", "\n")));
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                  prefix
+                  + Settings.IMP.MESSAGES.ELYTRAPROXY.FIND_USERNAME_NEEDED)
+                      .replace("%nl%", "\n")
+              ));
     } else {
       Optional<Player> player = server.getPlayer(args[0]);
       if (player.isPresent()) {
         Player pl = player.get();
         Optional<ServerConnection> server = pl.getCurrentServer();
         server.ifPresent(srv -> source.sendMessage(
-                        LegacyComponentSerializer
-                                .legacyAmpersand()
-                                .deserialize((
-                                        prefix
-                                        + Settings.IMP.MESSAGES.ELYTRAPROXY.FIND_USER_ONLINE_AT)
-                                                .replace("%nl%", "\n")
-                                                .replace("{0}", pl.getUsername())
-                                                .replace("{1}", srv.getServerInfo().getName()))));
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize((
+                    prefix
+                    + Settings.IMP.MESSAGES.ELYTRAPROXY.FIND_USER_ONLINE_AT)
+                        .replace("%nl%", "\n")
+                        .replace("{0}", pl.getUsername())
+                        .replace("{1}", srv.getServerInfo().getName())
+                )));
       } else {
         source.sendMessage(
-                LegacyComponentSerializer
-                        .legacySection()
-                        .deserialize((
-                                prefix
-                                + Settings.IMP.MESSAGES.ELYTRAPROXY.USER_NOT_ONLINE)
-                                        .replace("%nl%", "\n")
-                                        .replace("{0}", args[0])));
+            LegacyComponentSerializer
+                .legacySection()
+                .deserialize((
+                    prefix
+                    + Settings.IMP.MESSAGES.ELYTRAPROXY.USER_NOT_ONLINE)
+                        .replace("%nl%", "\n")
+                        .replace("{0}", args[0])
+                ));
       }
     }
   }
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/MessageCommand.java b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/MessageCommand.java
index 2de45b91..251733ff 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/MessageCommand.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/MessageCommand.java
@@ -23,14 +23,13 @@ import com.velocitypowered.api.command.SimpleCommand;
 import com.velocitypowered.api.proxy.Player;
 import com.velocitypowered.api.proxy.ProxyServer;
 import com.velocitypowered.api.proxy.ServerConnection;
-
 import java.util.Arrays;
 import java.util.List;
 import java.util.Optional;
 import java.util.stream.Collectors;
-
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import ru.elytrium.elytraproxy.config.Settings;
 
 public class MessageCommand implements SimpleCommand {
 
@@ -50,11 +49,11 @@ public class MessageCommand implements SimpleCommand {
       Optional<ServerConnection> serverConnection = ((Player) source).getCurrentServer();
       if (serverConnection.isPresent()) {
         return serverConnection.get()
-                .getServer()
-                .getPlayersConnected()
-                .stream()
-                .map(Player::getUsername)
-                .collect(Collectors.toList());
+            .getServer()
+            .getPlayersConnected()
+            .stream()
+            .map(Player::getUsername)
+            .collect(Collectors.toList());
       }
     }
     return ImmutableList.of();
@@ -66,16 +65,26 @@ public class MessageCommand implements SimpleCommand {
     final String[] args = invocation.arguments();
 
     if (args.length == 0) {
-      source.sendMessage(LegacyComponentSerializer.legacyAmpersand().deserialize(
-                prefix
-                        + "§cУкажите имя игрока, которому вы хотите отправить сообщение"));
+      source.sendMessage(
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                  prefix
+                  + "&cУкажите имя игрока, которому вы хотите отправить сообщение")
+                      .replace("%nl%", "\n")
+              ));
       return;
     }
 
     if (args.length == 1) {
-      source.sendMessage(LegacyComponentSerializer.legacyAmpersand().deserialize(
-                prefix
-                        + "§cУкажите сообщение, которое вы хотите отправить игроку"));
+      source.sendMessage(
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                  prefix
+                  + "&cУкажите сообщение, которое вы хотите отправить игроку")
+                      .replace("%nl%", "\n")
+              ));
       return;
     }
 
@@ -83,17 +92,31 @@ public class MessageCommand implements SimpleCommand {
     if (playerOptional.isPresent()) {
       Player player = playerOptional.get();
       String message = String.join(" ", Arrays.copyOfRange(args, 1, args.length - 1));
-      String author = (source instanceof Player) ? ((Player) source).getUsername() : "Консоль";
-
-      Component component = LegacyComponentSerializer.legacyAmpersand().deserialize(
+      String author = (source instanceof Player) ? ((Player) source).getUsername()
+          : ((
+          Settings.IMP.MESSAGES.ELYTRAPROXY.IF_CONSOLE)
+          .replace("%nl%", "\n")
+          .replace("&", "§")
+      );
+
+      Component component = LegacyComponentSerializer
+          .legacyAmpersand()
+          .deserialize((
               prefix
-                      + "§d§l[" + author + "->" + player.getUsername() + "] " + message);
+              + "&d&l[" + author + "->" + player.getUsername() + "] " + message)
+                  .replace("%nl%", "\n")
+          );
 
       player.sendMessage(component);
     } else {
-      source.sendMessage(LegacyComponentSerializer.legacyAmpersand().deserialize(
-                prefix
-                        + "§cИгрок не найден, или находится вне сети"));
+      source.sendMessage(
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                  prefix
+                  + "&cИгрок не найден, или находится вне сети")
+                      .replace("%nl%", "\n")
+              ));
     }
   }
 
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/SendCommand.java b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/SendCommand.java
index a85b143e..eb2ad91f 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/SendCommand.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/SendCommand.java
@@ -51,24 +51,24 @@ public class SendCommand implements SimpleCommand {
 
     if (args.length == 0) {
       List<String> toReturn = server.getAllPlayers()
-              .stream()
-              .map(Player::getUsername)
-              .collect(Collectors.toList());
+          .stream()
+          .map(Player::getUsername)
+          .collect(Collectors.toList());
       List<String> serverNames = server.getAllServers()
-              .stream()
-              .map(RegisteredServer::getServerInfo)
-              .map(ServerInfo::getName)
-              .collect(Collectors.toList());
+          .stream()
+          .map(RegisteredServer::getServerInfo)
+          .map(ServerInfo::getName)
+          .collect(Collectors.toList());
       serverNames.add("all");
       serverNames.add("current");
       toReturn.addAll(serverNames);
       return toReturn;
     } else {
       return server.getAllServers()
-              .stream()
-              .map(RegisteredServer::getServerInfo)
-              .map(ServerInfo::getName)
-              .collect(Collectors.toList());
+          .stream()
+          .map(RegisteredServer::getServerInfo)
+          .map(ServerInfo::getName)
+          .collect(Collectors.toList());
     }
   }
 
@@ -79,12 +79,13 @@ public class SendCommand implements SimpleCommand {
 
     if (args.length != 2) {
       source.sendMessage(
-              LegacyComponentSerializer
-                      .legacyAmpersand()
-                      .deserialize((
-                              prefix
-                              + Settings.IMP.MESSAGES.ELYTRAPROXY.SEND_NOT_ENOUGH_ARGUMENTS)
-                                      .replace("%nl%", "\n")));
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                  prefix
+                  + Settings.IMP.MESSAGES.ELYTRAPROXY.SEND_NOT_ENOUGH_ARGUMENTS)
+                      .replace("%nl%", "\n")
+              ));
       return;
     }
 
@@ -95,17 +96,20 @@ public class SendCommand implements SimpleCommand {
     }
 
     String sender = (source instanceof Player) ? ((Player) source).getUsername()
-            : ((Settings.IMP.MESSAGES.ELYTRAPROXY.IF_CONSOLE)
-                    .replace("%nl%", "\n")
-                    .replace("&", "§"));
+        : ((
+            Settings.IMP.MESSAGES.ELYTRAPROXY.IF_CONSOLE)
+                .replace("%nl%", "\n")
+                .replace("&", "§")
+    );
     Component summoned = LegacyComponentSerializer
-            .legacyAmpersand()
-            .deserialize((
-                    prefix
-                    + Settings.IMP.MESSAGES.ELYTRAPROXY.SEND_YOU_GOT_SUMMONED)
-                            .replace("%nl%", "\n")
-                            .replace("{0}", target.getServerInfo().getName())
-                            .replace("{1}", sender));
+        .legacyAmpersand()
+        .deserialize((
+            prefix
+            + Settings.IMP.MESSAGES.ELYTRAPROXY.SEND_YOU_GOT_SUMMONED)
+                .replace("%nl%", "\n")
+                .replace("{0}", target.getServerInfo().getName())
+                .replace("{1}", sender)
+        );
 
     switch (args[0].toLowerCase()) {
       case "all":
@@ -135,13 +139,14 @@ public class SendCommand implements SimpleCommand {
           player.sendMessage(summoned);
         } else {
           source.sendMessage(
-                  LegacyComponentSerializer
-                          .legacyAmpersand()
-                          .deserialize((
-                                  prefix
-                                  + Settings.IMP.MESSAGES.ELYTRAPROXY.USER_NOT_ONLINE)
-                                          .replace("%nl%", "\n")
-                                          .replace("{0}", args[0])));
+              LegacyComponentSerializer
+                  .legacyAmpersand()
+                  .deserialize((
+                      prefix
+                      + Settings.IMP.MESSAGES.ELYTRAPROXY.USER_NOT_ONLINE)
+                          .replace("%nl%", "\n")
+                          .replace("{0}", args[0])
+                  ));
         }
         break;
     }
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/config/Config.java b/proxy/src/main/java/ru/elytrium/elytraproxy/config/Config.java
index 69861ff3..06720f23 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/config/Config.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/config/Config.java
@@ -18,7 +18,6 @@
 package ru.elytrium.elytraproxy.config;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -42,7 +41,6 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
-
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import ru.elytrium.elytraproxy.config.helpers.Configuration;
@@ -51,6 +49,7 @@ import ru.elytrium.elytraproxy.config.helpers.YamlConfiguration;
 
 @SuppressFBWarnings("RV_RETURN_VALUE_IGNORED")
 public class Config {
+
   private final Logger logger = LogManager.getLogger("ElytraProxy");
 
   public Config() {
@@ -115,7 +114,7 @@ public class Config {
     Configuration yml;
     try {
       try (InputStreamReader reader = new InputStreamReader(
-              new FileInputStream(file), StandardCharsets.UTF_8)) {
+          new FileInputStream(file), StandardCharsets.UTF_8)) {
         yml = ConfigurationProvider.getProvider(YamlConfiguration.class).load(reader);
       }
     } catch (IOException ex) {
@@ -144,12 +143,13 @@ public class Config {
 
       Files.write(tempCfg, lines, StandardCharsets.UTF_8, StandardOpenOption.CREATE);
       try {
-        Files.move(
-            tempCfg, configFile,
-            StandardCopyOption.REPLACE_EXISTING,
-            StandardCopyOption.ATOMIC_MOVE);
+        Files.move(tempCfg, configFile,
+            StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.ATOMIC_MOVE
+        );
       } catch (AtomicMoveNotSupportedException e) {
-        Files.move(tempCfg, configFile, StandardCopyOption.REPLACE_EXISTING);
+        Files.move(tempCfg, configFile,
+            StandardCopyOption.REPLACE_EXISTING
+        );
       }
     } catch (IOException e) {
       logger.warn("Error:", e);
@@ -193,7 +193,7 @@ public class Config {
           save(lines, current, value, indent + 2);
         } else {
           lines.add(spacing + toNodeName(field.getName() + ": ")
-                  + toYamlString(field.get(instance), spacing));
+              + toYamlString(field.get(instance), spacing));
         }
       }
     } catch (RuntimeException e) {
@@ -225,8 +225,7 @@ public class Config {
   @Retention(RetentionPolicy.RUNTIME)
   @Target({ElementType.FIELD, ElementType.TYPE})
   public @interface Comment {
-
-      String[] value();
+    String[] value();
   }
 
   /**
@@ -273,13 +272,9 @@ public class Config {
       Field field = instance.getClass().getField(toFieldName(split[split.length - 1]));
       setAccessible(field);
       return field;
-    } catch (IllegalAccessException
-            | NoSuchFieldException
-            | SecurityException
-            | NoSuchMethodException
-            | InvocationTargetException e) {
-      logger.warn("Invalid config field: {} for {}", new Object[]
-      {
+    } catch (IllegalAccessException | NoSuchFieldException | SecurityException
+        | NoSuchMethodException | InvocationTargetException e) {
+      logger.warn("Invalid config field: {} for {}", new Object[] {
           String.join(".", split), toNodeName(instance.getClass().getSimpleName())
       });
       return null;
@@ -364,7 +359,7 @@ public class Config {
    * @throws IllegalAccessException ...
    */
   private void setAccessible(Field field) throws NoSuchFieldException,
-          IllegalAccessException, NoSuchMethodException, InvocationTargetException {
+      IllegalAccessException, NoSuchMethodException, InvocationTargetException {
     field.setAccessible(true);
     int modifiers = field.getModifiers();
     if (Modifier.isFinal(modifiers)) {
@@ -375,7 +370,7 @@ public class Config {
       } catch (NoSuchFieldException e) {
         // Java 12 compatibility *this is fine*
         Method getDeclaredFields0 = Class.class.getDeclaredMethod(
-                "getDeclaredFields0", boolean.class);
+            "getDeclaredFields0", boolean.class);
         getDeclaredFields0.setAccessible(true);
         Field[] fields = (Field[]) getDeclaredFields0.invoke(Field.class, false);
         for (Field classField : fields) {
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/config/Settings.java b/proxy/src/main/java/ru/elytrium/elytraproxy/config/Settings.java
index 5115678e..7bca10a4 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/config/Settings.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/config/Settings.java
@@ -39,22 +39,31 @@ public class Settings extends Config {
     @Create
     public MESSAGES.VELOCITY VELOCITY;
 
-    @Comment("alert-prefix, command-spy-format, log-command-executions-format, protocol-blocked, glist-format-view-all and nick-blocked doesn't have prefix.")
+    @Comment("alert-prefix, stats-format, command-spy-format, log-command-executions-format, protocol-blocked, glist-format-view-all and nick-blocked doesn't have prefix.")
     public static class ELYTRAPROXY {
       public String PREFIX = "&5&l[ElytraProxy]&f ";
       public String ALERT_PREFIX = "&8[&4Alert&8]&f ";
       public String IF_CONSOLE = "CONSOLE";
       public String ALERT_MESSAGE_NEEDED = "You must supply a message.";
       public String ALERT_SERVER_EMPTY = "Server is empty.";
+      public String STATS_FORMAT = "&c&lTotal Blocked: &6&l{0}&c&l | Connections Per Second: &6&l{1}&c&l | Pings Per Second: &6&l{2}&c&l | Total Connections Per Second: &6&l{3}";
+      public String STATS_ENABLED = "Now you see statistics in your action bar.";
+      public String STATS_DISABLED = "You're no longer see statistics in your action bar.";
       public String FIND_USERNAME_NEEDED = "Please follow this command by a user name.";
       public String FIND_USER_ONLINE_AT = "&6{0} &fis online at &6{1}";
       public String USER_NOT_ONLINE = "&6{0} &fis not online.";
       public String SEND_YOU_GOT_SUMMONED = "Summoned to &6{0} &fby &6{1}";
       public String SEND_NOT_ENOUGH_ARGUMENTS = "Not enough arguments, usage: &6/send <server|player|all|current> <target>";
       public String COMMAND_SPY_FORMAT = "&7 — Player {0} executed command {1}";
+      public String COMMAND_SPY_ENABLED = "Now you see commands from all server in your chat.";
+      public String COMMAND_SPY_DISABLED = "You're no longer see statistics in your chat.";
       public String CONSOLE_LOG_COMMAND_EXECUTIONS_FORMAT = "{0} -> executed command {1}";
       public String PROTOCOL_BLOCKED = "&c1.7.x not supported";
       public String NICK_BLOCKED = "&cYour nickname contains forbidden phrases.";
+      public String CLIENT_CHECK_SETTINGS = "&cYour client doesn't send settings packets.";
+      public String CLIENT_CHECK_SETTINGS_CHAT_COLOR = "&cPlease enable colors in chat settings to join the server.%nl%Options > Chat Settings.";
+      public String CLIENT_CHECK_SETTINGS_SKIN_PARTS = "&cPlease enable any option from the skin customization to join the server.%nl%Options > Skin Customization.";
+      public String CLIENT_CHECK_BRAND = "&cYour client doesn't send brand packets.";
       public String RELOAD_SUCCESS = "ElytraProxy configuration successfully reloaded.";
       public String RELOAD_FAILURE = "&cUnable to reload your ElytraProxy configuration. Check the console for more details.";
       /*
@@ -63,8 +72,8 @@ public class Settings extends Config {
     }
 
     @Comment({
-            "You may found other languages translations here: ",
-            "https://github.com/VelocityPowered/Velocity/tree/dev/2.0.0/proxy/src/main/resources/com/velocitypowered/proxy/l10n"
+        "You may found other languages translations here: ",
+        "https://github.com/VelocityPowered/Velocity/tree/dev/2.0.0/proxy/src/main/resources/com/velocitypowered/proxy/l10n"
     })
     public static class VELOCITY {
       @Create
@@ -119,29 +128,27 @@ public class Settings extends Config {
     @Comment("How many attempts are allowed before rate limiting?")
     public int LOGIN_RATELIMIT_ATTEMPTS = 4;
     @Comment({
-            "The list of protocols can be found here https://wiki.vg/Protocol_version_numbers",
-            "For example, the list contains all protocols of version 1.7.x",
-            "That is, with version 1.7 will not be able to connect"
+        "The list of protocols can be found here https://wiki.vg/Protocol_version_numbers",
+        "For example, the list contains all protocols of version 1.7.x",
+        "That is, with version 1.7 will not be able to connect"
     })
     public List<Integer> BANNED_PROTOCOLS = Arrays.asList(5, 4, 3, 2, 1, 0);
     @Comment({
-            "Changes server brand in F3",
-            "Placeholders:",
-            "{ServerBrand} - returns the server on which the player is located",
-            "{ProxyBrand} - returns the proxy original brand"
+        "Changes server brand in F3",
+        "Placeholders:",
+        "{ServerBrand} - returns the server on which the player is located",
+        "{ProxyBrand} - returns the proxy original brand"
     })
     public String BRAND = "{ServerBrand} => {ProxyBrand} (by ElytraDev)";
     @Comment("Changes server version in ping request")
     public String PING_VERSION = "ElytraProxy (by ElytraDev)";
-    @Comment("Enables command spy for players with permission elytraproxy.commandspy")
-    public boolean ENABLE_COMMAND_SPY_IN_CHAT = true;
 
     @Create
     public MAIN_SETTINGS.HOSTNAMES_MANAGER HOSTNAMES_MANAGER;
 
     @Comment({
-            "Allows you to reject connection to the server for all domains except yours and direct ip",
-            "Most likely does not work with SRV records"
+        "Allows you to reject connection to the server for all domains except yours and direct ip",
+        "Most likely does not work with SRV records"
     })
     public static class HOSTNAMES_MANAGER {
       public boolean ENABLE = false;
@@ -153,6 +160,8 @@ public class Settings extends Config {
       @Comment("IP's in this list will be ignored in check.")
       public List<String> IGNORED_IPS = Arrays.asList("127.0.0.1", "your-haproxy-ip");
     }
+    @Comment("Players who are on these servers will not be counted in ping request and in the query request.")
+    public List<String> IGNORE_ONLINE_AT = Arrays.asList("auth");
   }
 
   @Create
@@ -160,12 +169,14 @@ public class Settings extends Config {
 
   public static class ANTIBOT {
     public boolean ENABLE = true;
+    public boolean CHECK_CLIENT_SETTINGS = true;
+    public boolean CHECK_CLIENT_BRAND = true;
     @Comment({
-            "If the player's nickname contains something from this list, hes connection will be rejected",
-            "In lowercase"
+        "If the player's nickname contains something from this list, hes connection will be rejected",
+        "In lowercase"
     })
     public List<String> BANNED_NICK_PATTERNS = Arrays.asList(
-          "dropbot", "mcspam", "mcdrop", "mcrage", "mcstorm", "extremebot", "cipher_bot", "biboran"
+        "dropbot", "mcspam", "mcdrop", "mcrage", "mcstorm", "extremebot", "cipher_bot", "biboran"
     );
   }
 
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/config/helpers/Configuration.java b/proxy/src/main/java/ru/elytrium/elytraproxy/config/helpers/Configuration.java
index 1aaffedf..a4e85a4d 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/config/helpers/Configuration.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/config/helpers/Configuration.java
@@ -64,7 +64,7 @@ public final class Configuration {
 
       if (entry.getValue() instanceof Map) {
         this.self.put(key, new Configuration((Map) entry.getValue(),
-                (defaults == null) ? null : defaults.getSection(key)));
+            (defaults == null) ? null : defaults.getSection(key)));
       } else {
         this.self.put(key, entry.getValue());
       }
@@ -125,7 +125,7 @@ public final class Configuration {
   public void set(String path, Object value) {
     if (value instanceof Map) {
       value = new Configuration((Map) value,
-              (defaults == null) ? null : defaults.getSection(path));
+          (defaults == null) ? null : defaults.getSection(path));
     }
 
     Configuration section = getSectionFor(path);
@@ -144,8 +144,8 @@ public final class Configuration {
   public Configuration getSection(String path) {
     Object def = getDefault(path);
     return (Configuration) get(path,
-            (def instanceof Configuration) ? def : new Configuration((
-                    defaults == null) ? null : defaults.getSection(path)));
+        (def instanceof Configuration) ? def : new Configuration((
+            defaults == null) ? null : defaults.getSection(path)));
   }
 
   /**
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/config/helpers/ConfigurationProvider.java b/proxy/src/main/java/ru/elytrium/elytraproxy/config/helpers/ConfigurationProvider.java
index 5f4dc5f7..6928c64a 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/config/helpers/ConfigurationProvider.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/config/helpers/ConfigurationProvider.java
@@ -44,7 +44,7 @@ import java.util.Map;
 public abstract class ConfigurationProvider {
 
   private static final Map<Class<? extends ConfigurationProvider>,
-          ConfigurationProvider> providers = new HashMap<>();
+      ConfigurationProvider> providers = new HashMap<>();
 
   static {
     try {
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/config/helpers/YamlConfiguration.java b/proxy/src/main/java/ru/elytrium/elytraproxy/config/helpers/YamlConfiguration.java
index 34fa8a99..0a63a153 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/config/helpers/YamlConfiguration.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/config/helpers/YamlConfiguration.java
@@ -34,7 +34,6 @@
 package ru.elytrium.elytraproxy.config.helpers;
 
 import com.google.common.base.Charsets;
-
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
@@ -45,7 +44,6 @@ import java.io.Reader;
 import java.io.Writer;
 import java.util.LinkedHashMap;
 import java.util.Map;
-
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.yaml.snakeyaml.DumperOptions;
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/database/MySqlDatabase.java b/proxy/src/main/java/ru/elytrium/elytraproxy/database/MySqlDatabase.java
index 4ea1015e..5f70bb3d 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/database/MySqlDatabase.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/database/MySqlDatabase.java
@@ -18,7 +18,6 @@
 package ru.elytrium.elytraproxy.database;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.sql.Connection;
@@ -34,6 +33,7 @@ import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
 public class MySqlDatabase extends Database {
+
   private final Connection connection;
 
   /**
@@ -49,14 +49,14 @@ public class MySqlDatabase extends Database {
                        String user,
                        String password) throws SQLException {
     String url = "jdbc:mysql://" + host + "/" + database
-            + "?autoReconnect=true&cmaxReconnets=5&initialTimeout=1&useSSL=false";
+        + "?autoReconnect=true&cmaxReconnets=5&initialTimeout=1&useSSL=false";
 
     this.connection = DriverManager.getConnection(url, user, password);
   }
 
   @Override
   @SuppressFBWarnings(value = "OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE",
-                      justification = "We don't need completion of query here")
+      justification = "We don't need completion of query here")
   public void query(String query) {
     try {
       Statement statement = connection.createStatement();
@@ -70,8 +70,7 @@ public class MySqlDatabase extends Database {
   @Override
   public void makeTable(String table, Map<String, String> keys) {
     query("CREATE TABLE IF NOT EXISTS " + table + " ("
-            + keyFromStream(keys.entrySet().stream().map(e -> e.getKey() + " " + e.getValue()))
-        + ")");
+        + keyFromStream(keys.entrySet().stream().map(e -> e.getKey() + " " + e.getValue())) + ")");
   }
 
   @Override
@@ -107,11 +106,8 @@ public class MySqlDatabase extends Database {
   public <T> void insert(String table, T toInsert, Class<T> type, boolean update) {
     try {
       insertMap(table, serializeToMap(toInsert, type), update);
-    } catch (SQLException
-            | InstantiationException
-            | IllegalAccessException
-            | InvocationTargetException
-            | NoSuchMethodException e) {
+    } catch (SQLException | InstantiationException | IllegalAccessException
+        | InvocationTargetException | NoSuchMethodException e) {
       e.printStackTrace();
     }
   }
@@ -141,11 +137,8 @@ public class MySqlDatabase extends Database {
         statement.close();
         return null;
       }
-    } catch (SQLException
-            | InstantiationException
-            | IllegalAccessException
-            | InvocationTargetException
-            | NoSuchMethodException e) {
+    } catch (SQLException | InstantiationException | IllegalAccessException
+        | InvocationTargetException | NoSuchMethodException e) {
 
       e.printStackTrace();
     }
@@ -168,11 +161,8 @@ public class MySqlDatabase extends Database {
 
       statement.close();
       return resultList;
-    } catch (SQLException
-            | InstantiationException
-            | IllegalAccessException
-            | InvocationTargetException
-            | NoSuchMethodException e) {
+    } catch (SQLException | InstantiationException | IllegalAccessException
+        | InvocationTargetException | NoSuchMethodException e) {
 
       e.printStackTrace();
     }
@@ -181,11 +171,11 @@ public class MySqlDatabase extends Database {
   }
 
   private <T> Map<String, Object> serializeToMap(T from, Class<T> type)
-          throws NoSuchMethodException,
-          IllegalAccessException,
-          InvocationTargetException,
-          InstantiationException,
-          SQLException {
+      throws NoSuchMethodException,
+      IllegalAccessException,
+      InvocationTargetException,
+      InstantiationException,
+      SQLException {
 
     Map<String, Object> map = new HashMap<>();
 
@@ -200,11 +190,11 @@ public class MySqlDatabase extends Database {
   }
 
   private <T> T serializeFromSet(ResultSet set, Class<T> type)
-          throws NoSuchMethodException,
-          IllegalAccessException,
-          InvocationTargetException,
-          InstantiationException,
-          SQLException {
+      throws NoSuchMethodException,
+      IllegalAccessException,
+      InvocationTargetException,
+      InstantiationException,
+      SQLException {
 
     T result = type.getConstructor().newInstance();
 
@@ -220,13 +210,13 @@ public class MySqlDatabase extends Database {
 
   private String keyFromStream(Stream<Object> stream) {
     return stream
-            .map(Object::toString)
-            .collect(Collectors.joining(", "));
+        .map(Object::toString)
+        .collect(Collectors.joining(", "));
   }
 
   private String entryFromStream(Stream<Map.Entry<String, Object>> stream, String delimiter) {
     return stream
-            .map(entry -> entry.getKey() + " = " + entry.getValue())
-            .collect(Collectors.joining(delimiter));
+        .map(entry -> entry.getKey() + " = " + entry.getValue())
+        .collect(Collectors.joining(delimiter));
   }
 }
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/stats/Statistics.java b/proxy/src/main/java/ru/elytrium/elytraproxy/stats/Statistics.java
new file mode 100644
index 00000000..d60ebed8
--- /dev/null
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/stats/Statistics.java
@@ -0,0 +1,92 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package ru.elytrium.elytraproxy.stats;
+
+import java.util.Timer;
+import java.util.TimerTask;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicLong;
+
+public class Statistics {
+
+  private final AtomicLong blockedConnections = new AtomicLong(0L);
+  private final AtomicInteger connectionsPerSecond = new AtomicInteger();
+  private final AtomicInteger pingsPerSecond = new AtomicInteger();
+  private final AtomicInteger totalConnectionsPerSecond = new AtomicInteger();
+
+  public void addBlockedConnection() {
+    blockedConnections.incrementAndGet();
+  }
+
+  public long getBlockedConnections() {
+    return blockedConnections.longValue();
+  }
+
+  public int getTotalConnectionsPerSecond() {
+    return totalConnectionsPerSecond.get();
+  }
+
+  public int getConnectionsPerSecond() {
+    return connectionsPerSecond.get();
+  }
+
+  public void addConnectionPerSecond() {
+    connectionsPerSecond.incrementAndGet();
+  }
+
+  public int getPingsPerSecond() {
+    return pingsPerSecond.get();
+  }
+
+  public void addPingPerSecond() {
+    pingsPerSecond.incrementAndGet();
+  }
+
+  public void addTotalConnectionPerSecond() {
+    totalConnectionsPerSecond.incrementAndGet();
+  }
+
+  public void startUpdating() {
+    new Timer().scheduleAtFixedRate(new TimerTask() {
+      int cpsBefore = 0;
+      int ppsBefore = 0;
+      int totalBefore = 0;
+
+      public void run() {
+        int currentCps = connectionsPerSecond.get();
+        if (currentCps > 0) {
+          connectionsPerSecond.set(connectionsPerSecond.get() - cpsBefore);
+          cpsBefore = connectionsPerSecond.get();
+        }
+
+        int currentPps = pingsPerSecond.get();
+        if (currentPps > 0) {
+          pingsPerSecond.set(pingsPerSecond.get() - ppsBefore);
+          ppsBefore = pingsPerSecond.get();
+        }
+
+        int total = totalConnectionsPerSecond.get();
+        if (total > 0) {
+          totalConnectionsPerSecond.set(totalConnectionsPerSecond.get() - totalBefore);
+          totalBefore = totalConnectionsPerSecond.get();
+        }
+
+      }
+    }, 1000, 1000);
+  }
+}
-- 
2.24.1.windows.2

