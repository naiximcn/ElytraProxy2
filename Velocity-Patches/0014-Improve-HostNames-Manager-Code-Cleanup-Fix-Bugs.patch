From 29c0259a0ece3f6bffdfeb5165da4cd3aa48aa84 Mon Sep 17 00:00:00 2001
From: mdxd44 <mdxd44@ely.su>
Date: Sat, 5 Jun 2021 17:50:10 +0900
Subject: [PATCH] Improve HostNames Manager, Code Cleanup, Fix Bugs


diff --git a/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java b/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
index e6c4398c..aa43731c 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
@@ -220,8 +220,6 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
 
     this.doStartupConfigLoad();
 
-    this.elytraProxy = new ElytraProxy(this);
-
     for (Map.Entry<String, String> entry : configuration.getServers().entrySet()) {
       servers.register(new ServerInfo(entry.getKey(), AddressUtil.parseAddress(entry.getValue())));
     }
@@ -250,6 +248,8 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     }
 
     Metrics.VelocityMetrics.startMetrics(this, configuration.getMetrics());
+
+    this.elytraProxy = new ElytraProxy(this);
   }
 
   private void registerTranslations() {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
index 2219b43e..fa51244f 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
@@ -143,34 +143,48 @@ public class MinecraftConnection extends ChannelInboundHandlerAdapter {
         // ElytraProxy Start
         if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.ENABLE) {
           InetSocketAddress adr = (InetSocketAddress) ctx.channel().localAddress();
-          String notifymsg = "{} tried to connect using ip {}";
-          if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.WHITELIST) {
-            if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(
-                    adr.getHostName())) {
-              server.getElytraProxy().getLogger().info(notifymsg,
-                      ctx.channel().remoteAddress(),
-                      adr.getHostName());
-              return;
-            } else if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(
-                    adr.getAddress().getHostAddress())) {
-              server.getElytraProxy().getLogger().info(notifymsg,
-                      ctx.channel().remoteAddress(),
-                      adr.getAddress().getHostAddress());
-              return;
-            }
-          } else {
-            if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(
-                    adr.getHostName())) {
-              server.getElytraProxy().getLogger().info(notifymsg,
-                      ctx.channel().remoteAddress(),
-                      adr.getHostName());
-              return;
-            } else if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(
-                    adr.getAddress().getHostAddress())) {
-              server.getElytraProxy().getLogger().info(notifymsg,
-                      ctx.channel().remoteAddress(),
-                      adr.getAddress().getHostAddress());
-              return;
+          InetSocketAddress adr1 = (InetSocketAddress) ctx.channel().remoteAddress();
+          String notifymsg = "{} tried to connect using {}";
+          if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.IGNORED_IPS.contains(
+                  adr1.getAddress().getHostAddress())) {
+            if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.WHITELIST) {
+              if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.IPS_CHECK) {
+                if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(
+                        adr.getAddress().getHostAddress())) {
+                  server.getElytraProxy().getLogger().info(notifymsg,
+                          ctx.channel().remoteAddress(),
+                          adr.getAddress().getHostAddress());
+                  return;
+                }
+              }
+              if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.DOMAINS_CHECK) {
+                if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(
+                        adr.getHostName())) {
+                  server.getElytraProxy().getLogger().info(notifymsg,
+                          ctx.channel().remoteAddress(),
+                          adr.getHostName());
+                  return;
+                }
+              }
+            } else {
+              if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.IPS_CHECK) {
+                if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(
+                        adr.getAddress().getHostAddress())) {
+                  server.getElytraProxy().getLogger().info(notifymsg,
+                          ctx.channel().remoteAddress(),
+                          adr.getAddress().getHostAddress());
+                  return;
+                }
+              }
+              if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.DOMAINS_CHECK) {
+                if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(
+                        adr.getHostName())) {
+                  server.getElytraProxy().getLogger().info(notifymsg,
+                          ctx.channel().remoteAddress(),
+                          adr.getHostName());
+                  return;
+                }
+              }
             }
           }
         }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
index d311da1d..b9b892e1 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
@@ -169,8 +169,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
                           .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_FORMAT
                                   .replace("{cmd}", originalCommand)
                                   .replace("{player}", player.getUsername())));
-                } else {
-                  return;
                 }
               }
             }
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/AlertCommand.java b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/AlertCommand.java
index 858b7eb3..6b4b2be1 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/AlertCommand.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/AlertCommand.java
@@ -47,18 +47,18 @@ public class AlertCommand implements SimpleCommand {
       source.sendMessage(
               LegacyComponentSerializer
                       .legacyAmpersand()
-                      .deserialize(prefix + Settings.IMP.MESSAGES.ERROR.MESSAGE_NEEDED)
+                      .deserialize(prefix + Settings.IMP.MESSAGES.VELOCITY.ERROR.MESSAGE_NEEDED)
       );
     } else {
       String message = String.join(" ", args);
       Component component = LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.INFO.ALERT_PREFIX + message);
+              .deserialize(Settings.IMP.MESSAGES.VELOCITY.INFO.ALERT_PREFIX + message);
       if (server.getAllPlayers().size() == 0) {
         source.sendMessage(
                 LegacyComponentSerializer
                         .legacyAmpersand()
-                        .deserialize(prefix + Settings.IMP.MESSAGES.ERROR.SERVER_EMPTY)
+                        .deserialize(prefix + Settings.IMP.MESSAGES.VELOCITY.ERROR.SERVER_EMPTY)
         );
       } else if (server.getAllPlayers().size() >= 1) {
         if (!(source instanceof Player)) {
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/config/Config.java b/proxy/src/main/java/ru/elytrium/elytraproxy/config/Config.java
index 8d8b2ff3..69861ff3 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/config/Config.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/config/Config.java
@@ -85,11 +85,9 @@ public class Config {
         }
       }
     }
-    logger.warn(
-            "Failed to set config option: {}: {} | {} ", new Object[]
-            {
-              key, value, instance
-            });
+    logger.warn("Failed to set config option: {}: {} | {} ", new Object[] {
+        key, value, instance
+    });
   }
 
   public void set(Configuration yml, String oldPath) {
@@ -121,20 +119,13 @@ public class Config {
         yml = ConfigurationProvider.getProvider(YamlConfiguration.class).load(reader);
       }
     } catch (IOException ex) {
-      logger.warn("Не могу загрузить конфиг ", ex);
+      logger.warn("Unable to load config ", ex);
       return false;
     }
     set(yml, "");
     return true;
   }
 
-  /*
-  public int getConfigVersion(File file)
-  {
-      return YamlConfiguration.loadConfiguration( file ).getInt( "config-version", 0 );
-  }
-  */
-
   /**
    * Set all values in the file (load first to avoid overwriting)
    *
@@ -224,10 +215,7 @@ public class Config {
    * Indicates that a field cannot be modified
    */
   @Retention(RetentionPolicy.RUNTIME)
-  @Target(
-          {
-                  ElementType.FIELD
-          })
+  @Target(ElementType.FIELD)
   public @interface Final {
   }
 
@@ -235,10 +223,7 @@ public class Config {
    * Creates a comment
    */
   @Retention(RetentionPolicy.RUNTIME)
-  @Target(
-          {
-                  ElementType.FIELD, ElementType.TYPE
-          })
+  @Target({ElementType.FIELD, ElementType.TYPE})
   public @interface Comment {
 
       String[] value();
@@ -248,10 +233,7 @@ public class Config {
    * Any field or class with is not part of the config
    */
   @Retention(RetentionPolicy.RUNTIME)
-  @Target(
-          {
-                  ElementType.FIELD, ElementType.TYPE
-          })
+  @Target({ElementType.FIELD, ElementType.TYPE})
   public @interface Ignore {
   }
 
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/config/Settings.java b/proxy/src/main/java/ru/elytrium/elytraproxy/config/Settings.java
index a1b1645f..a5a8b6e6 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/config/Settings.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/config/Settings.java
@@ -27,7 +27,6 @@ public class Settings extends Config {
   public static final Settings IMP = new Settings();
 
   @Final
-  @Comment("Please, don't touch.")
   public String VERSION = "0.1.0";
 
   @Create
@@ -57,12 +56,19 @@ public class Settings extends Config {
     @Create
     public MAIN_SETTINGS.HOSTNAMES_MANAGER HOSTNAMES_MANAGER;
 
-    @Comment("Allows you to reject connection to the server for all domains except yours and direct ip")
+    @Comment({
+            "Allows you to reject connection to the server for all domains except yours and direct ip",
+            "Most likely does not work with SRV records"
+    })
     public static class HOSTNAMES_MANAGER {
       public boolean ENABLE = true;
       @Comment("If whitelist enabled, all hostnames (domains and ips) in list WON'T BE BLOCKED, but other hostnames WILL BE BLOCKED")
       public boolean WHITELIST = true;
-      public List<String> HOSTNAMES = Arrays.asList("127.0.0.1 (or your ip)", "your-domain.com");
+      public boolean DOMAINS_CHECK = true;
+      public boolean IPS_CHECK = false;
+      public List<String> HOSTNAMES = Arrays.asList("your-digital-ip", "your-domain.com");
+      @Comment("IP's in this list will be ignored in check.")
+      public List<String> IGNORED_IPS = Arrays.asList("127.0.0.1", "your-haproxy-ip");
     }
   }
 
@@ -73,24 +79,28 @@ public class Settings extends Config {
     @Create
     public MESSAGES.ELYTRAPROXY ELYTRAPROXY;
     @Create
-    public MESSAGES.INFO INFO;
-    @Create
-    public MESSAGES.ERROR ERROR;
+    public MESSAGES.VELOCITY VELOCITY;
 
-    @Comment("CommandSpy format doesn't have prefix")
+    @Comment("CommandSpy format and protocol blocked doesn't have prefix")
     public static class ELYTRAPROXY {
       public String PREFIX = "§5§l[ElytraProxy]§f ";
       public String PROTOCOL_BLOCKED = "&cYour &6minecraft version&c is blocked. We allow only X.X-X.X!";
       public String COMMAND_SPY_FORMAT = "&7 — Игрок {player} ввёл команду {cmd}";
     }
 
-    public static class INFO {
-      public String ALERT_PREFIX = "§8[§4Alert§8]§f ";
-    }
+    public static class VELOCITY {
+      @Create
+      public MESSAGES.VELOCITY.INFO INFO;
+      @Create
+      public MESSAGES.VELOCITY.ERROR ERROR;
+
+      public static class INFO {
+        public String ALERT_PREFIX = "§8[§4Alert§8]§f ";
+      }
 
-    public static class ERROR {
-      public String SERVER_EMPTY = "§fНа сервере никого нет.";
-      public String MESSAGE_NEEDED = "§cYou must supply a message.";
+      public static class ERROR {
+        public String SERVER_EMPTY = "§fНа сервере никого нет.";
+        public String MESSAGE_NEEDED = "§cYou must supply a message.";
       /*
       public String USER_NOT_ONLINE = "§cThat user is not online.";
       public String ALREADY_CONNECTED = "§cYou are already connected to this server!";
@@ -98,6 +108,7 @@ public class Settings extends Config {
       public String ALREADY_CONNECTING = "§cAlready connecting to this server!";
       public String CANT_CONNECT = "Не удалось подключиться к серверу {0}: {1}";
       */
+      }
     }
   }
 
-- 
2.24.1.windows.2

