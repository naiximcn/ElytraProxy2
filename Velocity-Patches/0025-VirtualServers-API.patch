From 095430bd740f82bee4f9c6b3782488938c5ad400 Mon Sep 17 00:00:00 2001
From: Petr Ilin <hevav@hevav.dev>
Date: Fri, 13 Aug 2021 01:44:38 +0300
Subject: [PATCH] VirtualServers API


diff --git a/api/build.gradle b/api/build.gradle
index 87756b9b..bc3373aa 100644
--- a/api/build.gradle
+++ b/api/build.gradle
@@ -33,6 +33,7 @@ dependencies {
 
     api(platform("net.kyori:adventure-bom:${adventureVersion}"))
     api("net.kyori:adventure-api")
+    api("net.kyori:adventure-nbt")
     api("net.kyori:adventure-text-serializer-gson")
     api("net.kyori:adventure-text-serializer-legacy")
     api("net.kyori:adventure-text-serializer-plain")
diff --git a/api/src/main/java/com/velocitypowered/api/proxy/Player.java b/api/src/main/java/com/velocitypowered/api/proxy/Player.java
index bad86d0a..03954049 100644
--- a/api/src/main/java/com/velocitypowered/api/proxy/Player.java
+++ b/api/src/main/java/com/velocitypowered/api/proxy/Player.java
@@ -23,8 +23,9 @@ import java.util.Locale;
 import java.util.Optional;
 import java.util.UUID;
 import java.util.function.UnaryOperator;
+import net.elytrium.elytraproxy.api.virtual.VirtualServer;
+import net.elytrium.elytraproxy.api.virtual.VirtualSessionHandler;
 import net.kyori.adventure.identity.Identified;
-import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.key.Key;
 import net.kyori.adventure.key.Keyed;
 import net.kyori.adventure.text.Component;
@@ -117,6 +118,13 @@ public interface Player extends CommandSource, Identified, InboundConnection,
    */
   ConnectionRequestBuilder createConnectionRequest(RegisteredServer server);
 
+  /**
+   * Sends the player to the ElytraProxy's virtual server
+   *
+   * @param server the server to send to
+   */
+  void sendToVirtualServer(VirtualServer server, VirtualSessionHandler handler);
+
   /**
    * Gets the player's profile properties.
    *
diff --git a/api/src/main/java/com/velocitypowered/api/proxy/ProxyServer.java b/api/src/main/java/com/velocitypowered/api/proxy/ProxyServer.java
index e2ad3f1d..af55706c 100644
--- a/api/src/main/java/com/velocitypowered/api/proxy/ProxyServer.java
+++ b/api/src/main/java/com/velocitypowered/api/proxy/ProxyServer.java
@@ -22,8 +22,9 @@ import java.net.InetSocketAddress;
 import java.util.Collection;
 import java.util.Optional;
 import java.util.UUID;
+import net.elytrium.elytraproxy.api.database.Database;
+import net.elytrium.elytraproxy.api.virtual.VirtualFactory;
 import net.kyori.adventure.audience.Audience;
-import org.checkerframework.checker.nullness.qual.NonNull;
 
 /**
  * Provides an interface to a Minecraft server proxy.
@@ -167,6 +168,20 @@ public interface ProxyServer extends Audience {
    * @return total connections per second from elytraproxy stats.
    */
   long getTotalConnectionsPerSecond();
+
+  /**
+   * Gets the current database.
+   *
+   * @return current database from elytraproxy.
+   */
+  Database getDatabase();
+
+  /**
+   * Gets the virtual server factory.
+   *
+   * @return virtual server factory from elytraproxy.
+   */
+  VirtualFactory getVirtualFactory();
   // ElytraProxy End
 
   /**
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/database/Database.java b/api/src/main/java/net/elytrium/elytraproxy/api/database/Database.java
similarity index 65%
rename from proxy/src/main/java/net/elytrium/elytraproxy/database/Database.java
rename to api/src/main/java/net/elytrium/elytraproxy/api/database/Database.java
index 35536cb5..0810f5c5 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/database/Database.java
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/database/Database.java
@@ -1,21 +1,11 @@
 /*
  * Copyright (C) 2021 Elytrium
  *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
  */
 
-package net.elytrium.elytraproxy.database;
+package net.elytrium.elytraproxy.api.database;
 
 import java.util.List;
 import java.util.Map;
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/database/DatabaseItem.java b/api/src/main/java/net/elytrium/elytraproxy/api/database/DatabaseItem.java
new file mode 100644
index 00000000..580192b2
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/database/DatabaseItem.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.database;
+
+import java.util.Map;
+
+public class DatabaseItem {
+  private final Map<String, String> tableInfo;
+  private final String primaryKey;
+
+  public DatabaseItem(Map<String, String> tableInfo, String primaryKey) {
+    this.tableInfo = tableInfo;
+    this.primaryKey = primaryKey;
+  }
+
+  public Map<String, String> getTableInfo() {
+    return tableInfo;
+  }
+
+  public String getPrimaryKey() {
+    return primaryKey;
+  }
+}
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/event/AuthEvent.java b/api/src/main/java/net/elytrium/elytraproxy/api/event/AuthEvent.java
new file mode 100644
index 00000000..5b7c31ca
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/event/AuthEvent.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.event;
+
+import com.google.common.base.Preconditions;
+import com.velocitypowered.api.event.ResultedEvent;
+import com.velocitypowered.api.proxy.Player;
+
+/**
+ * This event is fired before the player has been authenticated, to enable or disable
+ * custom authentication.
+ */
+public final class AuthEvent implements ResultedEvent<ResultedEvent.GenericResult> {
+
+  private final Player player;
+  private GenericResult result;
+
+  public AuthEvent(Player player) {
+    this.player = Preconditions.checkNotNull(player, "player");
+    this.result = GenericResult.denied();
+  }
+
+  public Player getPlayer() {
+    return player;
+  }
+
+  @Override
+  public GenericResult getResult() {
+    return result;
+  }
+
+  @Override
+  public void setResult(GenericResult result) {
+    this.result = Preconditions.checkNotNull(result, "result");
+  }
+
+  @Override
+  public String toString() {
+    return "AuthEvent{"
+        + "player=" + player
+        + ", result=" + result
+        + '}';
+  }
+}
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/virtual/VirtualFactory.java b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/VirtualFactory.java
new file mode 100644
index 00000000..0f1d6c6a
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/VirtualFactory.java
@@ -0,0 +1,70 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.virtual;
+
+import net.elytrium.elytraproxy.api.virtual.chunk.Dimension;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBlock;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualWorld;
+import net.elytrium.elytraproxy.api.virtual.material.Block;
+import net.elytrium.elytraproxy.api.virtual.material.Item;
+import net.elytrium.elytraproxy.api.virtual.material.VirtualItem;
+
+public interface VirtualFactory {
+  /**
+   * Creates new virtual world
+   *
+   * @param dimension World dimension
+   * @param x Spawn location (X)
+   * @param y Spawn location (Y)
+   * @param z Spawn location (Z)
+   * @param yaw Spawn rotation (Yaw)
+   * @param pitch Spawn rotation (Pitch)
+   * @return new virtual world.
+   */
+  VirtualWorld createVirtualWorld(Dimension dimension, double x, double y, double z, float yaw, float pitch);
+
+  /**
+   * Creates new virtual server
+   *
+   * @param world Virtual world
+   * @return new virtual server.
+   */
+  VirtualServer createVirtualServer(VirtualWorld world);
+
+  /**
+   * Creates new virtual block from Block enum
+   *
+   * @param block Block from Block enum
+   * @return new virtual block.
+   */
+  VirtualBlock createSimpleBlock(Block block);
+
+  /**
+   * Creates new virtual block from Id and Data
+   *
+   * @param legacyId Legacy block id (1.12.2 and lower)
+   * @param data Block data
+   * @return new virtual block.
+   */
+  VirtualBlock createSimpleBlock(short legacyId, byte data);
+
+  /**
+   * Creates new virtual item from Item enum
+   *
+   * @param item Item from item enum
+   * @return new virtual item.
+   */
+  VirtualItem getItem(Item item);
+
+  /**
+   * Creates new virtual customizable block
+   *
+   * @return new virtual server.
+   */
+  VirtualBlock createSimpleBlock(boolean solid, boolean air, boolean motionBlocking, VirtualBlock.BlockInfo... blockInfos);
+}
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/virtual/VirtualServer.java b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/VirtualServer.java
new file mode 100644
index 00000000..5b0ab13e
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/VirtualServer.java
@@ -0,0 +1,14 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.virtual;
+
+import com.velocitypowered.api.proxy.Player;
+
+public interface VirtualServer {
+  void respawnPlayer(Player player);
+}
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/virtual/VirtualSessionHandler.java b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/VirtualSessionHandler.java
new file mode 100644
index 00000000..78a6f8c2
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/VirtualSessionHandler.java
@@ -0,0 +1,46 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.virtual;
+
+import net.elytrium.elytraproxy.api.virtual.player.VirtualServerPlayer;
+
+public interface VirtualSessionHandler {
+  default void onSpawn(VirtualServer server, VirtualServerPlayer player) {
+
+  }
+
+  //void onMove(double x, double y, double z, float yaw, float pitch);
+
+  default void onMove(double x, double y, double z) {
+
+  }
+
+  default void onRotate(float yaw, float pitch) {
+
+  }
+
+  default void onGround(boolean onGround) {
+
+  }
+
+  default void onTeleport(int teleportId) {
+
+  }
+
+  default void onChat(String chat) {
+
+  }
+
+  default void onTooBigPacket() {
+
+  }
+
+  default void onDisconnect() {
+
+  }
+}
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/Dimension.java b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/Dimension.java
new file mode 100644
index 00000000..d0238614
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/Dimension.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.virtual.chunk;
+
+public enum Dimension {
+  OVERWORLD("minecraft:overworld", 0, 0),
+  NETHER("minecraft:nether", 2, 2),
+  THE_END("minecraft:the_end", 1, 3);
+
+  private final String key;
+  private final int legacyId;
+  private final int modernId;
+
+  Dimension(String key, int legacyId, int modernId) {
+    this.key = key;
+    this.legacyId = legacyId;
+    this.modernId = modernId;
+  }
+
+  public String getKey() {
+    return key;
+  }
+
+  public int getLegacyId() {
+    return legacyId;
+  }
+
+  public int getModernId() {
+    return modernId;
+  }
+}
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/VirtualBiome.java b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/VirtualBiome.java
new file mode 100644
index 00000000..f2114be9
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/VirtualBiome.java
@@ -0,0 +1,14 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.virtual.chunk;
+
+public interface VirtualBiome {
+  String getName();
+
+  int getId();
+}
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/VirtualBlock.java b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/VirtualBlock.java
new file mode 100644
index 00000000..3ec18377
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/VirtualBlock.java
@@ -0,0 +1,171 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.virtual.chunk;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import java.util.Arrays;
+import java.util.EnumMap;
+import java.util.EnumSet;
+import java.util.Map;
+import java.util.Set;
+import org.jetbrains.annotations.NotNull;
+
+public interface VirtualBlock {
+
+  Map<Version, BlockInfo> getBlockInfos();
+
+  VirtualBlock setData(byte data);
+
+  short getId(ProtocolVersion version);
+
+  byte getData(ProtocolVersion version);
+
+  boolean isSolid();
+
+  boolean isAir();
+
+  boolean isMotionBlocking();
+
+  enum Version {
+    /*
+    MINECRAFT_1_7(ProtocolVersion.MINECRAFT_1_7_2, ProtocolVersion.MINECRAFT_1_7_6),
+    MINECRAFT_1_8(ProtocolVersion.MINECRAFT_1_8),
+    MINECRAFT_1_9(EnumSet.range(ProtocolVersion.MINECRAFT_1_9, ProtocolVersion.MINECRAFT_1_9_4)),
+    MINECRAFT_1_10(ProtocolVersion.MINECRAFT_1_10),
+    MINECRAFT_1_11(ProtocolVersion.MINECRAFT_1_11, ProtocolVersion.MINECRAFT_1_11_1),
+    */
+    LEGACY(EnumSet.range(ProtocolVersion.MINECRAFT_1_7_2, ProtocolVersion.MINECRAFT_1_8)),
+    MINECRAFT_1_12(EnumSet.range(ProtocolVersion.MINECRAFT_1_9, ProtocolVersion.MINECRAFT_1_12_2)),
+    MINECRAFT_1_13(ProtocolVersion.MINECRAFT_1_13),
+    MINECRAFT_1_13_2(ProtocolVersion.MINECRAFT_1_13_1, ProtocolVersion.MINECRAFT_1_13_2),
+    MINECRAFT_1_14(EnumSet.range(ProtocolVersion.MINECRAFT_1_14, ProtocolVersion.MINECRAFT_1_14_4)),
+    MINECRAFT_1_15(EnumSet.range(ProtocolVersion.MINECRAFT_1_15, ProtocolVersion.MINECRAFT_1_15_2)),
+    MINECRAFT_1_16(ProtocolVersion.MINECRAFT_1_16, ProtocolVersion.MINECRAFT_1_16_1),
+    MINECRAFT_1_16_2(EnumSet.range(ProtocolVersion.MINECRAFT_1_16_2, ProtocolVersion.MINECRAFT_1_16_4)),
+    MINECRAFT_1_17(EnumSet.range(ProtocolVersion.MINECRAFT_1_17, ProtocolVersion.MINECRAFT_1_17_1));
+
+    private static final EnumMap<ProtocolVersion, Version> mcVersionToBlockVersions = new EnumMap<>(
+        ProtocolVersion.class);
+
+    public static Version parse(String from) {
+      switch (from) {
+        case "1.12":
+          return MINECRAFT_1_12;
+        case "1.13":
+          return MINECRAFT_1_13;
+        case "1.13.2":
+          return MINECRAFT_1_13_2;
+        case "1.14":
+          return MINECRAFT_1_14;
+        case "1.15":
+          return MINECRAFT_1_15;
+        case "1.16":
+          return MINECRAFT_1_16;
+        case "1.16.2":
+          return MINECRAFT_1_16_2;
+        case "1.17":
+          return MINECRAFT_1_17;
+        default:
+          return LEGACY;
+      }
+    }
+
+    static {
+      for (Version version : Version.values()) {
+        for (ProtocolVersion protocolVersion : version.versions) {
+          mcVersionToBlockVersions.put(protocolVersion, version);
+        }
+      }
+    }
+
+    private final Set<ProtocolVersion> versions;
+
+    Version(ProtocolVersion... versions) {
+      this.versions = EnumSet.copyOf(Arrays.asList(versions));
+    }
+
+    Version(Set<ProtocolVersion> versions) {
+      this.versions = versions;
+    }
+
+    public boolean isBefore(Version other) {
+      return this.compareTo(other) < 0;
+    }
+
+    public boolean isBeforeOrEq(Version other) {
+      return this.compareTo(other) <= 0;
+    }
+
+    public boolean isAfter(Version other) {
+      return this.compareTo(other) > 0;
+    }
+
+    public boolean isAfterOrEq(Version other) {
+      return this.compareTo(other) >= 0;
+    }
+
+    public Set<ProtocolVersion> getVersions() {
+      return versions;
+    }
+
+    public static Version map(ProtocolVersion protocolVersion) {
+      return mcVersionToBlockVersions.get(protocolVersion);
+    }
+  }
+
+  class BlockInfo {
+    @NotNull
+    private final Version version;
+    private final short id;
+    private byte data;
+    private final BlockInfo fallback;
+
+    public BlockInfo(Version version, short id, byte data) {
+      this(version, id, data, null);
+    }
+
+    public BlockInfo(Version version, @NotNull BlockInfo fallback) {
+      this(version, (short) 0, (byte) 0, fallback);
+    }
+
+    private BlockInfo(@NotNull Version version, short id, byte data, BlockInfo fallback) {
+      this.version = version;
+      this.id = id;
+      this.data = data;
+      this.fallback = fallback;
+    }
+
+    public Version getVersion() {
+      return version;
+    }
+
+    public short getId() {
+      return fallback == null ? id : fallback.getId();
+    }
+
+    public byte getData() {
+      return fallback == null ? data : fallback.getData();
+    }
+
+    public void setData(byte data) {
+      this.data = data;
+    }
+
+    public static BlockInfo info(Version version, int id, int meta) {
+      return new BlockInfo(version, (short) id, (byte) meta);
+    }
+
+    public static BlockInfo info(Version version, int id) {
+      return info(version, id, 0);
+    }
+
+    public static BlockInfo fallback(Version version, VirtualBlock fallback) {
+      return new BlockInfo(version, fallback.getBlockInfos().get(version));
+    }
+  }
+}
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/VirtualChunk.java b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/VirtualChunk.java
new file mode 100644
index 00000000..78f6409f
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/VirtualChunk.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.virtual.chunk;
+
+import net.elytrium.elytraproxy.api.virtual.chunk.data.ChunkSnapshot;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public interface VirtualChunk {
+
+  int getX();
+
+  int getZ();
+
+  void setBlock(int x, int y, int z, @Nullable VirtualBlock block);
+
+  @NotNull
+  VirtualBlock getBlock(int x, int y, int z);
+
+  @NotNull
+  VirtualBiome getBiome(int x, int y, int z);
+
+  void setBiome2d(int x, int z, @NotNull VirtualBiome biome);
+
+  void setBiome3d(int x, int y, int z, @NotNull VirtualBiome biome);
+
+  byte getBlockLight(int x, int y, int z);
+
+  void setBlockLight(int x, int y, int z, byte light);
+
+  byte getSkyLight(int x, int y, int z);
+
+  void setSkyLight(int x, int y, int z, byte light);
+
+  ChunkSnapshot getFullChunkSnapshot();
+
+  ChunkSnapshot getPartialChunkSnapshot(long previousUpdate);
+}
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/VirtualWorld.java b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/VirtualWorld.java
new file mode 100644
index 00000000..2707ef8a
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/VirtualWorld.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.virtual.chunk;
+
+import java.util.List;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public interface VirtualWorld {
+
+  Dimension getDimension();
+
+  double getSpawnX();
+
+  double getSpawnY();
+
+  double getSpawnZ();
+
+  float getYaw();
+
+  float getPitch();
+
+  void setBlock(int x, int y, int z, @Nullable VirtualBlock block);
+
+  VirtualBlock getBlock(int x, int y, int z);
+
+  void setBiome2d(int x, int z, @NotNull VirtualBiome biome);
+
+  void setBiome3d(int x, int y, int z, @NotNull VirtualBiome biome);
+
+  VirtualBiome getBiome(int x, int y, int z);
+
+  byte getBlockLight(int x, int y, int z);
+
+  void setBlockLight(int x, int y, int z, byte light);
+
+  List<VirtualChunk> getChunks();
+
+  @Nullable
+  VirtualChunk getChunk(int x, int z);
+
+  VirtualChunk getChunkOrNew(int x, int z);
+}
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/data/BlockSection.java b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/data/BlockSection.java
new file mode 100644
index 00000000..eb587d8b
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/data/BlockSection.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.virtual.chunk.data;
+
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBlock;
+import org.jetbrains.annotations.Nullable;
+
+public interface BlockSection {
+
+  long getLastUpdate();
+
+  VirtualBlock getBlockAt(int x, int y, int z);
+
+  void setBlockAt(int x, int y, int z, @Nullable VirtualBlock block);
+
+  BlockSection getSnapshot();
+
+}
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/data/ChunkSnapshot.java b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/data/ChunkSnapshot.java
new file mode 100644
index 00000000..d3c7e511
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/data/ChunkSnapshot.java
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.virtual.chunk.data;
+
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBiome;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBlock;
+
+public interface ChunkSnapshot {
+  int getX();
+  int getZ();
+  boolean isFullChunk();
+  BlockSection[] getSections();
+  LightSection[] getLight();
+  VirtualBiome[] getBiomes();
+
+  public VirtualBlock getBlock(int x, int y, int z);
+}
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/data/LightSection.java b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/data/LightSection.java
new file mode 100644
index 00000000..045e1c51
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/chunk/data/LightSection.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.virtual.chunk.data;
+
+import net.elytrium.elytraproxy.api.virtual.mcprotocollib.NibbleArray3d;
+
+public interface LightSection {
+
+  NibbleArray3d getBlockLight();
+
+  NibbleArray3d getSkyLight();
+
+  long getLastUpdate();
+
+  byte getBlockLight(int x, int y, int z);
+
+  byte getSkyLight(int x, int y, int z);
+
+  void setBlockLight(int x, int y, int z, byte light);
+
+  void setSkyLight(int x, int y, int z, byte light);
+
+  LightSection copy();
+}
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/virtual/material/Block.java b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/material/Block.java
new file mode 100644
index 00000000..31ccd379
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/material/Block.java
@@ -0,0 +1,287 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.virtual.material;
+
+public enum Block {
+  AIR(0),
+  STONE(1),
+  GRASS(2),
+  DIRT(3),
+  COBBLESTONE(4),
+  PLANKS(5),
+  SAPLING(6),
+  BEDROCK(7),
+  FLOWING_WATER(8),
+  WATER(9),
+  FLOWING_LAVA(10),
+  LAVA(11),
+  SAND(12),
+  GRAVEL(13),
+  GOLD_ORE(14),
+  IRON_ORE(15),
+  COAL_ORE(16),
+  LOG(17),
+  LEAVES(18),
+  SPONGE(19),
+  GLASS(20),
+  LAPIS_ORE(21),
+  LAPIS_BLOCK(22),
+  DISPENSER(23),
+  SANDSTONE(24),
+  NOTEBLOCK(25),
+  BED(26),
+  GOLDEN_RAIL(27),
+  DETECTOR_RAIL(28),
+  STICKY_PISTON(29),
+  WEB(30),
+  TALLGRASS(31),
+  DEADBUSH(32),
+  PISTON(33),
+  PISTON_HEAD(34),
+  WOOL(35),
+  PISTON_EXTENSION(36),
+  YELLOW_FLOWER(37),
+  RED_FLOWER(38),
+  BROWN_MUSHROOM(39),
+  RED_MUSHROOM(40),
+  GOLD_BLOCK(41),
+  IRON_BLOCK(42),
+  DOUBLE_STONE_SLAB(43),
+  STONE_SLAB(44),
+  BRICK_BLOCK(45),
+  TNT(46),
+  BOOKSHELF(47),
+  MOSSY_COBBLESTONE(48),
+  OBSIDIAN(49),
+  TORCH(50),
+  FIRE(51),
+  MOB_SPAWNER(52),
+  OAK_STAIRS(53),
+  CHEST(54),
+  REDSTONE_WIRE(55),
+  DIAMOND_ORE(56),
+  DIAMOND_BLOCK(57),
+  CRAFTING_TABLE(58),
+  WHEAT(59),
+  FARMLAND(60),
+  FURNACE(61),
+  LIT_FURNACE(62),
+  STANDING_SIGN(63),
+  WOODEN_DOOR(64),
+  LADDER(65),
+  RAIL(66),
+  STONE_STAIRS(67),
+  WALL_SIGN(68),
+  LEVER(69),
+  STONE_PRESSURE_PLATE(70),
+  IRON_DOOR(71),
+  WOODEN_PRESSURE_PLATE(72),
+  REDSTONE_ORE(73),
+  LIT_REDSTONE_ORE(74),
+  UNLIT_REDSTONE_TORCH(75),
+  REDSTONE_TORCH(76),
+  STONE_BUTTON(77),
+  SNOW_LAYER(78),
+  ICE(79),
+  SNOW(80),
+  CACTUS(81),
+  CLAY(82),
+  REEDS(83),
+  JUKEBOX(84),
+  FENCE(85),
+  PUMPKIN(86),
+  NETHERRACK(87),
+  SOUL_SAND(88),
+  GLOWSTONE(89),
+  PORTAL(90),
+  LIT_PUMPKIN(91),
+  CAKE(92),
+  UNPOWERED_REPEATER(93),
+  POWERED_REPEATER(94),
+  STAINED_GLASS(95),
+  TRAPDOOR(96),
+  MONSTER_EGG(97),
+  STONEBRICK(98),
+  BROWN_MUSHROOM_BLOCK(99),
+  RED_MUSHROOM_BLOCK(100),
+  IRON_BARS(101),
+  GLASS_PANE(102),
+  MELON_BLOCK(103),
+  PUMPKIN_STEM(104),
+  MELON_STEM(105),
+  VINE(106),
+  FENCE_GATE(107),
+  BRICK_STAIRS(108),
+  STONE_BRICK_STAIRS(109),
+  MYCELIUM(110),
+  WATERLILY(111),
+  NETHER_BRICK(112),
+  NETHER_BRICK_FENCE(113),
+  NETHER_BRICK_STAIRS(114),
+  NETHER_WART(115),
+  ENCHANTING_TABLE(116),
+  BREWING_STAND(117),
+  CAULDRON(118),
+  END_PORTAL(119),
+  END_PORTAL_FRAME(120),
+  END_STONE(121),
+  DRAGON_EGG(122),
+  REDSTONE_LAMP(123),
+  LIT_REDSTONE_LAMP(124),
+  DOUBLE_WOODEN_SLAB(125),
+  WOODEN_SLAB(126),
+  COCOA(127),
+  SANDSTONE_STAIRS(128),
+  EMERALD_ORE(129),
+  ENDER_CHEST(130),
+  TRIPWIRE_HOOK(131),
+  TRIPWIRE(132),
+  EMERALD_BLOCK(133),
+  SPRUCE_STAIRS(134),
+  BIRCH_STAIRS(135),
+  JUNGLE_STAIRS(136),
+  COMMAND_BLOCK(137),
+  BEACON(138),
+  COBBLESTONE_WALL(139),
+  FLOWER_POT(140),
+  CARROTS(141),
+  POTATOES(142),
+  WOODEN_BUTTON(143),
+  SKULL(144),
+  ANVIL(145),
+  TRAPPED_CHEST(146),
+  LIGHT_WEIGHTED_PRESSURE_PLATE(147),
+  HEAVY_WEIGHTED_PRESSURE_PLATE(148),
+  UNPOWERED_COMPARATOR(149),
+  POWERED_COMPARATOR(150),
+  DAYLIGHT_DETECTOR(151),
+  REDSTONE_BLOCK(152),
+  QUARTZ_ORE(153),
+  HOPPER(154),
+  QUARTZ_BLOCK(155),
+  QUARTZ_STAIRS(156),
+  ACTIVATOR_RAIL(157),
+  DROPPER(158),
+  STAINED_HARDENED_CLAY(159),
+  STAINED_GLASS_PANE(160),
+  LEAVES2(161),
+  LOG2(162),
+  ACACIA_STAIRS(163),
+  DARK_OAK_STAIRS(164),
+  SLIME(165),
+  BARRIER(166),
+  IRON_TRAPDOOR(167),
+  PRISMARINE(168),
+  SEA_LANTERN(169),
+  HAY_BLOCK(170),
+  CARPET(171),
+  HARDENED_CLAY(172),
+  COAL_BLOCK(173),
+  PACKED_ICE(174),
+  DOUBLE_PLANT(175),
+  STANDING_BANNER(176),
+  WALL_BANNER(177),
+  DAYLIGHT_DETECTOR_INVERTED(178),
+  RED_SANDSTONE(179),
+  RED_SANDSTONE_STAIRS(180),
+  DOUBLE_STONE_SLAB2(181),
+  STONE_SLAB2(182),
+  SPRUCE_FENCE_GATE(183),
+  BIRCH_FENCE_GATE(184),
+  JUNGLE_FENCE_GATE(185),
+  DARK_OAK_FENCE_GATE(186),
+  ACACIA_FENCE_GATE(187),
+  SPRUCE_FENCE(188),
+  BIRCH_FENCE(189),
+  JUNGLE_FENCE(190),
+  DARK_OAK_FENCE(191),
+  ACACIA_FENCE(192),
+  SPRUCE_DOOR(193),
+  BIRCH_DOOR(194),
+  JUNGLE_DOOR(195),
+  ACACIA_DOOR(196),
+  DARK_OAK_DOOR(197),
+  END_ROD(198),
+  CHORUS_PLANT(199),
+  CHORUS_FLOWER(200),
+  PURPUR_BLOCK(201),
+  PURPUR_PILLAR(202),
+  PURPUR_STAIRS(203),
+  PURPUR_DOUBLE_SLAB(204),
+  PURPUR_SLAB(205),
+  END_BRICKS(206),
+  BEETROOTS(207),
+  GRASS_PATH(208),
+  END_GATEWAY(209),
+  REPEATING_COMMAND_BLOCK(210),
+  CHAIN_COMMAND_BLOCK(211),
+  FROSTED_ICE(212),
+  MAGMA(213),
+  NETHER_WART_BLOCK(214),
+  RED_NETHER_BRICK(215),
+  BONE_BLOCK(216),
+  STRUCTURE_VOID(217),
+  OBSERVER(218),
+  WHITE_SHULKER_BOX(219),
+  ORANGE_SHULKER_BOX(220),
+  MAGENTA_SHULKER_BOX(221),
+  LIGHT_BLUE_SHULKER_BOX(222),
+  YELLOW_SHULKER_BOX(223),
+  LIME_SHULKER_BOX(224),
+  PINK_SHULKER_BOX(225),
+  GRAY_SHULKER_BOX(226),
+  SILVER_SHULKER_BOX(227),
+  CYAN_SHULKER_BOX(228),
+  PURPLE_SHULKER_BOX(229),
+  BLUE_SHULKER_BOX(230),
+  BROWN_SHULKER_BOX(231),
+  GREEN_SHULKER_BOX(232),
+  RED_SHULKER_BOX(233),
+  BLACK_SHULKER_BOX(234),
+  WHITE_GLAZED_TERRACOTTA(235),
+  ORANGE_GLAZED_TERRACOTTA(236),
+  MAGENTA_GLAZED_TERRACOTTA(237),
+  LIGHT_BLUE_GLAZED_TERRACOTTA(238),
+  YELLOW_GLAZED_TERRACOTTA(239),
+  LIME_GLAZED_TERRACOTTA(240),
+  PINK_GLAZED_TERRACOTTA(241),
+  GRAY_GLAZED_TERRACOTTA(242),
+  SILVER_GLAZED_TERRACOTTA(243),
+  CYAN_GLAZED_TERRACOTTA(244),
+  PURPLE_GLAZED_TERRACOTTA(245),
+  BLUE_GLAZED_TERRACOTTA(246),
+  BROWN_GLAZED_TERRACOTTA(247),
+  GREEN_GLAZED_TERRACOTTA(248),
+  RED_GLAZED_TERRACOTTA(249),
+  BLACK_GLAZED_TERRACOTTA(250),
+  CONCRETE(251),
+  CONCRETE_POWDER(252),
+  STRUCTURE_BLOCK(255);
+
+  private final int id;
+
+  private byte data;
+
+  Block(final int id) {
+    this.id = id;
+    this.data = 0;
+  }
+
+  Block(final int id, byte data) {
+    this.id = id;
+    this.data = data;
+  }
+
+  public int getId() {
+    return id;
+  }
+
+  public byte getData() {
+    return data;
+  }
+}
\ No newline at end of file
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/virtual/material/Item.java b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/material/Item.java
new file mode 100644
index 00000000..f2d8416f
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/material/Item.java
@@ -0,0 +1,357 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.virtual.material;
+
+public enum Item {
+  AIR(0),
+  STONE(1),
+  GRASS(2),
+  DIRT(3),
+  COBBLESTONE(4),
+  PLANKS(5),
+  SAPLING(6),
+  BEDROCK(7),
+  SAND(12),
+  GRAVEL(13),
+  GOLD_ORE(14),
+  IRON_ORE(15),
+  COAL_ORE(16),
+  LOG(17),
+  LEAVES(18),
+  SPONGE(19),
+  GLASS(20),
+  LAPIS_ORE(21),
+  LAPIS_BLOCK(22),
+  DISPENSER(23),
+  SANDSTONE(24),
+  NOTEBLOCK(25),
+  GOLDEN_RAIL(27),
+  DETECTOR_RAIL(28),
+  STICKY_PISTON(29),
+  WEB(30),
+  TALLGRASS(31),
+  DEADBUSH(32),
+  PISTON(33),
+  WOOL(35),
+  YELLOW_FLOWER(37),
+  RED_FLOWER(38),
+  BROWN_MUSHROOM(39),
+  RED_MUSHROOM(40),
+  GOLD_BLOCK(41),
+  IRON_BLOCK(42),
+  STONE_SLAB(44),
+  BRICK_BLOCK(45),
+  TNT(46),
+  BOOKSHELF(47),
+  MOSSY_COBBLESTONE(48),
+  OBSIDIAN(49),
+  TORCH(50),
+  MOB_SPAWNER(52),
+  OAK_STAIRS(53),
+  CHEST(54),
+  DIAMOND_ORE(56),
+  DIAMOND_BLOCK(57),
+  CRAFTING_TABLE(58),
+  FARMLAND(60),
+  FURNACE(61),
+  LADDER(65),
+  RAIL(66),
+  STONE_STAIRS(67),
+  LEVER(69),
+  STONE_PRESSURE_PLATE(70),
+  WOODEN_PRESSURE_PLATE(72),
+  REDSTONE_ORE(73),
+  REDSTONE_TORCH(76),
+  STONE_BUTTON(77),
+  SNOW_LAYER(78),
+  ICE(79),
+  SNOW(80),
+  CACTUS(81),
+  CLAY(82),
+  JUKEBOX(84),
+  FENCE(85),
+  PUMPKIN(86),
+  NETHERRACK(87),
+  SOUL_SAND(88),
+  GLOWSTONE(89),
+  LIT_PUMPKIN(91),
+  STAINED_GLASS(95),
+  TRAPDOOR(96),
+  STONEBRICK(98),
+  BROWN_MUSHROOM_BLOCK(99),
+  RED_MUSHROOM_BLOCK(100),
+  IRON_BARS(101),
+  GLASS_PANE(102),
+  MELON_BLOCK(103),
+  VINE(106),
+  FENCE_GATE(107),
+  BRICK_STAIRS(108),
+  STONE_BRICK_STAIRS(109),
+  MYCELIUM(110),
+  WATERLILY(111),
+  NETHER_BRICK(112),
+  NETHER_BRICK_FENCE(113),
+  NETHER_BRICK_STAIRS(114),
+  ENCHANTING_TABLE(116),
+  END_PORTAL_FRAME(120),
+  END_STONE(121),
+  DRAGON_EGG(122),
+  REDSTONE_LAMP(123),
+  WOODEN_SLAB(126),
+  SANDSTONE_STAIRS(128),
+  EMERALD_ORE(129),
+  ENDER_CHEST(130),
+  TRIPWIRE_HOOK(131),
+  EMERALD_BLOCK(133),
+  SPRUCE_STAIRS(134),
+  BIRCH_STAIRS(135),
+  JUNGLE_STAIRS(136),
+  COMMAND_BLOCK(137),
+  BEACON(138),
+  COBBLESTONE_WALL(139),
+  WOODEN_BUTTON(143),
+  ANVIL(145),
+  TRAPPED_CHEST(146),
+  LIGHT_WEIGHTED_PRESSURE_PLATE(147),
+  HEAVY_WEIGHTED_PRESSURE_PLATE(148),
+  DAYLIGHT_DETECTOR(151),
+  REDSTONE_BLOCK(152),
+  QUARTZ_ORE(153),
+  HOPPER(154),
+  QUARTZ_BLOCK(155),
+  QUARTZ_STAIRS(156),
+  ACTIVATOR_RAIL(157),
+  DROPPER(158),
+  STAINED_HARDENED_CLAY(159),
+  STAINED_GLASS_PANE(160),
+  LEAVES2(161),
+  LOG2(162),
+  ACACIA_STAIRS(163),
+  DARK_OAK_STAIRS(164),
+  SLIME(165),
+  BARRIER(166),
+  IRON_TRAPDOOR(167),
+  PRISMARINE(168),
+  SEA_LANTERN(169),
+  HAY_BLOCK(170),
+  CARPET(171),
+  HARDENED_CLAY(172),
+  COAL_BLOCK(173),
+  PACKED_ICE(174),
+  DOUBLE_PLANT(175),
+  RED_SANDSTONE(179),
+  RED_SANDSTONE_STAIRS(180),
+  STONE_SLAB2(182),
+  SPRUCE_FENCE_GATE(183),
+  BIRCH_FENCE_GATE(184),
+  JUNGLE_FENCE_GATE(185),
+  DARK_OAK_FENCE_GATE(186),
+  ACACIA_FENCE_GATE(187),
+  SPRUCE_FENCE(188),
+  BIRCH_FENCE(189),
+  JUNGLE_FENCE(190),
+  DARK_OAK_FENCE(191),
+  ACACIA_FENCE(192),
+  IRON_SHOVEL(256),
+  IRON_PICKAXE(257),
+  IRON_AXE(258),
+  FLINT_AND_STEEL(259),
+  APPLE(260),
+  BOW(261),
+  ARROW(262),
+  COAL(263),
+  DIAMOND(264),
+  IRON_INGOT(265),
+  GOLD_INGOT(266),
+  IRON_SWORD(267),
+  WOODEN_SWORD(268),
+  WOODEN_SHOVEL(269),
+  WOODEN_PICKAXE(270),
+  WOODEN_AXE(271),
+  STONE_SWORD(272),
+  STONE_SHOVEL(273),
+  STONE_PICKAXE(274),
+  STONE_AXE(275),
+  DIAMOND_SWORD(276),
+  DIAMOND_SHOVEL(277),
+  DIAMOND_PICKAXE(278),
+  DIAMOND_AXE(279),
+  STICK(280),
+  BOWL(281),
+  MUSHROOM_STEW(282),
+  GOLDEN_SWORD(283),
+  GOLDEN_SHOVEL(284),
+  GOLDEN_PICKAXE(285),
+  GOLDEN_AXE(286),
+  STRING(287),
+  FEATHER(288),
+  GUNPOWDER(289),
+  WOODEN_HOE(290),
+  STONE_HOE(291),
+  IRON_HOE(292),
+  DIAMOND_HOE(293),
+  GOLDEN_HOE(294),
+  WHEAT_SEEDS(295),
+  WHEAT(296),
+  BREAD(297),
+  LEATHER_HELMET(298),
+  LEATHER_CHESTPLATE(299),
+  LEATHER_LEGGINGS(300),
+  LEATHER_BOOTS(301),
+  CHAINMAIL_HELMET(302),
+  CHAINMAIL_CHESTPLATE(303),
+  CHAINMAIL_LEGGINGS(304),
+  CHAINMAIL_BOOTS(305),
+  IRON_HELMET(306),
+  IRON_CHESTPLATE(307),
+  IRON_LEGGINGS(308),
+  IRON_BOOTS(309),
+  DIAMOND_HELMET(310),
+  DIAMOND_CHESTPLATE(311),
+  DIAMOND_LEGGINGS(312),
+  DIAMOND_BOOTS(313),
+  GOLDEN_HELMET(314),
+  GOLDEN_CHESTPLATE(315),
+  GOLDEN_LEGGINGS(316),
+  GOLDEN_BOOTS(317),
+  FLINT(318),
+  PORKCHOP(319),
+  COOKED_PORKCHOP(320),
+  PAINTING(321),
+  GOLDEN_APPLE(322),
+  SIGN(323),
+  WOODEN_DOOR(324),
+  BUCKET(325),
+  WATER_BUCKET(326),
+  LAVA_BUCKET(327),
+  MINECART(328),
+  SADDLE(329),
+  IRON_DOOR(330),
+  REDSTONE(331),
+  SNOWBALL(332),
+  BOAT(333),
+  LEATHER(334),
+  MILK_BUCKET(335),
+  BRICK(336),
+  CLAY_BALL(337),
+  REEDS(338),
+  PAPER(339),
+  BOOK(340),
+  SLIME_BALL(341),
+  CHEST_MINECART(342),
+  FURNACE_MINECART(343),
+  EGG(344),
+  COMPASS(345),
+  FISHING_ROD(346),
+  CLOCK(347),
+  GLOWSTONE_DUST(348),
+  FISH(349),
+  COOKED_FISH(350),
+  DYE(351),
+  BONE(352),
+  SUGAR(353),
+  CAKE(354),
+  BED(355),
+  REPEATER(356),
+  COOKIE(357),
+  FILLED_MAP(358),
+  SHEARS(359),
+  MELON(360),
+  PUMPKIN_SEEDS(361),
+  MELON_SEEDS(362),
+  BEEF(363),
+  COOKED_BEEF(364),
+  CHICKEN(365),
+  COOKED_CHICKEN(366),
+  ROTTEN_FLESH(367),
+  ENDER_PEARL(368),
+  BLAZE_ROD(369),
+  GHAST_TEAR(370),
+  GOLD_NUGGET(371),
+  NETHER_WART(372),
+  POTION(373),
+  GLASS_BOTTLE(374),
+  SPIDER_EYE(375),
+  FERMENTED_SPIDER_EYE(376),
+  BLAZE_POWDER(377),
+  MAGMA_CREAM(378),
+  BREWING_STAND(379),
+  CAULDRON(380),
+  ENDER_EYE(381),
+  SPECKLED_MELON(382),
+  SPAWN_EGG(383),
+  EXPERIENCE_BOTTLE(384),
+  FIRE_CHARGE(385),
+  WRITABLE_BOOK(386),
+  WRITTEN_BOOK(387),
+  EMERALD(388),
+  ITEM_FRAME(389),
+  FLOWER_POT(390),
+  CARROT(391),
+  POTATO(392),
+  BAKED_POTATO(393),
+  POISONOUS_POTATO(394),
+  MAP(395),
+  GOLDEN_CARROT(396),
+  SKULL(397),
+  CARROT_ON_A_STICK(398),
+  NETHER_STAR(399),
+  PUMPKIN_PIE(400),
+  FIREWORKS(401),
+  FIREWORK_CHARGE(402),
+  ENCHANTED_BOOK(403),
+  COMPARATOR(404),
+  NETHERBRICK(405),
+  QUARTZ(406),
+  TNT_MINECART(407),
+  HOPPER_MINECART(408),
+  PRISMARINE_SHARD(409),
+  PRISMARINE_CRYSTALS(410),
+  RABBIT(411),
+  COOKED_RABBIT(412),
+  RABBIT_STEW(413),
+  RABBIT_FOOT(414),
+  RABBIT_HIDE(415),
+  ARMOR_STAND(416),
+  IRON_HORSE_ARMOR(417),
+  GOLDEN_HORSE_ARMOR(418),
+  DIAMOND_HORSE_ARMOR(419),
+  LEAD(420),
+  NAME_TAG(421),
+  COMMAND_BLOCK_MINECART(422),
+  MUTTON(423),
+  COOKED_MUTTON(424),
+  BANNER(425),
+  SPRUCE_DOOR(427),
+  BIRCH_DOOR(428),
+  JUNGLE_DOOR(429),
+  ACACIA_DOOR(430),
+  DARK_OAK_DOOR(431),
+  RECORD_13(2256),
+  RECORD_CAT(2257),
+  RECORD_BLOCKS(2258),
+  RECORD_CHIRP(2259),
+  RECORD_FAR(2260),
+  RECORD_MALL(2261),
+  RECORD_MELLOHI(2262),
+  RECORD_STAL(2263),
+  RECORD_STRAD(2264),
+  RECORD_WARD(2265),
+  RECORD_11(2266),
+  RECORD_WAIT(2267);
+
+  private final int id;
+
+  Item(final int id) {
+    this.id = id;
+  }
+
+  public int getId() {
+    return id;
+  }
+}
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/virtual/material/VirtualItem.java b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/material/VirtualItem.java
new file mode 100644
index 00000000..36e3d0d6
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/material/VirtualItem.java
@@ -0,0 +1,14 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.virtual.material;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+
+public interface VirtualItem {
+  short getId(ProtocolVersion version);
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/NibbleArray3d.java b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/mcprotocollib/NibbleArray3d.java
similarity index 92%
rename from proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/NibbleArray3d.java
rename to api/src/main/java/net/elytrium/elytraproxy/api/virtual/mcprotocollib/NibbleArray3d.java
index 896a5bdb..2c7fc869 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/NibbleArray3d.java
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/mcprotocollib/NibbleArray3d.java
@@ -22,12 +22,10 @@
  * OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib;
+package net.elytrium.elytraproxy.api.virtual.mcprotocollib;
 
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.Arrays;
 
-@SuppressFBWarnings({"EI_EXPOSE_REP2", "EI_EXPOSE_REP"})
 public class NibbleArray3d {
 
   private byte[] data;
diff --git a/api/src/main/java/net/elytrium/elytraproxy/api/virtual/player/VirtualServerPlayer.java b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/player/VirtualServerPlayer.java
new file mode 100644
index 00000000..9363061e
--- /dev/null
+++ b/api/src/main/java/net/elytrium/elytraproxy/api/virtual/player/VirtualServerPlayer.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * The ElytraProxy API is licensed under the terms of the MIT License. For more details,
+ * reference the LICENSE file in the api top-level directory.
+ */
+
+package net.elytrium.elytraproxy.api.virtual.player;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.api.proxy.Player;
+import com.velocitypowered.api.proxy.server.RegisteredServer;
+import java.awt.image.BufferedImage;
+import net.elytrium.elytraproxy.api.virtual.VirtualServer;
+import net.elytrium.elytraproxy.api.virtual.material.VirtualItem;
+import net.kyori.adventure.nbt.CompoundBinaryTag;
+import net.kyori.adventure.text.Component;
+
+public interface VirtualServerPlayer {
+  void sendImage(int mapId, BufferedImage image);
+
+  void setInventory(int slot, VirtualItem item, int count, int data, CompoundBinaryTag nbt);
+
+  void teleport(double x, double y, double z, float yaw, float pitch);
+
+  void sendTitle(Component title, Component subtitle, ProtocolVersion version, int fadeIn, int stay, int fadeOut);
+
+  void disconnect();
+
+  void disconnect(RegisteredServer server);
+
+  VirtualServer getServer();
+
+  Player getProxyPlayer();
+}
diff --git a/proxy/build.gradle b/proxy/build.gradle
index a34a693d..f2a12e0a 100644
--- a/proxy/build.gradle
+++ b/proxy/build.gradle
@@ -23,9 +23,15 @@ license {
     matching(includes: ['**/virtual/file/**']) {
         header = project.rootProject.file('HEADER_ELYTRAPROXY.txt')
     }
-    matching(includes: ['**/virtual/server/VirtualSessionHandler.java']) {
+    matching(includes: ['**/virtual/material/**']) {
         header = project.rootProject.file('HEADER_ELYTRAPROXY.txt')
     }
+    matching(includes: ['**/virtual/server/**']) {
+        header = project.rootProject.file('HEADER_ELYTRAPROXY.txt')
+    }
+    matching(includes: ['**/virtual/server/world/**']) {
+        header = project.rootProject.file('HEADER_BOTFILTER.txt')
+    }
     matching(includes: ['**/botfilter/**']) {
         header = project.rootProject.file('HEADER_BOTFILTER.txt')
     }
@@ -81,8 +87,6 @@ dependencies {
 
     // ElytraProxy Start
     implementation "org.mariadb.jdbc:mariadb-java-client:2.7.3"
-    implementation 'at.favre.lib:bcrypt:0.9.0'
-    implementation 'dev.samstevens.totp:totp:1.7.1'
     implementation 'org.xerial:sqlite-jdbc:3.36.0.1'
 
     // Note: we depend on the API twice, first the main sourceset, and then the annotation processor.
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java b/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
index a1c14df1..34be1dd3 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
@@ -90,6 +90,8 @@ import java.util.function.IntFunction;
 import java.util.stream.Collectors;
 import lombok.Getter;
 import net.elytrium.elytraproxy.ElytraProxy;
+import net.elytrium.elytraproxy.api.database.Database;
+import net.elytrium.elytraproxy.api.virtual.VirtualFactory;
 import net.elytrium.elytraproxy.config.Settings;
 import net.kyori.adventure.audience.Audience;
 import net.kyori.adventure.audience.ForwardingAudience;
@@ -730,6 +732,16 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
   public long getTotalConnectionsPerSecond() {
     return getElytraProxy().getStatistics().getTotalConnectionsPerSecond();
   }
+
+  @Override
+  public Database getDatabase() {
+    return getElytraProxy().getDatabase();
+  }
+
+  @Override
+  public VirtualFactory getVirtualFactory() {
+    return getElytraProxy().getVirtualFactory();
+  }
   // ElytraProxy End
 
   @Override
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
index 3d55ea41..bfad30f4 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
@@ -68,6 +68,7 @@ import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import net.elytrium.elytraproxy.commands.ElytraProxyCommand;
 import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.stats.Statistics;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -88,6 +89,11 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
   private final VelocityServer server;
   private @Nullable TabCompleteRequest outstandingTabComplete;
 
+  private boolean checkedBySettings = false;
+  private boolean checkedByBrand = false;
+  private boolean handledUnknown = false;
+  private boolean handledChat = false;
+
   /**
    * Constructs a client play session handler.
    * @param server the Velocity server instance
@@ -135,6 +141,40 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
 
   @Override
   public boolean handle(ClientSettings packet) {
+    Statistics statistics = server.getElytraProxy().getStatistics();
+    if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
+      if (packet.toString().contains("null")) {
+        logger.error("{} -> " + packet, player);
+        player.disconnect(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS));
+        logger.error("{} has null in settings packet", player);
+        statistics.addBlockedConnection();
+        statistics.addBlockedBots();
+      } else if (!packet.isChatColors()) {
+        logger.error("{} -> " + packet, player);
+        player.disconnect(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS_CHAT_COLOR));
+        logger.error("{} doesn't send isChatColors packet",
+            player);
+        statistics.addBlockedConnection();
+        statistics.addBlockedBots();
+      } else if (packet.getSkinParts() == 0) {
+        logger.error("{} -> " + packet, player);
+        player.disconnect(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS_SKIN_PARTS));
+        logger.error("{} doesn't send skin parts packet",
+            player);
+        statistics.addBlockedConnection();
+        statistics.addBlockedBots();
+      }
+    }
+    checkedBySettings = true;
     player.setPlayerSettings(packet);
     return false; // will forward onto the server
   }
@@ -150,6 +190,11 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
       return true;
     }
 
+    if (!handledChat) {
+      kickIfCheckNotPassed();
+      handledChat = true;
+    }
+
     String msg = packet.getMessage();
     if (msg.startsWith("/")) {
       String originalCommand = msg.substring(1);
@@ -251,6 +296,9 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
         player.getKnownChannels().removeAll(PluginMessageUtil.getChannels(packet));
         backendConn.write(packet.retain());
       } else if (PluginMessageUtil.isMcBrand(packet)) {
+        checkedByBrand = true;
+        logger.info("{} has client brand {}", player,
+            PluginMessageUtil.readBrandMessage(packet.content()));
         player.setClientBrand(PluginMessageUtil.readBrandMessage(packet.content()));
         backendConn.write(PluginMessageUtil
             .rewriteMinecraftBrand(packet, server.getVersion(), player.getProtocolVersion()));
@@ -335,6 +383,11 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
       return;
     }
 
+    if (!handledUnknown) {
+      kickIfCheckNotPassed();
+      handledUnknown = true;
+    }
+
     MinecraftConnection smc = serverConnection.getConnection();
     if (smc != null && !smc.isClosed() && serverConnection.getPhase().consideredComplete()) {
       smc.write(buf.retain());
@@ -386,6 +439,29 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
   public void handleBackendJoinGame(JoinGame joinGame, VelocityServerConnection destination) {
     final MinecraftConnection serverMc = destination.ensureConnected();
 
+    handleBackendJoinGame(joinGame);
+
+    destination.setActiveDimensionRegistry(joinGame.getDimensionRegistry()); // 1.16
+
+    // Tell the server about this client's plugin message channels.
+    ProtocolVersion serverVersion = serverMc.getProtocolVersion();
+    if (!player.getKnownChannels().isEmpty()) {
+      serverMc.delayedWrite(constructChannelsPacket(serverVersion, player.getKnownChannels()));
+    }
+
+    // If we had plugin messages queued during login/FML handshake, send them now.
+    PluginMessage pm;
+    while ((pm = loginPluginMessages.poll()) != null) {
+      serverMc.delayedWrite(pm);
+    }
+
+    // Flush everything
+    player.getConnection().flush();
+    serverMc.flush();
+    destination.completeJoin();
+  }
+
+  public void handleBackendJoinGame(JoinGame joinGame) {
     if (!spawned) {
       // The player wasn't spawned in yet, so we don't need to do anything special. Just send
       // JoinGame.
@@ -400,14 +476,14 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
       // The player is switching from a server already, so we need to tell the client to change
       // entity IDs and send new dimension information.
       if (player.getConnection().getType() == ConnectionTypes.LEGACY_FORGE) {
-        this.doSafeClientServerSwitch(joinGame);
+        createSafeClientServerSwitch(joinGame)
+            .forEach(player.getConnection()::delayedWrite);
       } else {
-        this.doFastClientServerSwitch(joinGame);
+        createFastClientServerSwitch(joinGame, player.getProtocolVersion())
+            .forEach(player.getConnection()::delayedWrite);
       }
     }
 
-    destination.setActiveDimensionRegistry(joinGame.getDimensionRegistry()); // 1.16
-
     // Remove previous boss bars. These don't get cleared when sending JoinGame, thus the need to
     // track them.
     for (UUID serverBossBar : serverBossBars) {
@@ -418,31 +494,15 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
     }
     serverBossBars.clear();
 
-    // Tell the server about this client's plugin message channels.
-    ProtocolVersion serverVersion = serverMc.getProtocolVersion();
-    if (!player.getKnownChannels().isEmpty()) {
-      serverMc.delayedWrite(constructChannelsPacket(serverVersion, player.getKnownChannels()));
-    }
-
-    // If we had plugin messages queued during login/FML handshake, send them now.
-    PluginMessage pm;
-    while ((pm = loginPluginMessages.poll()) != null) {
-      serverMc.delayedWrite(pm);
-    }
 
     // Clear any title from the previous server.
     if (player.getProtocolVersion().compareTo(MINECRAFT_1_8) >= 0) {
       player.getConnection().delayedWrite(GenericTitlePacket.constructTitlePacket(
           GenericTitlePacket.ActionType.RESET, player.getProtocolVersion()));
     }
-
-    // Flush everything
-    player.getConnection().flush();
-    serverMc.flush();
-    destination.completeJoin();
   }
 
-  private void doFastClientServerSwitch(JoinGame joinGame) {
+  public static List<MinecraftPacket> createFastClientServerSwitch(JoinGame joinGame, ProtocolVersion version) {
     // In order to handle switching to another server, you will need to send two packets:
     //
     // - The join game packet from the backend server, with a different dimension
@@ -451,44 +511,50 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
     // Most notably, by having the client accept the join game packet, we can work around the need
     // to perform entity ID rewrites, eliminating potential issues from rewriting packets and
     // improving compatibility with mods.
+    List<MinecraftPacket> packets = new ArrayList<>();
     int sentOldDim = joinGame.getDimension();
-    if (player.getProtocolVersion().compareTo(MINECRAFT_1_16) < 0) {
+    if (version.compareTo(MINECRAFT_1_16) < 0) {
       // Before Minecraft 1.16, we could not switch to the same dimension without sending an
       // additional respawn. On older versions of Minecraft this forces the client to perform
       // garbage collection which adds additional latency.
       joinGame.setDimension(joinGame.getDimension() == 0 ? -1 : 0);
     }
-    player.getConnection().delayedWrite(joinGame);
+    packets.add(joinGame);
 
-    player.getConnection().delayedWrite(
+    packets.add(
         new Respawn(sentOldDim, joinGame.getPartialHashedSeed(),
             joinGame.getDifficulty(), joinGame.getGamemode(), joinGame.getLevelType(),
             false, joinGame.getDimensionInfo(), joinGame.getPreviousGamemode(),
             joinGame.getCurrentDimensionData()));
+
+    return packets;
   }
 
-  private void doSafeClientServerSwitch(JoinGame joinGame) {
+  public static List<MinecraftPacket> createSafeClientServerSwitch(JoinGame joinGame) {
     // Some clients do not behave well with the "fast" respawn sequence. In this case we will use
     // a "safe" respawn sequence that involves sending three packets to the client. They have the
     // same effect but tend to work better with buggier clients (Forge 1.8 in particular).
+    List<MinecraftPacket> packets = new ArrayList<>();
 
     // Send the JoinGame packet itself, unmodified.
-    player.getConnection().delayedWrite(joinGame);
+    packets.add(joinGame);
 
     // Send a respawn packet in a different dimension.
     int tempDim = joinGame.getDimension() == 0 ? -1 : 0;
-    player.getConnection().delayedWrite(
+    packets.add(
         new Respawn(tempDim, joinGame.getPartialHashedSeed(), joinGame.getDifficulty(),
             joinGame.getGamemode(), joinGame.getLevelType(),
             false, joinGame.getDimensionInfo(), joinGame.getPreviousGamemode(),
             joinGame.getCurrentDimensionData()));
 
     // Now send a respawn packet in the correct dimension.
-    player.getConnection().delayedWrite(
+    packets.add(
         new Respawn(joinGame.getDimension(), joinGame.getPartialHashedSeed(),
             joinGame.getDifficulty(), joinGame.getGamemode(), joinGame.getLevelType(),
             false, joinGame.getDimensionInfo(), joinGame.getPreviousGamemode(),
             joinGame.getCurrentDimensionData()));
+
+    return packets;
   }
 
   public List<UUID> getServerBossBars() {
@@ -598,6 +664,27 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
         });
   }
 
+  private void kickIfCheckNotPassed() {
+    Statistics statistics = server.getElytraProxy().getStatistics();
+    if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
+      player.disconnect(
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS));
+      statistics.addBlockedConnection();
+      statistics.addBlockedBots();
+    }
+    if ((!checkedByBrand) && Settings.IMP.ANTIBOT.CHECK_CLIENT_BRAND) {
+      player.disconnect(
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_BRAND));
+      statistics.addBlockedConnection();
+      statistics.addBlockedBots();
+    }
+  }
+
+
   private void finishRegularTabComplete(TabCompleteRequest request, TabCompleteResponse response) {
     List<String> offers = new ArrayList<>();
     for (Offer offer : response.getOffers()) {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
index f45798e6..35873645 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
@@ -85,7 +85,10 @@ import java.util.concurrent.CompletionException;
 import java.util.concurrent.ThreadLocalRandom;
 import lombok.Getter;
 import lombok.Setter;
+import net.elytrium.elytraproxy.api.virtual.VirtualServer;
+import net.elytrium.elytraproxy.api.virtual.VirtualSessionHandler;
 import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.virtual.server.VirtualServerImpl;
 import net.kyori.adventure.audience.MessageType;
 import net.kyori.adventure.bossbar.BossBar;
 import net.kyori.adventure.identity.Identity;
@@ -442,6 +445,11 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
     return new ConnectionRequestBuilderImpl(server);
   }
 
+  @Override
+  public void sendToVirtualServer(VirtualServer server, VirtualSessionHandler handler) {
+    ((VirtualServerImpl) server).spawnPlayer(this, handler);
+  }
+
   @Override
   public List<GameProfile.Property> getGameProfileProperties() {
     return this.profile.getProperties();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
index f8ba68e1..c558d014 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
@@ -61,6 +61,7 @@ import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ThreadLocalRandom;
 import net.elytrium.elytraproxy.ElytraProxy;
+import net.elytrium.elytraproxy.api.event.AuthEvent;
 import net.elytrium.elytraproxy.config.Settings;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
@@ -205,30 +206,12 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
 
           InetSocketAddress adr = inbound.getRemoteAddress();
           if (!result.isForceOfflineMode()
-              // Reduce amount of Mojang API when player is not checked
-              && !server.getElytraProxy().shouldCheck(login.getUsername(), adr.getAddress())
+              // Reduce usage of Mojang API when player is not checked
+              && (Settings.IMP.ANTIBOT.ONLINE_MODE_VERIFY
+              || !server.getElytraProxy().shouldCheck(login.getUsername(), adr.getAddress()))
               && (server.getConfiguration().isOnlineMode()
-                || result.isOnlineModeAllowed()
-                || (Settings.IMP.AUTH.ENABLE && !Settings.IMP.AUTH.ONLINE_MODE_NEED_AUTH))) {
-            if (Settings.IMP.AUTH.ENABLE) {
-              ListenableFuture<Response> isPremiumResponse = server.getElytraProxy()
-                  .isPremiumRequest(login.getUsername()).execute();
-
-              isPremiumResponse.addListener(() -> {
-                try {
-                  if (isPremiumResponse.get().getStatusCode() == 200) {
-                    requestEncryption();
-                  } else {
-                    initializeOfflineMode();
-                  }
-                } catch (InterruptedException | ExecutionException e) {
-                  logger.error("Unable to authenticate with Mojang", e);
-                  mcConnection.close(true);
-                }
-              }, mcConnection.eventLoop());
-            } else {
-              requestEncryption();
-            }
+              || result.isOnlineModeAllowed())) {
+            requestEncryption();
           } else {
             initializeOfflineMode();
           }
@@ -338,7 +321,7 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
         preLoginCheck(player);
       } else {
         completeLoginProtocol(player, true);
-        authOrInitialize(player);
+        initialize(player);
       }
       // ElytraProxy End
     }, mcConnection.eventLoop()).exceptionally((ex) -> {
@@ -364,10 +347,10 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
   // BotFilter BackPort Start
   private void injectBotFilterOrFinishLogin(ConnectedPlayer player) {
     if (server.getElytraProxy().shouldCheck(player)) {
-      server.getElytraProxy().setupPipelineAndStartCheck(player, this);
+      server.getElytraProxy().startCheck(player, this);
     } else {
       completeLoginProtocol(player, true);
-      authOrInitialize(player);
+      initialize(player);
     }
   }
 
@@ -447,80 +430,77 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
     }
   }
 
-  // ElytraProxy Start
-  public void authOrInitialize(ConnectedPlayer player) {
-    if (Settings.IMP.AUTH.ENABLE && server.getElytraProxy().shouldAuth(player)) {
-      if (Settings.IMP.AUTH.ONLINE_MODE_NEED_AUTH || !player.isOnlineMode()) {
-        server.getElytraProxy().auth(player, this);
-        return;
-      }
-    }
-
-    player.getConnection().setSessionHandler(this);
-    initialize(player);
-  }
-  // ElytraProxy End
-
   public void initialize(ConnectedPlayer player) {
-    mcConnection.setAssociation(player);
     mcConnection.setState(StateRegistry.PLAY);
 
+    AuthEvent authEvent = new AuthEvent(player);
     server.getEventManager()
-        .fire(new PermissionsSetupEvent(player, ConnectedPlayer.DEFAULT_PERMISSIONS))
-        .thenComposeAsync(premissionEvent -> {
-
-          if (mcConnection.isClosed()) {
-            return CompletableFuture.completedFuture(null);
+        .fire(authEvent)
+        .thenRunAsync(() -> {
+          if (authEvent.getResult().isAllowed()) {
+            return;
           }
 
-          // wait for permissions to load, then set the players permission function
-          final PermissionFunction function = premissionEvent.createFunction(player);
-          if (function == null) {
-            logger.error(
-                "A plugin permission provider {} provided an invalid permission function"
-                    + " for player {}. This is a bug in the plugin, not in Velocity. Falling"
-                    + " back to the default permission function.",
-                premissionEvent.getProvider().getClass().getName(),
-                player.getUsername());
-          } else {
-            player.setPermissionFunction(function);
-          }
+          mcConnection.setAssociation(player);
+          mcConnection.setState(StateRegistry.PLAY);
+
+          server.getEventManager()
+              .fire(new PermissionsSetupEvent(player, ConnectedPlayer.DEFAULT_PERMISSIONS))
+              .thenComposeAsync(premissionEvent -> {
 
-          return server.getEventManager().fire(new LoginEvent(player))
-              .thenAcceptAsync(event -> {
                 if (mcConnection.isClosed()) {
-                  // The player was disconnected
-                  server.getEventManager().fireAndForget(new DisconnectEvent(player,
-                      LoginStatus.CANCELLED_BY_USER_BEFORE_COMPLETE));
-                  return;
+                  return CompletableFuture.completedFuture(null);
                 }
 
-                Optional<Component> reason = event.getResult().getReasonComponent();
-                if (reason.isPresent()) {
-                  player.disconnect0(reason.get(), true);
+                // wait for permissions to load, then set the players permission function
+                final PermissionFunction function = premissionEvent.createFunction(player);
+                if (function == null) {
+                  logger.error(
+                      "A plugin permission provider {} provided an invalid permission function"
+                          + " for player {}. This is a bug in the plugin, not in Velocity. Falling"
+                          + " back to the default permission function.",
+                      premissionEvent.getProvider().getClass().getName(),
+                      player.getUsername());
                 } else {
-                  if (!server.registerConnection(player)) {
-                    player.disconnect0(/*Component.translatable("velocity.error.already-connected-proxy"),*/
-                        LegacyComponentSerializer
-                            .legacyAmpersand()
-                            .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY), true);
-                    return;
-                  }
-
-                  mcConnection.setSessionHandler(new InitialConnectSessionHandler(player));
-                  server.getEventManager().fire(new PostLoginEvent(player))
-                      .thenCompose((ignored) -> connectToInitialServer(player))
-                      .exceptionally((ex) -> {
-                        logger.error("Exception while connecting {} to initial server", player, ex);
-                        return null;
-                      });
+                  player.setPermissionFunction(function);
                 }
-              }, mcConnection.eventLoop());
-        }, mcConnection.eventLoop())
-        .exceptionally((ex) -> {
-          logger.error("Exception while completing login initialisation phase for {}", player, ex);
-          return null;
-        });
+
+                return server.getEventManager().fire(new LoginEvent(player))
+                    .thenAcceptAsync(event -> {
+                      if (mcConnection.isClosed()) {
+                        // The player was disconnected
+                        server.getEventManager().fireAndForget(new DisconnectEvent(player,
+                            LoginStatus.CANCELLED_BY_USER_BEFORE_COMPLETE));
+                        return;
+                      }
+
+                      Optional<Component> reason = event.getResult().getReasonComponent();
+                      if (reason.isPresent()) {
+                        player.disconnect0(reason.get(), true);
+                      } else {
+                        if (!server.registerConnection(player)) {
+                          player.disconnect0(/*Component.translatable("velocity.error.already-connected-proxy"),*/
+                              LegacyComponentSerializer
+                                  .legacyAmpersand()
+                                  .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY), true);
+                          return;
+                        }
+
+                        mcConnection.setSessionHandler(new InitialConnectSessionHandler(player));
+                        server.getEventManager().fire(new PostLoginEvent(player))
+                            .thenCompose((ignored) -> connectToInitialServer(player))
+                            .exceptionally((ex) -> {
+                              logger.error("Exception while connecting {} to initial server", player, ex);
+                              return null;
+                            });
+                      }
+                    }, mcConnection.eventLoop());
+              }, mcConnection.eventLoop())
+              .exceptionally((ex) -> {
+                logger.error("Exception while completing login initialisation phase for {}", player, ex);
+                return null;
+              });
+        }, mcConnection.eventLoop());
   }
   // BotFilter BackPort End
 
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/StateRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/StateRegistry.java
index b9e34cd4..3913092b 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/StateRegistry.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/StateRegistry.java
@@ -398,8 +398,18 @@ public enum StateRegistry {
     }
 
     public PacketMapping[] getMappingsForPacket(Class<? extends MinecraftPacket> packet, boolean encodeOnly) {
-      ProtocolVersion from = ProtocolVersion.MINIMUM_VERSION;
-      ProtocolVersion to = ProtocolVersion.MAXIMUM_VERSION;
+      return getMappingsForPacket(ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MAXIMUM_VERSION, packet, encodeOnly);
+    }
+
+    public PacketMapping[] getMappingsForPacket(
+        ProtocolVersion from, Class<? extends MinecraftPacket> packet, boolean encodeOnly) {
+
+      return getMappingsForPacket(from, ProtocolVersion.MAXIMUM_VERSION, packet, encodeOnly);
+    }
+
+    public PacketMapping[] getMappingsForPacket(
+        ProtocolVersion from, ProtocolVersion to, Class<? extends MinecraftPacket> packet, boolean encodeOnly) {
+
       List<PacketMapping> mappings = new ArrayList<>();
       for (ProtocolVersion protocol : EnumSet.range(from, to)) {
         int id = getProtocolRegistry(protocol).getPacketId(packet);
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/ElytraProxy.java b/proxy/src/main/java/net/elytrium/elytraproxy/ElytraProxy.java
index f38cadd6..f08ef280 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/ElytraProxy.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/ElytraProxy.java
@@ -23,7 +23,6 @@ import com.velocitypowered.api.proxy.InboundConnection;
 import com.velocitypowered.proxy.VelocityServer;
 import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
 import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
-import com.velocitypowered.proxy.protocol.StateRegistry;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.BufferedReader;
 import java.io.File;
@@ -36,41 +35,32 @@ import java.net.URLConnection;
 import java.net.http.HttpClient;
 import java.nio.charset.StandardCharsets;
 import java.sql.SQLException;
-import java.util.Locale;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import lombok.ToString;
-import net.elytrium.elytraproxy.auth.handler.AuthSessionHandler;
-import net.elytrium.elytraproxy.auth.model.RegisteredPlayer;
+import net.elytrium.elytraproxy.api.database.Database;
 import net.elytrium.elytraproxy.botfilter.CaptchaGeneration;
 import net.elytrium.elytraproxy.botfilter.handler.BotFilterSessionHandler;
 import net.elytrium.elytraproxy.commands.AlertCommand;
-import net.elytrium.elytraproxy.commands.ChangePasswordCommand;
 import net.elytrium.elytraproxy.commands.ElytraProxyCommand;
 import net.elytrium.elytraproxy.commands.FindCommand;
 import net.elytrium.elytraproxy.commands.SendCommand;
-import net.elytrium.elytraproxy.commands.TotpCommand;
-import net.elytrium.elytraproxy.commands.UnregisterCommand;
 import net.elytrium.elytraproxy.config.Settings;
-import net.elytrium.elytraproxy.database.Database;
 import net.elytrium.elytraproxy.database.MySqlDatabase;
 import net.elytrium.elytraproxy.database.SqliteDatabase;
 import net.elytrium.elytraproxy.stats.Statistics;
 import net.elytrium.elytraproxy.virtual.protocol.VirtualProtocol;
-import net.elytrium.elytraproxy.virtual.server.VirtualServer;
+import net.elytrium.elytraproxy.virtual.server.CachedPackets;
+import net.elytrium.elytraproxy.virtual.server.VirtualFactoryImpl;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-import org.asynchttpclient.BoundRequestBuilder;
-import org.asynchttpclient.ListenableFuture;
-import org.asynchttpclient.Response;
 
 @Getter
 @ToString
@@ -86,8 +76,9 @@ public class ElytraProxy {
   private ScheduledExecutorService scheduler;
 
   private final VelocityServer velocityServer;
-  private final VirtualServer virtualServer;
   private final Statistics statistics;
+  private final CachedPackets packets;
+  private final VirtualFactoryImpl virtualFactory = new VirtualFactoryImpl(this);
 
   private final HttpClient httpClient = HttpClient.newBuilder()
       .version(HttpClient.Version.HTTP_2)
@@ -105,9 +96,9 @@ public class ElytraProxy {
     statistics.startUpdating();
     // BotFilter start
     CaptchaGeneration.init();
+    this.packets = new CachedPackets(this);
+    packets.createPackets();
     this.velocityServer = velocityServer;
-    this.virtualServer = new VirtualServer(this);
-    this.virtualServer.reload();
     // BotFilter end
     registerCommand(velocityServer);
     checkForUpdates();
@@ -122,11 +113,7 @@ public class ElytraProxy {
     }
     scheduler =
         Executors.newScheduledThreadPool(1, task -> new Thread(task, "purge-cache"));
-    scheduler.scheduleAtFixedRate(
-        () -> checkCache(cachedAuthChecks, Settings.IMP.AUTH.PURGE_CACHE_MILLIS),
-        Settings.IMP.AUTH.PURGE_CACHE_MILLIS,
-        Settings.IMP.AUTH.PURGE_CACHE_MILLIS,
-        TimeUnit.MILLISECONDS);
+
     scheduler.scheduleAtFixedRate(
         () -> checkCache(cachedBotChecks, Settings.IMP.ANTIBOT.PURGE_CACHE_MILLIS),
         Settings.IMP.ANTIBOT.PURGE_CACHE_MILLIS,
@@ -140,40 +127,33 @@ public class ElytraProxy {
    */
 
   public void initDatabase(VelocityServer server) {
-    if (checkDatabaseEnabled()) {
-      Settings.DATABASE config = Settings.IMP.DATABASE;
+    Settings.DATABASE config = Settings.IMP.DATABASE;
 
-      try {
-        if (database != null) {
-          database.close();
-        }
+    try {
+      if (database != null) {
+        database.close();
+      }
 
-        switch (config.STORAGE_TYPE) {
-          case "sqlite":
-            Class.forName("org.sqlite.JDBC");
-            database = new SqliteDatabase(config.FILENAME);
-            break;
-          case "mysql":
-            database = new MySqlDatabase(config.HOSTNAME, config.DATABASE, config.USER, config.PASSWORD);
-            break;
-          default:
-            logger.error(Settings.IMP.MESSAGES.ELYTRAPROXY.DB_FAILURE);
-            server.shutdown();
-            break;
-        }
-        database.makeTable(Settings.IMP.AUTH.TABLE, RegisteredPlayer.getDatabaseItem());
-      } catch (SQLException | ClassNotFoundException e) {
-        logger.error(e);
-        logger.error(Settings.IMP.MESSAGES.ELYTRAPROXY.DB_FAILURE);
-        server.shutdown();
+      switch (config.STORAGE_TYPE) {
+        case "sqlite":
+          Class.forName("org.sqlite.JDBC");
+          database = new SqliteDatabase(config.FILENAME);
+          break;
+        case "mysql":
+          database = new MySqlDatabase(config.HOSTNAME, config.DATABASE, config.USER, config.PASSWORD);
+          break;
+        default:
+          logger.error(Settings.IMP.MESSAGES.ELYTRAPROXY.DB_FAILURE);
+          server.shutdown();
+          break;
       }
+    } catch (SQLException | ClassNotFoundException e) {
+      logger.error(e);
+      logger.error(Settings.IMP.MESSAGES.ELYTRAPROXY.DB_FAILURE);
+      server.shutdown();
     }
   }
 
-  public boolean checkDatabaseEnabled() {
-    return Settings.IMP.AUTH.ENABLE;
-  }
-
   /**
    * Initializes ElytraProxy commands.
    * Инициализирует команды ElytraProxy.
@@ -185,19 +165,11 @@ public class ElytraProxy {
     manager.unregister("alert");
     manager.unregister("find");
     manager.unregister("send");
-    manager.unregister("unregister");
-    manager.unregister("changepass");
 
     manager.register("elytraproxy", new ElytraProxyCommand(server, this));
     manager.register("alert", new AlertCommand(server));
     manager.register("find", new FindCommand(server));
     manager.register("send", new SendCommand(server));
-
-    if (Settings.IMP.AUTH.ENABLE) {
-      manager.register("unregister", new UnregisterCommand(database));
-      manager.register("changepass", new ChangePasswordCommand(database));
-      manager.register("2fa", new TotpCommand(database));
-    }
   }
 
   public boolean shouldCheck(ConnectedPlayer player) {
@@ -216,83 +188,27 @@ public class ElytraProxy {
     }
   }
 
-  public boolean shouldAuth(ConnectedPlayer player) {
-    if (Settings.IMP.AUTH.CACHE_AUTH_USERS) {
-      if (cachedAuthChecks.containsKey(player.getUsername())) {
-        InetSocketAddress adr = (InetSocketAddress) player.getConnection().getRemoteAddress();
-        return !adr.getAddress().equals(cachedAuthChecks.get(player.getUsername()).getInetAddress());
-      } else {
-        return true;
-      }
-    } else {
-      return true;
-    }
-  }
-
   public void cacheSucceedUser(ConnectedPlayer player) {
     cachedBotChecks.remove(player.getUsername());
     InetSocketAddress adr = (InetSocketAddress) player.getConnection().getRemoteAddress();
     cachedBotChecks.put(player.getUsername(), new CachedUser(adr.getAddress(), System.currentTimeMillis()));
   }
 
-  public void cacheAuthUser(ConnectedPlayer player) {
-    if (Settings.IMP.AUTH.CACHE_AUTH_USERS) {
-      cachedAuthChecks.remove(player.getUsername());
-      InetSocketAddress adr = (InetSocketAddress) player.getConnection().getRemoteAddress();
-      cachedAuthChecks.put(player.getUsername(), new CachedUser(adr.getAddress(), System.currentTimeMillis()));
-    }
-  }
-
-  public void setupPipelineAndStartCheck(ConnectedPlayer player, LoginSessionHandler handler) {
+  public void startCheck(ConnectedPlayer player, LoginSessionHandler handler) {
     try {
       BotFilterSessionHandler botFilterSessionHandler =
-          new BotFilterSessionHandler(player, handler, virtualServer);
+          new BotFilterSessionHandler(player, this);
 
-      virtualServer.spawnPlayer(botFilterSessionHandler);
+      handler.completeLoginProtocol(player, true);
+
+      packets.getAntiBotVirtualServerImpl().spawnPlayer(player, botFilterSessionHandler);
     } catch (Throwable t) {
       logger.error("Error", t);
     }
   }
 
-  public void auth(ConnectedPlayer player, LoginSessionHandler handler) {
-    if (player.getConnection().getState() != StateRegistry.VIRTUAL) {
-      player.getConnection().setState(StateRegistry.PLAY);
-    }
-    String nickname = player.getUsername().toLowerCase(Locale.ROOT);
-    for (char character : nickname.toCharArray()) {
-      if (!Settings.IMP.AUTH.ALLOWED_NICKNAME_CHARS.contains(String.valueOf(character))) {
-        player.getConnection().closeWith(virtualServer.getPackets().getNicknameInvalid());
-        return;
-      }
-    }
-
-    if (!Settings.IMP.AUTH.ONLINE_MODE_NEED_AUTH) {
-      ListenableFuture<Response> isPremiumResponse = isPremiumRequest(nickname).execute();
-
-      isPremiumResponse.addListener(() -> {
-        try {
-          if (isPremiumResponse.get().getStatusCode() == 200) {
-            player.getConnection().closeWith(virtualServer.getPackets().getNicknamePremium());
-          } else {
-            sendToAuthServer(player, handler, nickname);
-          }
-        } catch (InterruptedException | ExecutionException e) {
-          logger.error("Unable to authenticate with Mojang", e);
-          player.getConnection().close(true);
-        }
-      }, player.getConnection().eventLoop());
-    } else {
-      sendToAuthServer(player, handler, nickname);
-    }
-  }
-
-  public BoundRequestBuilder isPremiumRequest(String nickname) {
-    return velocityServer.getAsyncHttpClient()
-        .prepareGet("https://api.mojang.com/users/profiles/minecraft/" + nickname);
-  }
-
   public void shutdown() {
-    if (checkDatabaseEnabled() && database != null) {
+    if (database != null) {
       database.close();
     }
   }
@@ -304,17 +220,6 @@ public class ElytraProxy {
         .forEach(userMap::remove);
   }
 
-  private void sendToAuthServer(ConnectedPlayer player, LoginSessionHandler handler, String nickname) {
-    try {
-      AuthSessionHandler authSessionHandler =
-          new AuthSessionHandler(player, handler, virtualServer, nickname);
-
-      virtualServer.spawnPlayer(authSessionHandler);
-    } catch (Throwable t) {
-      logger.error("Error", t);
-    }
-  }
-
   public void checkHostname(ConnectedPlayer player, InboundConnection inbound, HostnameCheckType type) {
     boolean isLogin = (type == HostnameCheckType.LOGIN);
     if (isLogin) {
@@ -397,6 +302,10 @@ public class ElytraProxy {
     }
   }
 
+  public VirtualFactoryImpl getVirtualFactory() {
+    return virtualFactory;
+  }
+
   @SuppressFBWarnings("NP_IMMEDIATE_DEREFERENCE_OF_READLINE")
   private void checkForUpdates() {
     try {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage116.java b/proxy/src/main/java/net/elytrium/elytraproxy/api/virtual/mcprotocollib/BitStorage116.java
similarity index 98%
rename from proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage116.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/api/virtual/mcprotocollib/BitStorage116.java
index 2e965f4e..cc5bfa19 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage116.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/api/virtual/mcprotocollib/BitStorage116.java
@@ -22,7 +22,7 @@
  * OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib;
+package net.elytrium.elytraproxy.api.virtual.mcprotocollib;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.ProtocolUtils;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage19.java b/proxy/src/main/java/net/elytrium/elytraproxy/api/virtual/mcprotocollib/BitStorage19.java
similarity index 98%
rename from proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage19.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/api/virtual/mcprotocollib/BitStorage19.java
index dcf42f5b..b178e52f 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage19.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/api/virtual/mcprotocollib/BitStorage19.java
@@ -22,7 +22,7 @@
  * OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib;
+package net.elytrium.elytraproxy.api.virtual.mcprotocollib;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.ProtocolUtils;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/auth/handler/AuthSessionHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/auth/handler/AuthSessionHandler.java
deleted file mode 100644
index 26b8d99c..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/auth/handler/AuthSessionHandler.java
+++ /dev/null
@@ -1,239 +0,0 @@
-/*
- * Copyright (C) 2021 Elytrium
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.auth.handler;
-
-import at.favre.lib.crypto.bcrypt.BCrypt;
-import com.google.common.collect.ImmutableMap;
-import com.velocitypowered.proxy.connection.MinecraftConnection;
-import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
-import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
-import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
-import com.velocitypowered.proxy.protocol.packet.Chat;
-import dev.samstevens.totp.code.CodeGenerator;
-import dev.samstevens.totp.code.CodeVerifier;
-import dev.samstevens.totp.code.DefaultCodeGenerator;
-import dev.samstevens.totp.code.DefaultCodeVerifier;
-import dev.samstevens.totp.time.SystemTimeProvider;
-import dev.samstevens.totp.time.TimeProvider;
-import java.net.InetSocketAddress;
-import java.nio.charset.StandardCharsets;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.atomic.AtomicInteger;
-import lombok.Getter;
-import net.elytrium.elytraproxy.auth.model.RegisteredPlayer;
-import net.elytrium.elytraproxy.config.Settings;
-import net.elytrium.elytraproxy.database.Database;
-import net.elytrium.elytraproxy.virtual.server.ServerPackets;
-import net.elytrium.elytraproxy.virtual.server.VirtualServer;
-import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
-
-public class AuthSessionHandler extends VirtualSessionHandler {
-  private static final TimeProvider timeProvider = new SystemTimeProvider();
-  private static final CodeGenerator codeGenerator = new DefaultCodeGenerator();
-  @Getter
-  private static final CodeVerifier verifier = new DefaultCodeVerifier(codeGenerator, timeProvider);
-  private final Database database;
-  private final RegisteredPlayer playerInfo;
-  private final ServerPackets packets;
-  private final MinecraftConnection connection;
-  private final String ip;
-  private boolean totp = false;
-
-  private int attempts = Settings.IMP.AUTH.LOGIN_ATTEMPTS;
-
-  public AuthSessionHandler(
-      ConnectedPlayer player, MinecraftSessionHandler originalHandler,
-      VirtualServer virtualServer, String lowercaseNickname) {
-    super(player, originalHandler, virtualServer);
-    this.database = virtualServer.getElytraProxy().getDatabase();
-    this.packets = virtualServer.getPackets();
-    this.connection = player.getConnection();
-    this.playerInfo = fetchInfo(lowercaseNickname);
-    this.ip = ((InetSocketAddress) connection.getRemoteAddress()).getAddress().getHostAddress();
-  }
-
-
-  @Override
-  public boolean handle(Chat chat) {
-    String[] args = chat.getMessage().split(" ");
-    if (args.length != 0) {
-      switch (args[0]) {
-        case "/reg":
-        case "/register":
-        case "/r":
-          if (args.length >= 3 && !totp && playerInfo == null && args[1].equals(args[2])) {
-            register(args[1]);
-            finish();
-          } else {
-            sendMessage();
-          }
-          break;
-        case "/log":
-        case "/login":
-        case "/l":
-          if (args.length >= 2 && !totp && playerInfo != null) {
-            if (checkPassword(args[1])) {
-              finishOrTotp();
-            } else if (attempts-- != 0) {
-              connection.write(packets.getWrongPasswordChat());
-            } else {
-              connection.closeWith(packets.getWrongPassword());
-            }
-          } else {
-            sendMessage();
-          }
-          break;
-        case "/totp":
-        case "/2fa":
-          if (args.length >= 2 && totp) {
-            if (verifier.isValidCode(playerInfo.totpToken, args[1])) {
-              finish();
-            } else {
-              sendMessage();
-            }
-          } else {
-            sendMessage();
-          }
-          break;
-        default:
-          sendMessage();
-          break;
-      }
-    }
-    return true;
-  }
-
-  @Override
-  public void onSpawn() {
-    virtualServer.loginComplete(this);
-    connection.write(packets.getAuthPosition());
-    connection.write(packets.getStaticWorldPacket());
-    connection.write(packets.getNoAbilities());
-    if (playerInfo == null) {
-      checkIp();
-    } else {
-      checkCase();
-    }
-    sendMessage();
-    connection.flush();
-  }
-
-  public static RegisteredPlayer fetchInfo(Database database, String nickname) {
-    return database.getItem(
-        Settings.IMP.AUTH.TABLE,
-        ImmutableMap.of("lowercaseNickname", nickname),
-        RegisteredPlayer.class);
-  }
-
-  private RegisteredPlayer fetchInfo(String nickname) {
-    return fetchInfo(database, nickname);
-  }
-
-  private boolean checkPassword(String password) {
-    return BCrypt.verifyer().verify(
-        password.getBytes(StandardCharsets.UTF_8),
-        playerInfo.hash.getBytes(StandardCharsets.UTF_8)
-    ).verified;
-  }
-
-  private void checkIp() {
-    List<RegisteredPlayer> alreadyRegistered = database.getItems(
-        Settings.IMP.AUTH.TABLE,
-        ImmutableMap.of("ip", ip),
-        RegisteredPlayer.class
-    );
-
-    AtomicInteger sizeOfValid = new AtomicInteger(alreadyRegistered.size());
-    long checkDate = System.currentTimeMillis() - Settings.IMP.AUTH.IP_LIMIT_VALID_TIME;
-    Map<String, Object> clearIpMap = ImmutableMap.of("ip", "");
-
-    alreadyRegistered.stream()
-        .filter(e -> e.regdate < checkDate)
-        .map(e -> ImmutableMap.of("lowercaseNickname", (Object) e.lowercaseNickname))
-        .forEach(e -> {
-          database.updateMap(
-              Settings.IMP.AUTH.TABLE, e, clearIpMap
-          );
-          sizeOfValid.decrementAndGet();
-        });
-
-    if (sizeOfValid.get() >= Settings.IMP.AUTH.IP_LIMIT_REGISTRATIONS) {
-      connection.closeWith(packets.getIpLimit());
-    }
-  }
-
-  private void checkCase() {
-    if (!player.getUsername().equals(playerInfo.nickname)) {
-      connection.closeWith(packets.getWrongNicknameCase());
-    }
-  }
-
-  private void register(String password) {
-    String hash = genHash(password);
-
-    RegisteredPlayer registeredPlayer = new RegisteredPlayer(
-        player.getUsername(),
-        lowercaseNickname,
-        hash,
-        ip,
-        "",
-        System.currentTimeMillis()
-    );
-
-    database.insert(
-        Settings.IMP.AUTH.TABLE,
-        registeredPlayer,
-        RegisteredPlayer.class,
-        false
-    );
-  }
-
-  private void finishOrTotp() {
-    if (playerInfo.totpToken.isEmpty()) {
-      finish();
-    } else {
-      totp = true;
-      sendMessage();
-    }
-  }
-
-  private void finish() {
-    disconnected();
-    connection.setSessionHandler(originalHandler);
-    ((LoginSessionHandler) originalHandler).initialize(player);
-    virtualServer.getElytraProxy().cacheAuthUser(player);
-  }
-
-  private void sendMessage() {
-    if (totp) {
-      connection.write(packets.getTotpChat());
-    } else if (playerInfo == null) {
-      connection.write(packets.getRegisterChat());
-    } else {
-      connection.write(packets.getLoginChat());
-    }
-  }
-
-  public static String genHash(String password) {
-    return BCrypt.withDefaults().hashToString(
-        Settings.IMP.AUTH.BCRYPT_COST,
-        password.toCharArray()
-    );
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/auth/model/RegisteredPlayer.java b/proxy/src/main/java/net/elytrium/elytraproxy/auth/model/RegisteredPlayer.java
deleted file mode 100644
index 94fff09d..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/auth/model/RegisteredPlayer.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * Copyright (C) 2021 Elytrium
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.auth.model;
-
-import java.util.Map;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import net.elytrium.elytraproxy.database.DatabaseItem;
-
-@NoArgsConstructor
-@AllArgsConstructor
-public class RegisteredPlayer {
-  public String nickname;
-  public String lowercaseNickname;
-  public String hash;
-  public String ip;
-  public String totpToken;
-  public Long regdate;
-
-  private static final Map<String, String> tableInfo = Map.of(
-      "nickname", "VARCHAR(16)",
-      "lowercaseNickname", "VARCHAR(16)",
-      "hash", "VARCHAR(128)",
-      "ip", "VARCHAR(15)",
-      "totpToken", "VARCHAR(32)",
-      "regdate", "BIGINT UNSIGNED"
-  );
-
-  private static final String primaryKey = "lowercaseNickname";
-
-  @Getter private static final DatabaseItem databaseItem = new DatabaseItem(tableInfo, primaryKey);
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/CaptchaGeneration.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/CaptchaGeneration.java
index f989c6fe..3d9e9350 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/CaptchaGeneration.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/CaptchaGeneration.java
@@ -135,11 +135,14 @@ public class CaptchaGeneration {
   private Color randomNotWhiteColor() {
     MapPalette.Color[] colors = MapPalette.getColors();
 
-    int index = colorCounter.getAndIncrement();
-    if (index >= colors.length) {
-      index = 0;
-      colorCounter.set(0);
-    }
+    int index;
+    do {
+      index = colorCounter.getAndIncrement();
+      if (index >= colors.length) {
+        index = 0;
+        colorCounter.set(0);
+      }
+    } while (colors[index].getRed() >= 200 && colors[index].getGreen() >= 200 && colors[index].getBlue() >= 200);
 
     return colors[index].toJava();
   }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/BotFilterSessionHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/BotFilterSessionHandler.java
index bd098798..c2a4f2b1 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/BotFilterSessionHandler.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/BotFilterSessionHandler.java
@@ -22,25 +22,21 @@ package net.elytrium.elytraproxy.botfilter.handler;
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.connection.MinecraftConnection;
 import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
-import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
 import com.velocitypowered.proxy.protocol.MinecraftPacket;
-import com.velocitypowered.proxy.protocol.packet.Chat;
-import com.velocitypowered.proxy.protocol.packet.ClientSettings;
-import com.velocitypowered.proxy.protocol.packet.PluginMessage;
-import com.velocitypowered.proxy.protocol.util.PluginMessageUtil;
-import io.netty.buffer.ByteBuf;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.Objects;
 import lombok.Getter;
 import lombok.Setter;
+import net.elytrium.elytraproxy.ElytraProxy;
+import net.elytrium.elytraproxy.api.virtual.VirtualServer;
+import net.elytrium.elytraproxy.api.virtual.player.VirtualServerPlayer;
 import net.elytrium.elytraproxy.botfilter.cache.CachedCaptcha;
 import net.elytrium.elytraproxy.botfilter.cache.CaptchaHandler;
 import net.elytrium.elytraproxy.config.Settings;
 import net.elytrium.elytraproxy.stats.Statistics;
 import net.elytrium.elytraproxy.virtual.protocol.packet.SetExp;
-import net.elytrium.elytraproxy.virtual.server.ServerPackets;
-import net.elytrium.elytraproxy.virtual.server.VirtualServer;
+import net.elytrium.elytraproxy.virtual.server.CachedPackets;
 import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
-import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.Logger;
 
 @Getter
@@ -50,8 +46,10 @@ public class BotFilterSessionHandler extends FallingCheckHandler {
   private static final long TOTAL_TIME = (TOTAL_TICKS * 50) - 100;
 
   private final Statistics statistics;
+  private final ElytraProxy elytraProxy;
+  private final ConnectedPlayer player;
   private final Logger logger;
-  private final ServerPackets packets;
+  private final CachedPackets packets;
   private final MinecraftConnection connection;
   private final MinecraftPacket fallingCheckPos;
   private final MinecraftPacket fallingCheckChunk;
@@ -59,6 +57,7 @@ public class BotFilterSessionHandler extends FallingCheckHandler {
   private final double captchaY = Settings.IMP.ANTIBOT.CAPTCHA_COORDS.Y;
   @Setter
   private String captchaAnswer;
+  private VirtualServerPlayer virtualServerPlayer;
   private int ignoredTicks = 0;
   private long joinTime = System.currentTimeMillis();
   private int attempts = Settings.IMP.ANTIBOT.CAPTCHA_ATTEMPTS;
@@ -66,28 +65,31 @@ public class BotFilterSessionHandler extends FallingCheckHandler {
   private int nonValidPacketsSize = 0;
   @Getter
   private CheckState state = CheckState.valueOf(Settings.IMP.ANTIBOT.CHECK_STATE);
-  private boolean checkedBySettings = false;
-  private boolean checkedByBrand = false;
+  private VirtualServer server;
 
-  public BotFilterSessionHandler(ConnectedPlayer player, LoginSessionHandler originalHandler, VirtualServer virtualServer) {
-    super(player.getProtocolVersion(), player, originalHandler, virtualServer);
-    this.statistics = virtualServer.getElytraProxy().getStatistics();
-    this.logger = virtualServer.getElytraProxy().getLogger();
-    this.packets = virtualServer.getPackets();
+  public BotFilterSessionHandler(ConnectedPlayer player, ElytraProxy elytraProxy) {
+    super(player.getProtocolVersion());
+
+    this.elytraProxy = elytraProxy;
+    this.player = player;
+    this.statistics = elytraProxy.getStatistics();
+    this.logger = elytraProxy.getLogger();
+    this.packets = elytraProxy.getPackets();
     this.connection = player.getConnection();
-    this.fallingCheckPos = packets.createPlayerPosAndLookPacket(validX, validY, validZ, 0, 0);
+
+    Settings.ANTIBOT.CAPTCHA_COORDS captchaCoords = Settings.IMP.ANTIBOT.CAPTCHA_COORDS;
+    this.fallingCheckPos = packets.createPlayerPosAndLookPacket(
+        validX, validY, validZ, (float) captchaCoords.YAW, (float) captchaCoords.PITCH);
     this.fallingCheckChunk = packets.createChunkDataPacket(
-        new SimpleChunk(Math.floorDiv(validX, 16), Math.floorDiv(validZ, 16)), validY);
+        new SimpleChunk(validX >> 4, validZ >> 4), validY);
     this.fallingCheckView = packets.createUpdateViewPosition(validX, validZ);
   }
 
   @Override
-  public boolean handle(Chat chat) {
-    if (state == CheckState.CAPTCHA_POSITION || state == CheckState.ONLY_CAPTCHA) {
-      String message = chat.getMessage();
-      if (message.length() > 256) {
-        return false;
-      } else if (message.equals(captchaAnswer)) {
+  public void onChat(String message) {
+    if ((state == CheckState.CAPTCHA_POSITION || state == CheckState.ONLY_CAPTCHA) && message.length() <= 256) {
+      if (message.equals(captchaAnswer)) {
+        connection.write(packets.getResetSlot());
         finishCheck();
       } else if (--attempts != 0) {
         sendCaptcha();
@@ -96,69 +98,12 @@ public class BotFilterSessionHandler extends FallingCheckHandler {
         connection.closeWith(packets.getCaptchaFailed());
       }
     }
-    return true;
-  }
-
-  @Override
-  public boolean handle(PluginMessage packet) {
-    if (PluginMessageUtil.isMcBrand(packet) && !checkedByBrand) {
-      logger.info("{} has client brand {}", player,
-          PluginMessageUtil.readBrandMessage(packet.content()));
-      checkedByBrand = true;
-    }
-    return true;
-  }
-
-  @Override
-  public boolean handle(ClientSettings packet) {
-    if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
-      if (packet.toString().contains("null")) {
-        logger.error("{} -> " + packet, player);
-        player.disconnect(
-            LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS));
-        logger.error("{} has null in settings packet", player);
-        statistics.addBlockedConnection();
-        statistics.addBlockedBots();
-      } else if (!packet.isChatColors()) {
-        logger.error("{} -> " + packet, player);
-        player.disconnect(
-            LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS_CHAT_COLOR));
-        logger.error("{} doesn't send isChatColors packet",
-            player);
-        statistics.addBlockedConnection();
-        statistics.addBlockedBots();
-      } else if (packet.getSkinParts() == 0) {
-        logger.error("{} -> " + packet, player);
-        player.disconnect(
-            LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS_SKIN_PARTS));
-        logger.error("{} doesn't send skin parts packet",
-            player);
-        statistics.addBlockedConnection();
-        statistics.addBlockedBots();
-      }
-    }
-    checkedBySettings = true;
-    return true;
-  }
-
-  @Override
-  public void handleUnknown(ByteBuf packet) {
-    if (packet.readableBytes() > 2048) {
-      statistics.addBlockedBots();
-      connection.closeWith(packets.getTooBigPacket());
-    }
   }
 
+  @SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE")
   private void finishCheck() {
     if (System.currentTimeMillis() - joinTime < TOTAL_TIME && state != CheckState.ONLY_CAPTCHA) {
       if (state == CheckState.CAPTCHA_POSITION && ticks < TOTAL_TICKS) {
-        connection.write(packets.getResetSlot());
         state = CheckState.ONLY_POSITION;
       } else {
         if (state == CheckState.CAPTCHA_ON_POSITION_FAILED) {
@@ -170,17 +115,15 @@ public class BotFilterSessionHandler extends FallingCheckHandler {
       }
       return;
     }
-    kickIfCheckNotPassed();
     state = CheckState.SUCCESSFULLY;
-    disconnected();
-    if ((Settings.IMP.AUTH.ONLINE_MODE_NEED_AUTH || !player.isOnlineMode())
-        && !Settings.IMP.ANTIBOT.NEED_TO_RECONNECT) {
+    elytraProxy.cacheSucceedUser(player);
+
+    if (Settings.IMP.ANTIBOT.ONLINE_MODE_VERIFY && !Settings.IMP.ANTIBOT.NEED_TO_RECONNECT) {
       connection.write(packets.getSuccessfulBotFilterChat());
-      ((LoginSessionHandler) originalHandler).authOrInitialize(player);
+      virtualServerPlayer.disconnect();
     } else {
       connection.closeWith(packets.getSuccessfulBotFilterDisconnect());
     }
-    virtualServer.getElytraProxy().cacheSucceedUser(player);
   }
 
   @Override
@@ -188,7 +131,7 @@ public class BotFilterSessionHandler extends FallingCheckHandler {
     if (!startedListening && state != CheckState.ONLY_CAPTCHA) {
       if (x == validX && z == validZ) {
         startedListening = true;
-        connection.write(packets.getAntiBotBrand());
+        connection.write(packets.getAntiBotTitle());
       }
       if (nonValidPacketsSize > Settings.IMP.ANTIBOT.NON_VALID_POSITION_XZ_ATTEMPTS) {
         fallingCheckFailed();
@@ -244,13 +187,11 @@ public class BotFilterSessionHandler extends FallingCheckHandler {
   }
 
   @Override
-  public void onSpawn() {
-    ((LoginSessionHandler) originalHandler).completeLoginProtocol(player, false);
-    virtualServer.loginComplete(this);
+  public void onSpawn(VirtualServer server, VirtualServerPlayer player) {
+    this.server = server;
+    this.virtualServerPlayer = player;
     if (state == BotFilterSessionHandler.CheckState.ONLY_CAPTCHA) {
       sendCaptcha();
-      connection.write(packets.getCaptchaPosition());
-      connection.write(packets.getStaticWorldPacket());
     } else if (state == BotFilterSessionHandler.CheckState.CAPTCHA_POSITION) {
       sendCaptcha();
       sendFallingCheckPackets();
@@ -262,20 +203,20 @@ public class BotFilterSessionHandler extends FallingCheckHandler {
   }
 
   private void sendFallingCheckPackets() {
-    connection.write(fallingCheckPos);
+    connection.delayedWrite(fallingCheckPos);
     if (connection.getProtocolVersion().isAfterOrEq(ProtocolVersion.MINECRAFT_1_14)) {
-      connection.write(fallingCheckView);
+      connection.delayedWrite(fallingCheckView);
     }
-    connection.write(fallingCheckChunk);
+    connection.delayedWrite(fallingCheckChunk);
   }
 
   private void sendCaptcha() {
     CaptchaHandler captchaHandler = CachedCaptcha.randomCaptcha();
     String captchaAnswer = captchaHandler.getAnswer();
     setCaptchaAnswer(captchaAnswer);
-    connection.write(packets.getSetSlot());
-    connection.write(captchaHandler.getMap());
-    connection.write(packets.getCheckingCaptchaChat());
+    connection.delayedWrite(packets.getSetSlot());
+    connection.delayedWrite(captchaHandler.getMap());
+    connection.delayedWrite(packets.getCheckingCaptchaChat());
   }
 
   private boolean checkY() {
@@ -293,12 +234,10 @@ public class BotFilterSessionHandler extends FallingCheckHandler {
   }
 
   private void setCaptchaPosition(boolean disableFall) {
-    connection.write(packets.getCaptchaPosition());
-    connection.write(packets.getStaticWorldPacket());
+    server.respawnPlayer(player);
     if (disableFall) {
       connection.write(packets.getNoAbilities());
     }
-    connection.flush();
     waitingTeleportId = 9876;
   }
 
@@ -311,25 +250,6 @@ public class BotFilterSessionHandler extends FallingCheckHandler {
     }
   }
 
-  private void kickIfCheckNotPassed() {
-    if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
-      player.disconnect(
-          LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS));
-      statistics.addBlockedConnection();
-      statistics.addBlockedBots();
-    }
-    if ((!checkedByBrand) && Settings.IMP.ANTIBOT.CHECK_CLIENT_BRAND) {
-      player.disconnect(
-          LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_BRAND));
-      statistics.addBlockedConnection();
-      statistics.addBlockedBots();
-    }
-  }
-
   @Override
   public boolean equals(Object o) {
     if (this == o) {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/FallingCheckHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/FallingCheckHandler.java
index 5de8e7b5..87f1132e 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/FallingCheckHandler.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/FallingCheckHandler.java
@@ -20,21 +20,16 @@
 package net.elytrium.elytraproxy.botfilter.handler;
 
 import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
-import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.concurrent.ThreadLocalRandom;
+import net.elytrium.elytraproxy.api.virtual.VirtualServer;
+import net.elytrium.elytraproxy.api.virtual.VirtualSessionHandler;
+import net.elytrium.elytraproxy.api.virtual.player.VirtualServerPlayer;
 import net.elytrium.elytraproxy.config.Settings;
-import net.elytrium.elytraproxy.virtual.protocol.packet.Player;
-import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPosition;
-import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
-import net.elytrium.elytraproxy.virtual.protocol.packet.TeleportConfirm;
-import net.elytrium.elytraproxy.virtual.server.VirtualServer;
-import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
 
 @SuppressFBWarnings(value = "URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD",
     justification = "ща пока teleportId не юзается но скорее всего потом заюзаем")
-public abstract class FallingCheckHandler extends VirtualSessionHandler {
+public abstract class FallingCheckHandler implements VirtualSessionHandler {
   private static final double[] loadedChunkSpeedCache = new double[Settings.IMP.ANTIBOT.FALLING_CHECK_TICKS];
 
   static {
@@ -60,10 +55,7 @@ public abstract class FallingCheckHandler extends VirtualSessionHandler {
 
   public final ProtocolVersion version;
 
-  public FallingCheckHandler(
-      ProtocolVersion version, ConnectedPlayer player,
-      MinecraftSessionHandler sessionHandler, VirtualServer virtualServer) {
-    super(player, sessionHandler, virtualServer);
+  public FallingCheckHandler(ProtocolVersion version) {
     this.version = version;
     validX = ThreadLocalRandom.current().nextInt(16384) + 256;
     validY = ThreadLocalRandom.current().nextInt(256);
@@ -80,51 +72,34 @@ public abstract class FallingCheckHandler extends VirtualSessionHandler {
   }
 
   @Override
-  public boolean handle(Player player) {
-    this.onGround = player.isOnGround();
-    return true;
+  public void onGround(boolean onGround) {
+    this.onGround = true;
   }
 
   @Override
-  public boolean handle(PlayerPosition pos) {
-    x = pos.getX();
-    lastY = y;
-    y = pos.getY();
-    z = pos.getZ();
-    onGround = pos.isOnGround();
-    onMove();
-    return true;
-  }
-
-
-  @Override
-  public boolean handle(PlayerPositionAndLook posRot) {
+  public void onMove(double x, double y, double z) {
     if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_8)
-        && posRot.getX() == validX && posRot.getY() == validY && posRot.getZ() == validZ
+        && x == validX && y == validY && z == validZ
         && waitingTeleportId == 9876) {
       ticks = 0;
       y = -1;
-      lastY = -1;
       waitingTeleportId = -1;
     }
-    x = posRot.getX();
+    this.x = x;
     lastY = y;
-    y = posRot.getY();
-    z = posRot.getZ();
-    onGround = posRot.isOnGround();
+    this.y = y;
+    this.z = z;
     onMove();
-    return true;
   }
 
   @Override
-  public boolean handle(TeleportConfirm confirm) {
-    if (confirm.getTeleportId() == waitingTeleportId) {
+  public void onTeleport(int teleportId) {
+    if (teleportId == waitingTeleportId) {
       ticks = 0;
       y = -1;
       lastY = -1;
       waitingTeleportId = -1;
     }
-    return true;
   }
 
   public abstract void onMove();
@@ -135,5 +110,5 @@ public abstract class FallingCheckHandler extends VirtualSessionHandler {
   }
 
   @Override
-  public abstract void onSpawn();
+  public abstract void onSpawn(VirtualServer server, VirtualServerPlayer player);
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/ChangePasswordCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/ChangePasswordCommand.java
deleted file mode 100644
index 0eca4179..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/ChangePasswordCommand.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Copyright (C) 2021 Elytrium
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.commands;
-
-import com.google.common.collect.ImmutableMap;
-import com.velocitypowered.api.command.CommandSource;
-import com.velocitypowered.api.command.SimpleCommand;
-import com.velocitypowered.api.proxy.Player;
-import net.elytrium.elytraproxy.auth.handler.AuthSessionHandler;
-import net.elytrium.elytraproxy.config.Settings;
-import net.elytrium.elytraproxy.database.Database;
-import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-
-public class ChangePasswordCommand implements SimpleCommand {
-
-  private final Database database;
-
-  public ChangePasswordCommand(Database database) {
-    this.database = database;
-  }
-
-  @Override
-  public void execute(final Invocation invocation) {
-    final CommandSource source = invocation.source();
-    final String[] args = invocation.arguments();
-
-    if (args.length != 1 || !(source instanceof Player)) {
-      source.sendMessage(
-          LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize(Settings.IMP.AUTH.STRINGS.CHANGE_PASSWORD_USAGE));
-    } else {
-      database.updateMap(Settings.IMP.AUTH.TABLE,
-          ImmutableMap.of("nickname", ((Player) source).getUsername()),
-          ImmutableMap.of("hash", AuthSessionHandler.genHash(args[0])));
-      source.sendMessage(
-          LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize(Settings.IMP.AUTH.STRINGS.CHANGE_PASSWORD_SUCCESSFUL));
-    }
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/TotpCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/TotpCommand.java
deleted file mode 100644
index 0824e96b..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/TotpCommand.java
+++ /dev/null
@@ -1,156 +0,0 @@
-/*
- * Copyright (C) 2021 Elytrium
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.commands;
-
-import com.google.common.collect.ImmutableMap;
-import com.velocitypowered.api.command.CommandSource;
-import com.velocitypowered.api.command.SimpleCommand;
-import com.velocitypowered.api.proxy.Player;
-import dev.samstevens.totp.qr.QrData;
-import dev.samstevens.totp.recovery.RecoveryCodeGenerator;
-import dev.samstevens.totp.secret.DefaultSecretGenerator;
-import dev.samstevens.totp.secret.SecretGenerator;
-import java.net.URLEncoder;
-import java.nio.charset.StandardCharsets;
-import java.util.Locale;
-import lombok.SneakyThrows;
-import net.elytrium.elytraproxy.auth.handler.AuthSessionHandler;
-import net.elytrium.elytraproxy.auth.model.RegisteredPlayer;
-import net.elytrium.elytraproxy.config.Settings;
-import net.elytrium.elytraproxy.database.Database;
-import net.kyori.adventure.text.event.ClickEvent;
-import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-
-public class TotpCommand implements SimpleCommand {
-
-  private final SecretGenerator secretGenerator = new DefaultSecretGenerator();
-  private final Database database;
-
-  public TotpCommand(Database database) {
-    this.database = database;
-  }
-
-  @SneakyThrows
-  @Override
-  public void execute(final Invocation invocation) {
-    final CommandSource source = invocation.source();
-    final String[] args = invocation.arguments();
-
-    if (args.length == 0 || !(source instanceof Player)) {
-      sendUsage(source);
-    } else {
-      String username = ((Player) source).getUsername();
-
-      switch (args[0]) {
-        case "enable":
-          RegisteredPlayer playerInfo =
-              AuthSessionHandler.fetchInfo(database, username.toLowerCase(Locale.ROOT));
-
-          if (playerInfo == null) {
-            source.sendMessage(LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.AUTH.STRINGS.TOTP_NON_REGISTERED));
-            return;
-          }
-
-          if (!playerInfo.totpToken.isBlank()) {
-            source.sendMessage(LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.AUTH.STRINGS.TOTP_ALREADY_ENABLED));
-            return;
-          }
-
-          String secret = secretGenerator.generate();
-
-          database.updateMap(Settings.IMP.AUTH.TABLE,
-              ImmutableMap.of("nickname", username),
-              ImmutableMap.of("totpToken", secret));
-
-          source.sendMessage(LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize(Settings.IMP.AUTH.STRINGS.TOTP_SUCCESSFUL));
-
-          QrData data = new QrData.Builder()
-              .label(username)
-              .secret(secret)
-              .issuer(Settings.IMP.AUTH.TOTP_ISSUER)
-              .build();
-
-          String qrUrl = Settings.IMP.AUTH.QR_GENERATOR_URL
-              .replace("{data}", URLEncoder.encode(data.getUri(), StandardCharsets.UTF_8));
-
-          source.sendMessage(LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize(Settings.IMP.AUTH.STRINGS.TOTP_QR)
-              .clickEvent(ClickEvent.openUrl(qrUrl)));
-
-          source.sendMessage(LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize(Settings.IMP.AUTH.STRINGS.TOTP_TOKEN + secret)
-              .clickEvent(ClickEvent.suggestCommand(secret)));
-
-          RecoveryCodeGenerator recoveryCodes = new RecoveryCodeGenerator();
-          String[] codes = recoveryCodes.generateCodes(16);
-          source.sendMessage(LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize(Settings.IMP.AUTH.STRINGS.TOTP_RECOVERY
-                  + String.join(", ", codes)));
-          break;
-        case "disable":
-          if (args.length != 2) {
-            sendUsage(source);
-            return;
-          }
-
-          playerInfo =
-              AuthSessionHandler.fetchInfo(database, username.toLowerCase(Locale.ROOT));
-
-          if (playerInfo == null) {
-            source.sendMessage(LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.AUTH.STRINGS.TOTP_NON_REGISTERED));
-            return;
-          }
-
-          if (AuthSessionHandler.getVerifier().isValidCode(playerInfo.totpToken, args[1])) {
-            database.updateMap(Settings.IMP.AUTH.TABLE,
-                ImmutableMap.of("nickname", username),
-                ImmutableMap.of("totpToken", ""));
-            source.sendMessage(LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.AUTH.STRINGS.TOTP_DISABLED));
-          } else {
-            source.sendMessage(LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.AUTH.STRINGS.TOTP_WRONG));
-          }
-          break;
-        default:
-          sendUsage(source);
-          break;
-      }
-    }
-  }
-
-  private void sendUsage(CommandSource source) {
-    source.sendMessage(
-        LegacyComponentSerializer
-            .legacyAmpersand()
-            .deserialize(Settings.IMP.AUTH.STRINGS.TOTP_USAGE));
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/UnregisterCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/UnregisterCommand.java
deleted file mode 100644
index 75066f58..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/UnregisterCommand.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Copyright (C) 2021 Elytrium
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.commands;
-
-import com.google.common.collect.ImmutableMap;
-import com.velocitypowered.api.command.CommandSource;
-import com.velocitypowered.api.command.SimpleCommand;
-import java.util.Locale;
-import net.elytrium.elytraproxy.config.Settings;
-import net.elytrium.elytraproxy.database.Database;
-import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-
-public class UnregisterCommand implements SimpleCommand {
-
-  private final Database database;
-
-  public UnregisterCommand(Database database) {
-    this.database = database;
-  }
-
-  @Override
-  public void execute(final Invocation invocation) {
-    final CommandSource source = invocation.source();
-    final String[] args = invocation.arguments();
-
-    if (args.length != 1) {
-      source.sendMessage(
-          LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize(Settings.IMP.AUTH.STRINGS.UNREGISTER_USAGE));
-    } else {
-      database.deleteMap(
-          Settings.IMP.AUTH.TABLE,
-          ImmutableMap.of("lowercaseNickname", args[0].toLowerCase(Locale.ROOT)));
-      source.sendMessage(
-          LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize(Settings.IMP.AUTH.STRINGS.UNREGISTER_SUCCESSFUL));
-    }
-  }
-
-  @Override
-  public boolean hasPermission(final Invocation invocation) {
-    return invocation.source().hasPermission("elytraproxy.auth.unregister");
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/config/Settings.java b/proxy/src/main/java/net/elytrium/elytraproxy/config/Settings.java
index ba0bdaf6..7e7ff869 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/config/Settings.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/config/Settings.java
@@ -188,7 +188,14 @@ public class Settings extends Config {
 
   public static class ANTIBOT {
     public boolean ENABLE = true;
+    public boolean LOGGING_ENABLED = true;
     public boolean CHECK_CLIENT_SETTINGS = true;
+    @Comment({
+        "Verify Online Mode connection before AntiBot.",
+        "False: verify after antibot, online mode player needs to reconnect",
+        "True: verify before antibot, consumes more cpu and network on attack"
+    })
+    public boolean ONLINE_MODE_VERIFY = false;
     public boolean CHECK_CLIENT_BRAND = true;
     public long PURGE_CACHE_MILLIS = 3600000;
     public int CAPTCHA_ATTEMPTS = 2;
@@ -232,32 +239,11 @@ public class Settings extends Config {
       public int LENGTH = 3;
     }
 
-    @Create
-    public ANTIBOT.BOTFILTER_DIMENSION BOTFILTER_DIMENSION;
-
-    public static class BOTFILTER_DIMENSION {
-      @Comment({
-          "Normal dimension - 0",
-          "Cave dimension - 1",
-          "Nether - 2",
-          "The end - 3",
-      })
-      public int ID = 3;
-      @Comment({
-          "Normal dimension - 0",
-          "The end - 1",
-          "Nether - 2"
-      })
-      public int LEGACY_ID = 1;
-      @Comment({
-          "Normal dimension - minecraft:overworld",
-          "Cave dimension - minecraft:overworld_caves",
-          "The end - minecraft:the_end",
-          "Nether - minecraft:nether"
-      })
-      public String MODERN_KEY = "minecraft:the_end";
-      public boolean HARDCORE_HEARTS = true;
-    }
+    @Comment(
+        "Available dimensions: OVERWORLD, NETHER, THE_END"
+    )
+    public String BOTFILTER_DIMENSION = "THE_END";
+    public boolean HARDCORE_HEARTS = true;
 
     @Create
     public ANTIBOT.STRINGS STRINGS;
@@ -284,86 +270,6 @@ public class Settings extends Config {
     }
   }
 
-  @Create
-  public AUTH AUTH;
-
-  public static class AUTH {
-    public boolean ENABLE = true;
-    public boolean ONLINE_MODE_NEED_AUTH = false;
-    public boolean CACHE_AUTH_USERS = true;
-    public long PURGE_CACHE_MILLIS = 3600000;
-    @Comment({
-        "QR Generator URL, set {data} placeholder"
-    })
-    public String QR_GENERATOR_URL = "https://api.qrserver.com/v1/create-qr-code/?data={data}&size=200x200&ecc=M&margin=30";
-    public String TABLE = "auth";
-    public String TOTP_ISSUER = "ElytraProxy Auth";
-    public int BCRYPT_COST = 10;
-    public int LOGIN_ATTEMPTS = 3;
-    public int IP_LIMIT_REGISTRATIONS = 3;
-    @Comment("Time in milliseconds, when ip limit works")
-    public long IP_LIMIT_VALID_TIME = 21600000;
-    public String ALLOWED_NICKNAME_CHARS = "abcdefghijklmnopqrstuvwxyz_0123456789";
-
-    @Create
-    public AUTH.STRINGS STRINGS;
-
-    public static class STRINGS {
-      public String LOGIN = "{PRFX} Please, login using &a/l password";
-      public String TOTP = "{PRFX} Please, enter your 2FA key using &a/2fa key";
-      public String PASSWORD_WRONG = "{PRFX} Password is wrong";
-      public String WRONG_NICKNAME_CASE = "{PRFX} The case of your nickname is wrong. Nickname is CaSe SeNsItIvE.";
-      public String REGISTER = "{PRFX} Please, register using &a/reg password password";
-      public String NICKNAME_PREMIUM = "{PRFX} Your nickname is set on premium account. Please, change your nickname";
-      public String NICKNAME_INVALID = "{PRFX} Your nickname includes forbidden characters. Please, change your nickname";
-      public String IP_LIMIT = "{PRFX} Your IP has reached max registered accounts. If this is an error, restart your router, or wait about 6 hours";
-      public String UNREGISTER_USAGE = "{PRFX} Usage: /unregister <nickname>";
-      public String UNREGISTER_SUCCESSFUL = "{PRFX} Successfully unregistered player";
-      public String CHANGE_PASSWORD_USAGE = "{PRFX} Usage: /changepass <old password> <new password>";
-      public String CHANGE_PASSWORD_SUCCESSFUL = "{PRFX} Successfully changed password";
-      public String TOTP_USAGE = "{PRFX} Usage: &a/2fa enable &for &a/2fa disable <totp key>";
-      public String TOTP_WRONG = "{PRFX} Wrong totp key";
-      public String TOTP_SUCCESSFUL = "{PRFX} Successfully enabled 2FA";
-      public String TOTP_ALREADY_ENABLED = "{PRFX} 2FA is already enabled. Disable it using /2fa disable <totp key>";
-      public String TOTP_NON_REGISTERED = "{PRFX} You are not registered on this proxy.";
-      public String TOTP_DISABLED = "{PRFX} Successfully disabled 2FA";
-      public String TOTP_QR = "{PRFX} Click to open 2FA QR code in browser. ";
-      public String TOTP_TOKEN = "{PRFX} Your TOTP token (Click to copy): ";
-      public String TOTP_RECOVERY = "{PRFX} Your recovey codes: ";
-    }
-
-    @Create
-    public AUTH.AUTH_COORDS AUTH_COORDS;
-
-    public static class AUTH_COORDS {
-      public double X = 0;
-      public double Y = 0;
-      public double Z = 0;
-      public double YAW = 0;
-      public double PITCH = 0;
-    }
-  }
-
-  @Create
-  public VIRTUAL VIRTUAL;
-
-  @Comment("Settings of Virtual Server")
-  public static class VIRTUAL {
-    public boolean LOAD_WORLD = false;
-    @Comment("World file type: schematic")
-    public String WORLD_FILE_TYPE = "schematic";
-    public String WORLD_FILE_PATH = "world.schematic";
-
-    @Create
-    public VIRTUAL.VIRTUAL_COORDS VIRTUAL_COORDS;
-
-    public static class VIRTUAL_COORDS {
-      public int X = 0;
-      public int Y = 0;
-      public int Z = 0;
-    }
-  }
-
   @Create
   public DATABASE DATABASE;
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/database/DatabaseItem.java b/proxy/src/main/java/net/elytrium/elytraproxy/database/DatabaseItem.java
deleted file mode 100644
index 41e75f2c..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/database/DatabaseItem.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- * Copyright (C) 2021 Elytrium
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.database;
-
-import java.util.Map;
-import lombok.Getter;
-
-public class DatabaseItem {
-  @Getter private final Map<String, String> tableInfo;
-  @Getter private final String primaryKey;
-
-  public DatabaseItem(Map<String, String> tableInfo, String primaryKey) {
-    this.tableInfo = tableInfo;
-    this.primaryKey = primaryKey;
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/database/MySqlDatabase.java b/proxy/src/main/java/net/elytrium/elytraproxy/database/MySqlDatabase.java
index c615d99d..f37b94a0 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/database/MySqlDatabase.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/database/MySqlDatabase.java
@@ -31,6 +31,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
+import net.elytrium.elytraproxy.api.database.Database;
 
 public class MySqlDatabase extends Database {
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/file/SchematicFile.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/file/SchematicFile.java
index 736a08e7..4b4a6a7b 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/file/SchematicFile.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/file/SchematicFile.java
@@ -22,7 +22,7 @@ import java.io.InputStream;
 import java.nio.file.Path;
 import lombok.Getter;
 import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.virtual.server.world.VirtualWorld;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleWorld;
 import net.kyori.adventure.nbt.BinaryTagIO;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
 
@@ -33,6 +33,7 @@ public class SchematicFile implements WorldFile {
   private short length;
   private byte[] blocks;
   private byte[] addBlocks = new byte[0];
+  private byte[] blocksData;
 
   public SchematicFile(Path file) throws IOException {
     CompoundBinaryTag tag = BinaryTagIO.reader().read(file, BinaryTagIO.Compression.GZIP);
@@ -49,7 +50,7 @@ public class SchematicFile implements WorldFile {
   }
 
   @Override
-  public void toWorld(VirtualWorld world, int offsetX, int offsetY, int offsetZ) {
+  public void toWorld(SimpleWorld world, int offsetX, int offsetY, int offsetZ) {
     short[] blockIds = new short[blocks.length];
 
     for (int index = 0; index < blocks.length; index++) {
@@ -67,10 +68,10 @@ public class SchematicFile implements WorldFile {
     for (int x = 0; x < width; ++x) {
       for (int y = 0; y < height; ++y) {
         for (int z = 0; z < length; ++z) {
-          // System.out.println(x + " " + y + " " + z + ": " + blockIds[(y * length + z) * width + x]);
-          world.setBlock(
-              x + offsetX, y + offsetY, z + offsetZ,
-              SimpleBlock.fromLegacyId(blockIds[(y * length + z) * width + x]));
+          int index = (y * length + z) * width + x;
+          world.setBlock(x + offsetX, y + offsetY, z + offsetZ,
+              SimpleBlock.fromLegacyId(blockIds[index])
+                  .setData(blocksData[index]));
         }
       }
     }
@@ -81,6 +82,7 @@ public class SchematicFile implements WorldFile {
     height = tag.getShort("Height");
     length = tag.getShort("Length");
     blocks = tag.getByteArray("Blocks");
+    blocksData = tag.getByteArray("Data");
 
     if (tag.keySet().contains("AddBlocks")) {
       addBlocks = tag.getByteArray("AddBlocks");
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/file/WorldFile.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/file/WorldFile.java
index 6595acf8..f1c7b5d4 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/file/WorldFile.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/file/WorldFile.java
@@ -17,8 +17,8 @@
 
 package net.elytrium.elytraproxy.virtual.file;
 
-import net.elytrium.elytraproxy.virtual.server.world.VirtualWorld;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleWorld;
 
 public interface WorldFile {
-  void toWorld(VirtualWorld world, int offsetX, int offsetY, int offsetZ);
+  void toWorld(SimpleWorld world, int offsetX, int offsetY, int offsetZ);
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/registry/Biome.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/material/Biome.java
similarity index 90%
rename from proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/registry/Biome.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/material/Biome.java
index be9a81b8..ae04aa15 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/registry/Biome.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/material/Biome.java
@@ -1,7 +1,5 @@
 /*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ * Copyright (C) 2021 Elytrium
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License as published by
@@ -17,38 +15,38 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.virtual.protocol.data.registry;
+package net.elytrium.elytraproxy.virtual.material;
 
-import com.google.common.collect.ImmutableList;
-import java.util.List;
+import java.util.Arrays;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import lombok.Data;
+import lombok.Getter;
 import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome.Effects.MoodSound;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBiome;
+import net.elytrium.elytraproxy.virtual.material.Biome.Effects.MoodSound;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
 import net.kyori.adventure.nbt.CompoundBinaryTag.Builder;
 import net.kyori.adventure.nbt.ListBinaryTag;
 
-public class Biome {
+@Getter
+public enum Biome implements VirtualBiome {
 
-  public static final Biome PLAINS = new Biome("minecraft:plains", 1,
+  PLAINS("minecraft:plains", 1,
       new Element("rain", 0.125f, 0.8f, 0.05f, 0.4f, "plains",
           Effects.builder(7907327, 329011, 12638463, 415920)
               .moodSound(MoodSound.of(6000, 2.0d, 8, "minecraft:ambient.cave"))
               .build())
-  );
-
-  public static final Biome SWAMP = new Biome("minecraft:swamp", 6,
+  ),
+  SWAMP("minecraft:swamp", 6,
       new Element("rain", -0.2F, 0.8f, 0.1F, 0.9F, "swamp",
           Effects.builder(7907327, 329011, 12638463, 415920).grassColorModifier("swamp")
               .foliageColor(6975545)
               .moodSound(MoodSound.of(6000, 2.0d, 8, "minecraft:ambient.cave"))
               .build())
-  );
-
-  public static final Biome SWAMP_HILLS = new Biome("minecraft:swamp_hills", 134,
+  ),
+  SWAMP_HILLS("minecraft:swamp_hills", 134,
       new Element("rain", -0.1F, 0.8f, 0.3F, 0.9F, "swamp",
           Effects.builder(7907327, 329011, 12638463, 415920).grassColorModifier("swamp")
               .foliageColor(6975545)
@@ -56,13 +54,11 @@ public class Biome {
               .build())
   );
 
-  public static final List<Biome> REGISTERED_BIOMES = ImmutableList.of(PLAINS);
-
   public final String name;
   public final int id;
   public final Element element;
 
-  public Biome(String name, int id, Element element) {
+  Biome(String name, int id, Element element) {
     this.name = name;
     this.id = id;
     this.element = element;
@@ -79,10 +75,11 @@ public class Biome {
     return CompoundBinaryTag.builder()
         .putString("type", "minecraft:worldgen/biome")
         .put("value", ListBinaryTag
-            .from(REGISTERED_BIOMES.stream().map(Biome::encodeBiome)
+            .from(Arrays.stream(Biome.values()).map(Biome::encodeBiome)
                 .collect(Collectors.toList()))).build();
   }
 
+  @Getter
   public static class Element {
 
     public final String precipitation;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/VirtualProtocol.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/VirtualProtocol.java
index 376a7f2d..81796b75 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/VirtualProtocol.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/VirtualProtocol.java
@@ -29,6 +29,12 @@ import com.velocitypowered.proxy.protocol.packet.Disconnect;
 import com.velocitypowered.proxy.protocol.packet.JoinGame;
 import com.velocitypowered.proxy.protocol.packet.PluginMessage;
 import com.velocitypowered.proxy.protocol.packet.Respawn;
+import com.velocitypowered.proxy.protocol.packet.title.LegacyTitlePacket;
+import com.velocitypowered.proxy.protocol.packet.title.TitleActionbarPacket;
+import com.velocitypowered.proxy.protocol.packet.title.TitleClearPacket;
+import com.velocitypowered.proxy.protocol.packet.title.TitleSubtitlePacket;
+import com.velocitypowered.proxy.protocol.packet.title.TitleTextPacket;
+import com.velocitypowered.proxy.protocol.packet.title.TitleTimesPacket;
 import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
 import net.elytrium.elytraproxy.virtual.protocol.packet.Player;
 import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerAbilities;
@@ -178,5 +184,29 @@ public class VirtualProtocol {
     StateRegistry.VIRTUAL.clientbound.register(
         Respawn.class, Respawn::new,
         StateRegistry.PLAY.clientbound.getMappingsForPacket(Respawn.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        TitleActionbarPacket.class, TitleActionbarPacket::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(
+            ProtocolVersion.MINECRAFT_1_17, TitleActionbarPacket.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        TitleClearPacket.class, TitleClearPacket::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(
+            ProtocolVersion.MINECRAFT_1_17, TitleClearPacket.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        TitleSubtitlePacket.class, TitleSubtitlePacket::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(
+            ProtocolVersion.MINECRAFT_1_17, TitleSubtitlePacket.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        TitleTextPacket.class, TitleTextPacket::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(
+            ProtocolVersion.MINECRAFT_1_17, TitleTextPacket.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        TitleTimesPacket.class, TitleTimesPacket::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(
+            ProtocolVersion.MINECRAFT_1_17, TitleTimesPacket.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        LegacyTitlePacket.class, LegacyTitlePacket::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(
+            ProtocolVersion.MINECRAFT_1_8, ProtocolVersion.MINECRAFT_1_16_4, LegacyTitlePacket.class, true));
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/cache/PreparedPacket.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/cache/PreparedPacket.java
index 60a2eba9..ad0d2ff0 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/cache/PreparedPacket.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/cache/PreparedPacket.java
@@ -31,7 +31,7 @@ import java.util.EnumSet;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.function.Supplier;
+import java.util.function.Function;
 import java.util.stream.Collectors;
 
 public class PreparedPacket {
@@ -40,40 +40,53 @@ public class PreparedPacket {
       new ConcurrentHashMap<>();
 
   public <T extends MinecraftPacket> PreparedPacket prepare(T packet) {
-    return prepare((Supplier<T>) () -> packet, ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MAXIMUM_VERSION);
+    return prepare((Function<ProtocolVersion, T>) (version) ->
+        packet, ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MAXIMUM_VERSION);
+  }
+
+  public <T extends MinecraftPacket> PreparedPacket prepare(List<T> packets) {
+    for (T packet : packets) {
+      prepare((Function<ProtocolVersion, T>) (version) ->
+          packet, ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MAXIMUM_VERSION);
+    }
+
+    return this;
   }
 
   public <T extends MinecraftPacket> PreparedPacket prepare(T packet, ProtocolVersion from) {
-    return prepare((Supplier<T>) () -> packet, from, ProtocolVersion.MAXIMUM_VERSION);
+    return prepare((Function<ProtocolVersion, T>) (version) -> packet, from, ProtocolVersion.MAXIMUM_VERSION);
   }
 
   public <T extends MinecraftPacket> PreparedPacket prepare(T packet, ProtocolVersion from, StateRegistry protocol) {
-    return prepare(() -> packet, from, ProtocolVersion.MAXIMUM_VERSION, protocol);
+    return prepare((version) -> packet, from, ProtocolVersion.MAXIMUM_VERSION, protocol);
   }
 
   public <T extends MinecraftPacket> PreparedPacket prepare(T packet, ProtocolVersion from, ProtocolVersion to) {
-    return prepare(() -> packet, from, to, StateRegistry.VIRTUAL);
+    return prepare((version) -> packet, from, to, StateRegistry.VIRTUAL);
   }
 
-  public <T extends MinecraftPacket> PreparedPacket prepare(Supplier<T> packet) {
+  public <T extends MinecraftPacket> PreparedPacket prepare(Function<ProtocolVersion, T> packet) {
     return prepare(packet, ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MAXIMUM_VERSION);
   }
 
-  public <T extends MinecraftPacket> PreparedPacket prepare(Supplier<T> packet, ProtocolVersion from) {
+  public <T extends MinecraftPacket> PreparedPacket prepare(Function<ProtocolVersion, T> packet, ProtocolVersion from) {
     return prepare(packet, from, ProtocolVersion.MAXIMUM_VERSION);
   }
 
-  public <T extends MinecraftPacket> PreparedPacket prepare(Supplier<T> packet, ProtocolVersion from, StateRegistry protocol) {
+  public <T extends MinecraftPacket> PreparedPacket prepare(
+      Function<ProtocolVersion, T> packet, ProtocolVersion from, StateRegistry protocol) {
     return prepare(packet, from, ProtocolVersion.MAXIMUM_VERSION, protocol);
   }
 
-  public <T extends MinecraftPacket> PreparedPacket prepare(Supplier<T> packet, ProtocolVersion from, ProtocolVersion to) {
+  public <T extends MinecraftPacket> PreparedPacket prepare(
+      Function<ProtocolVersion, T> packet, ProtocolVersion from, ProtocolVersion to) {
     return prepare(packet, from, to, StateRegistry.VIRTUAL);
   }
 
-  public <T extends MinecraftPacket> PreparedPacket prepare(Supplier<T> packet, ProtocolVersion from, ProtocolVersion to, StateRegistry protocol) {
+  public <T extends MinecraftPacket> PreparedPacket prepare(
+      Function<ProtocolVersion, T> packet, ProtocolVersion from, ProtocolVersion to, StateRegistry protocol) {
     for (ProtocolVersion protocolVersion : EnumSet.range(from, to)) {
-      ByteBuf buf = encodePacket(packet.get(), protocolVersion, protocol);
+      ByteBuf buf = encodePacket(packet.apply(protocolVersion), protocolVersion, protocol);
       if (packets.containsKey(protocolVersion)) {
         packets.get(protocolVersion).add(buf);
       } else {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/BlockStorage.java
similarity index 85%
rename from proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/BlockStorage.java
index 5f3788a0..fe835e06 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/BlockStorage.java
@@ -17,19 +17,19 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.virtual.protocol.data.storage;
+package net.elytrium.elytraproxy.virtual.protocol.data;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import io.netty.buffer.ByteBuf;
 import lombok.NonNull;
-import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBlock;
 import org.jetbrains.annotations.NotNull;
 
 public interface BlockStorage {
 
-  void set(int x, int y, int z, @NonNull SimpleBlock block);
+  void set(int x, int y, int z, @NonNull VirtualBlock block);
 
-  @NotNull SimpleBlock get(int x, int y, int z);
+  @NotNull VirtualBlock get(int x, int y, int z);
 
   void write(ByteBuf buf, ProtocolVersion version);
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage17.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/BlockStorage17.java
similarity index 84%
rename from proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage17.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/BlockStorage17.java
index 732d9fbb..32941675 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage17.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/BlockStorage17.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.virtual.protocol.data.storage;
+package net.elytrium.elytraproxy.virtual.protocol.data;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
@@ -26,7 +26,8 @@ import java.util.Arrays;
 import lombok.AccessLevel;
 import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.NibbleArray3d;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBlock;
+import net.elytrium.elytraproxy.api.virtual.mcprotocollib.NibbleArray3d;
 import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
 import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
 import org.jetbrains.annotations.NotNull;
@@ -34,22 +35,22 @@ import org.jetbrains.annotations.NotNull;
 @RequiredArgsConstructor(access = AccessLevel.PRIVATE)
 public class BlockStorage17 implements BlockStorage {
 
-  private final SimpleBlock[] blocks;
+  private final VirtualBlock[] blocks;
   private int pass = 0;
 
   public BlockStorage17() {
-    this(new SimpleBlock[SimpleChunk.MAX_BLOCKS_PER_SECTION]);
+    this(new VirtualBlock[SimpleChunk.MAX_BLOCKS_PER_SECTION]);
   }
 
   @Override
-  public void set(int x, int y, int z, @NonNull SimpleBlock block) {
+  public void set(int x, int y, int z, @NonNull VirtualBlock block) {
     blocks[BlockStorage.index(x, y, z)] = block;
   }
 
   @SuppressFBWarnings("NP_NONNULL_RETURN_VIOLATION")
   @Override
-  public @NotNull SimpleBlock get(int x, int y, int z) {
-    SimpleBlock block = blocks[BlockStorage.index(x, y, z)];
+  public @NotNull VirtualBlock get(int x, int y, int z) {
+    VirtualBlock block = blocks[BlockStorage.index(x, y, z)];
     return block == null ? SimpleBlock.AIR : block;
   }
 
@@ -80,7 +81,7 @@ public class BlockStorage17 implements BlockStorage {
   private void writeBlocks17(ByteBuf buf) {
     byte[] raw = new byte[blocks.length];
     for (int i = 0; i < blocks.length; i++) {
-      SimpleBlock block = blocks[i];
+      VirtualBlock block = blocks[i];
       raw[i] = (byte) (block == null ? 0 : block.getId(ProtocolVersion.MINECRAFT_1_7_2));
     }
     buf.writeBytes(raw);
@@ -89,7 +90,7 @@ public class BlockStorage17 implements BlockStorage {
   private void writeBlocks18(ByteBuf buf) {
     short[] raw = new short[blocks.length];
     for (int i = 0; i < blocks.length; i++) {
-      SimpleBlock block = blocks[i];
+      VirtualBlock block = blocks[i];
       raw[i] = (short) (block == null ? 0
           : (block.getId(ProtocolVersion.MINECRAFT_1_8) << 4 | block.getData(ProtocolVersion.MINECRAFT_1_8)));
     }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage19.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/BlockStorage19.java
similarity index 86%
rename from proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage19.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/BlockStorage19.java
index f45e0165..2fb95549 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage19.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/BlockStorage19.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.virtual.protocol.data.storage;
+package net.elytrium.elytraproxy.virtual.protocol.data;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.ProtocolUtils;
@@ -30,11 +30,11 @@ import java.util.Map;
 import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
 import lombok.NonNull;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBlock;
 import net.elytrium.elytraproxy.virtual.protocol.util.CompactStorage;
-import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.BitStorage116;
-import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.BitStorage19;
+import net.elytrium.elytraproxy.api.virtual.mcprotocollib.BitStorage116;
+import net.elytrium.elytraproxy.api.virtual.mcprotocollib.BitStorage19;
 import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version;
 import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
 import org.jetbrains.annotations.NotNull;
 
@@ -42,8 +42,8 @@ import org.jetbrains.annotations.NotNull;
 public class BlockStorage19 implements BlockStorage {
 
   private final ProtocolVersion version;
-  private List<SimpleBlock> palette = new ArrayList<>();
-  private Map<Integer, SimpleBlock> rawToBlock = new HashMap<>();
+  private List<VirtualBlock> palette = new ArrayList<>();
+  private Map<Integer, VirtualBlock> rawToBlock = new HashMap<>();
   private CompactStorage storage;
 
   public BlockStorage19(ProtocolVersion version) {
@@ -53,17 +53,17 @@ public class BlockStorage19 implements BlockStorage {
     rawToBlock.put(toRaw(SimpleBlock.AIR, version), SimpleBlock.AIR);
   }
 
-  public void set(int x, int y, int z, @NonNull SimpleBlock block) {
+  public void set(int x, int y, int z, @NonNull VirtualBlock block) {
     int id = getIndex(block);
     storage.set(index(x, y, z), id);
   }
 
   @SuppressFBWarnings("NP_NONNULL_RETURN_VIOLATION")
-  public @NotNull SimpleBlock get(int x, int y, int z) {
+  public @NotNull VirtualBlock get(int x, int y, int z) {
     return get(index(x, y, z));
   }
 
-  private SimpleBlock get(int index) {
+  private VirtualBlock get(int index) {
     int id = storage.get(index);
 
     if (storage.getBitsPerEntry() > 8) {
@@ -82,7 +82,7 @@ public class BlockStorage19 implements BlockStorage {
       }
     } else {
       ProtocolUtils.writeVarInt(buf, palette.size());
-      for (SimpleBlock state : palette) {
+      for (VirtualBlock state : palette) {
         ProtocolUtils.writeVarInt(buf, toRaw(state, this.version));
       }
     }
@@ -98,7 +98,7 @@ public class BlockStorage19 implements BlockStorage {
       }
     } else {
       length += ProtocolUtils.varIntBytes(palette.size());
-      for (SimpleBlock state : palette) {
+      for (VirtualBlock state : palette) {
         length += ProtocolUtils.varIntBytes(toRaw(state, this.version));
       }
     }
@@ -106,7 +106,7 @@ public class BlockStorage19 implements BlockStorage {
   }
 
 
-  private int getIndex(SimpleBlock block) {
+  private int getIndex(VirtualBlock block) {
     if (storage.getBitsPerEntry() > 8) {
       int raw = toRaw(block, version);
       rawToBlock.put(raw, block);
@@ -171,7 +171,7 @@ public class BlockStorage19 implements BlockStorage {
         + '}';
   }
 
-  private static int toRaw(SimpleBlock state, ProtocolVersion version) {
+  private static int toRaw(VirtualBlock state, ProtocolVersion version) {
     if (version.isBefore(ProtocolVersion.MINECRAFT_1_13)) {
       return (state.getId(version) << 4) | (state.getData(version) & 0xF);
     } else {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/Player.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/Player.java
index b0d2521e..a4e7a3f8 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/Player.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/Player.java
@@ -28,7 +28,7 @@ import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
-import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
+import net.elytrium.elytraproxy.virtual.server.SimpleSessionHandler;
 
 @Data
 @NoArgsConstructor
@@ -45,7 +45,7 @@ public class Player implements MinecraftPacket {
 
   @Override
   public boolean handle(MinecraftSessionHandler handler) {
-    ((VirtualSessionHandler) handler).handle(this);
+    ((SimpleSessionHandler) handler).handle(this);
     return false;
   }
 }
\ No newline at end of file
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPosition.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPosition.java
index 2d65f5fe..dfec068c 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPosition.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPosition.java
@@ -28,7 +28,7 @@ import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
-import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
+import net.elytrium.elytraproxy.virtual.server.SimpleSessionHandler;
 
 @Data
 @NoArgsConstructor
@@ -51,6 +51,6 @@ public class PlayerPosition implements MinecraftPacket {
 
   @Override
   public boolean handle(MinecraftSessionHandler handler) {
-    return ((VirtualSessionHandler) handler).handle(this);
+    return ((SimpleSessionHandler) handler).handle(this);
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPositionAndLook.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPositionAndLook.java
index 6c75fd27..8c6a7d00 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPositionAndLook.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPositionAndLook.java
@@ -30,7 +30,7 @@ import lombok.Getter;
 import lombok.NoArgsConstructor;
 import lombok.Setter;
 import lombok.ToString;
-import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
+import net.elytrium.elytraproxy.virtual.server.SimpleSessionHandler;
 
 @Getter
 @Setter
@@ -84,6 +84,6 @@ public class PlayerPositionAndLook implements MinecraftPacket {
 
   @Override
   public boolean handle(MinecraftSessionHandler handler) {
-    return ((VirtualSessionHandler) handler).handle(this);
+    return ((SimpleSessionHandler) handler).handle(this);
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetSlot.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetSlot.java
index 37e7796a..3b21c77c 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetSlot.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetSlot.java
@@ -27,8 +27,8 @@ import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
+import net.elytrium.elytraproxy.api.virtual.material.VirtualItem;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
-import net.kyori.adventure.nbt.IntBinaryTag;
 
 @Data
 @NoArgsConstructor
@@ -38,9 +38,10 @@ public class SetSlot implements MinecraftPacket {
 
   private int windowId;
   private int slot;
-  private int item;
+  private VirtualItem item;
   private int count;
   private int data;
+  private CompoundBinaryTag nbt;
 
   @Override
   public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {
@@ -49,7 +50,7 @@ public class SetSlot implements MinecraftPacket {
       ProtocolUtils.writeVarInt(buf, 0);
     }
     buf.writeShort(this.slot);
-    int id = this.item == 358 ? getCaptchaId(version) : this.item;
+    int id = item.getId(version);
     boolean present = id > 0;
 
     if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_13_2)) {
@@ -71,28 +72,11 @@ public class SetSlot implements MinecraftPacket {
         buf.writeShort(this.data);
       }
 
-      if (version.isBefore(ProtocolVersion.MINECRAFT_1_17)) {
-        buf.writeByte(0); //No Nbt
+      if (this.nbt == null) {
+        buf.writeByte(0);
       } else {
-        CompoundBinaryTag nbt = CompoundBinaryTag.builder().put("map", IntBinaryTag.of(0)).build();
-        ProtocolUtils.writeCompoundTag(buf, nbt);
+        ProtocolUtils.writeCompoundTag(buf, this.nbt);
       }
     }
   }
-
-  private int getCaptchaId(ProtocolVersion version) {
-    if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_12_2)) {
-      return 358;
-    } else if (version.equals(ProtocolVersion.MINECRAFT_1_13)) {
-      return 608;
-    } else if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_13_2)) {
-      return 613;
-    } else if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_15_2)) {
-      return 671;
-    } else if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_16_4)) {
-      return 733;
-    } else {
-      return 847;
-    }
-  }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/TeleportConfirm.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/TeleportConfirm.java
index e3af0ac8..900f1990 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/TeleportConfirm.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/TeleportConfirm.java
@@ -28,7 +28,7 @@ import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
-import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
+import net.elytrium.elytraproxy.virtual.server.SimpleSessionHandler;
 
 @Data
 @NoArgsConstructor
@@ -45,6 +45,6 @@ public class TeleportConfirm implements MinecraftPacket {
 
   @Override
   public boolean handle(MinecraftSessionHandler handler) {
-    return ((VirtualSessionHandler) handler).handle(this);
+    return ((SimpleSessionHandler) handler).handle(this);
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/world/ChunkData.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/world/ChunkData.java
index 2381cb65..1632ce89 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/world/ChunkData.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/world/ChunkData.java
@@ -36,14 +36,14 @@ import java.util.Map;
 import java.util.Map.Entry;
 import java.util.zip.Deflater;
 import lombok.Getter;
-import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBiome;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBlock;
+import net.elytrium.elytraproxy.api.virtual.chunk.data.ChunkSnapshot;
+import net.elytrium.elytraproxy.api.virtual.chunk.data.LightSection;
 import net.elytrium.elytraproxy.virtual.protocol.util.CompactStorage;
 import net.elytrium.elytraproxy.virtual.protocol.util.NetworkSection;
-import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.BitStorage116;
-import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.BitStorage19;
-import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.virtual.server.world.chunk.ChunkSnapshot;
-import net.elytrium.elytraproxy.virtual.server.world.chunk.LightSection;
+import net.elytrium.elytraproxy.api.virtual.mcprotocollib.BitStorage116;
+import net.elytrium.elytraproxy.api.virtual.mcprotocollib.BitStorage19;
 import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
 
@@ -188,7 +188,7 @@ public class ChunkData implements MinecraftPacket {
     for (int y = 0; y < 256; y++) {
       for (int x = 0; x < 16; x++) {
         for (int z = 0; z < 16; z++) {
-          SimpleBlock block = chunk.getBlock(x, y, z);
+          VirtualBlock block = chunk.getBlock(x, y, z);
           if (!block.isAir()) {
             surface.set(x + z * 16, y + 1);
           }
@@ -247,9 +247,9 @@ public class ChunkData implements MinecraftPacket {
     private int[] post115Biomes = new int[1024];
 
     public BiomeData(ChunkSnapshot chunk) {
-      Biome[] biomes = chunk.getBiomes();
+      VirtualBiome[] biomes = chunk.getBiomes();
       for (int i = 0; i < biomes.length; i++) {
-        post115Biomes[i] = biomes[i].id;
+        post115Biomes[i] = biomes[i].getId();
       }
 
       //Down sample 4x4x4 3d biomes to 2d XZ
@@ -258,9 +258,9 @@ public class ChunkData implements MinecraftPacket {
         for (int z = 0; z < 16; z += 4) {
           samples.clear();
           for (int y = 0; y < 256; y += 16) {
-            Biome biome = biomes[SimpleChunk.getBiomeIndex(x, y, z)];
-            int curr = samples.getOrDefault(biome.id, 0);
-            samples.put(biome.id, curr + 1);
+            VirtualBiome biome = biomes[SimpleChunk.getBiomeIndex(x, y, z)];
+            int curr = samples.getOrDefault(biome.getId(), 0);
+            samples.put(biome.getId(), curr + 1);
           }
           int id = samples.entrySet().stream()
               .max(Entry.comparingByValue())
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/NetworkSection.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/NetworkSection.java
index 5bd70f76..f9cfc966 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/NetworkSection.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/NetworkSection.java
@@ -24,21 +24,20 @@ import io.netty.buffer.ByteBuf;
 import java.util.EnumMap;
 import java.util.Map;
 import lombok.NonNull;
-import net.elytrium.elytraproxy.virtual.protocol.data.storage.BlockStorage;
-import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.NibbleArray3d;
-import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version;
-import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleSection;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBlock;
+import net.elytrium.elytraproxy.api.virtual.chunk.data.BlockSection;
+import net.elytrium.elytraproxy.api.virtual.mcprotocollib.NibbleArray3d;
+import net.elytrium.elytraproxy.virtual.protocol.data.BlockStorage;
 
 public class NetworkSection {
 
   private final Map<ProtocolVersion, BlockStorage> storages = new EnumMap<>(ProtocolVersion.class);
   private final NibbleArray3d blockLight;
   private final NibbleArray3d skyLight;
-  private final SimpleSection section;
+  private final BlockSection section;
   private int blockCount = -1;
 
-  public NetworkSection(SimpleSection section, @NonNull NibbleArray3d blockLight, NibbleArray3d skyLight) {
+  public NetworkSection(BlockSection section, @NonNull NibbleArray3d blockLight, NibbleArray3d skyLight) {
     this.section = section;
     this.blockLight = blockLight;
     this.skyLight = skyLight;
@@ -48,7 +47,7 @@ public class NetworkSection {
     BlockStorage storage = storages.get(version);
     if (storage == null) {
       synchronized (storages) {
-        Version bVersion = Version.map(version);
+        VirtualBlock.Version bVersion = VirtualBlock.Version.map(version);
         BlockStorage blockStorage = BlockStorage.create(version);
         fillBlocks(blockStorage);
         for (ProtocolVersion pVersion : bVersion.getVersions()) {
@@ -136,7 +135,7 @@ public class NetworkSection {
     for (int y = 0; y < 16; y++) {
       for (int x = 0; x < 16; x++) {
         for (int z = 0; z < 16; z++) {
-          SimpleBlock block = section.getBlockAt(x, y, z);
+          VirtualBlock block = section.getBlockAt(x, y, z);
           if (block.isAir()) {
             continue;
           }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/CachedPackets.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/CachedPackets.java
new file mode 100644
index 00000000..9b367e9c
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/CachedPackets.java
@@ -0,0 +1,217 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.server;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import com.velocitypowered.proxy.protocol.packet.Chat;
+import com.velocitypowered.proxy.protocol.packet.Disconnect;
+import com.velocitypowered.proxy.protocol.packet.title.GenericTitlePacket;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Function;
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import net.elytrium.elytraproxy.ElytraProxy;
+import net.elytrium.elytraproxy.api.virtual.chunk.Dimension;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualChunk;
+import net.elytrium.elytraproxy.api.virtual.material.Item;
+import net.elytrium.elytraproxy.api.virtual.material.VirtualItem;
+import net.elytrium.elytraproxy.botfilter.handler.BotFilterSessionHandler;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.virtual.protocol.cache.PreparedPacket;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerAbilities;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetExp;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetSlot;
+import net.elytrium.elytraproxy.virtual.protocol.packet.UpdateViewPosition;
+import net.elytrium.elytraproxy.virtual.protocol.packet.world.ChunkData;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleItem;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleWorld;
+import net.kyori.adventure.nbt.CompoundBinaryTag;
+import net.kyori.adventure.nbt.IntBinaryTag;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+
+@Getter
+@RequiredArgsConstructor
+public class CachedPackets {
+
+  private final ElytraProxy elytraProxy;
+
+  private final String hardcodedBrandString = Settings.IMP.ANTIBOT.BRAND + " (ely.su/github)";
+  private VirtualServerImpl antiBotVirtualServerImpl;
+  private PreparedPacket alreadyConnected;
+  private PreparedPacket tooBigPacket;
+  private PreparedPacket captchaFailed;
+  private PreparedPacket fallingCheckFailed;
+  private PreparedPacket setSlot;
+  private PreparedPacket resetSlot;
+  private PreparedPacket checkingChat;
+  private PreparedPacket checkingCaptchaChat;
+  private PreparedPacket successfulBotFilterChat;
+  private PreparedPacket successfulBotFilterDisconnect;
+  private PreparedPacket captchaPosition;
+  private PreparedPacket noAbilities;
+  private PreparedPacket antiBotTitle;
+  private List<SetExp> experience;
+
+  public void createPackets() {
+    Settings.ANTIBOT.CAPTCHA_COORDS captchaCoords = Settings.IMP.ANTIBOT.CAPTCHA_COORDS;
+    SimpleWorld antiBotVirtualWorld = new SimpleWorld(
+        Dimension.valueOf(Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION),
+        captchaCoords.X, captchaCoords.Y, captchaCoords.Z,
+        (float) captchaCoords.YAW, (float) captchaCoords.PITCH);
+
+    experience = createExpPackets();
+    captchaPosition = new PreparedPacket()
+        .prepare(createPlayerPosAndLookPacket(
+            captchaCoords.X, captchaCoords.Y, captchaCoords.Z, (float) captchaCoords.YAW, (float) captchaCoords.PITCH))
+        .prepare(createUpdateViewPosition((int) captchaCoords.X, (int) captchaCoords.Z), ProtocolVersion.MINECRAFT_1_14);
+
+    noAbilities = prepare(createAbilitiesPacket());
+    alreadyConnected = prepare((version) ->
+        createDisconnectPacket(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY, version));
+    tooBigPacket = prepare((version) ->
+        createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.TOO_BIG_PACKET, version));
+    captchaFailed = prepare((version) ->
+        createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.CAPTCHA_FAILED, version));
+    fallingCheckFailed = prepare((version) ->
+        createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.FALLING_CHECK_FAILED, version));
+
+    setSlot = new PreparedPacket()
+        .prepare(createSetSlotPacket(0, 36, SimpleItem.fromItem(Item.FILLED_MAP), 1, 0, null),
+            ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MINECRAFT_1_16_4)
+        .prepare(createSetSlotPacket(0, 36, SimpleItem.fromItem(Item.FILLED_MAP), 1, 0,
+            CompoundBinaryTag.builder().put("map", IntBinaryTag.of(0)).build()), ProtocolVersion.MINECRAFT_1_17);
+
+    resetSlot = prepare(createSetSlotPacket(0, 36, SimpleItem.fromItem(Item.AIR), 0, 0, null));
+    checkingChat = createChatPacket(Settings.IMP.ANTIBOT.STRINGS.CHECKING);
+    checkingCaptchaChat = createChatPacket(Settings.IMP.ANTIBOT.STRINGS.CHECKING_CAPTCHA);
+    successfulBotFilterChat = createChatPacket(Settings.IMP.ANTIBOT.STRINGS.SUCCESSFUL_CRACKED);
+    successfulBotFilterDisconnect = prepare((version) ->
+        createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.SUCCESSFUL_PREMIUM, version));
+    antiBotTitle = createTitlePacket(
+        Settings.IMP.ANTIBOT.BRAND,
+        Settings.IMP.ANTIBOT.STRINGS.CHECKING_CAPTCHA,
+        10, 50, 10);
+
+    antiBotVirtualServerImpl = new VirtualServerImpl(elytraProxy, antiBotVirtualWorld);
+  }
+
+  private PlayerAbilities createAbilitiesPacket() {
+    return new PlayerAbilities((byte) 6, 0f, 0f);
+  }
+
+  public PlayerPositionAndLook createPlayerPosAndLookPacket(double x, double y, double z, float yaw, float pitch) {
+    return new PlayerPositionAndLook(x, y, z, yaw, pitch, -133, false, true);
+  }
+
+  private List<SetExp> createExpPackets() {
+    List<SetExp> packets = new ArrayList<>();
+    long ticks = BotFilterSessionHandler.TOTAL_TICKS;
+    float expInterval = 1f / (float) ticks;
+    for (int i = 0; i < ticks; ++i) {
+      packets.add(new SetExp(i * expInterval, i, 0));
+    }
+    return packets;
+  }
+
+  public ChunkData createChunkDataPacket(VirtualChunk chunk, int skyLightY) {
+    chunk.setSkyLight(chunk.getX() % 16, skyLightY, chunk.getZ() % 16, (byte) 1);
+    return new ChunkData(chunk.getFullChunkSnapshot(), true);
+  }
+
+  public UpdateViewPosition createUpdateViewPosition(int x, int z) {
+    return new UpdateViewPosition(x >> 4, z >> 4);
+  }
+
+  private SetSlot createSetSlotPacket(int windowId, int slot, VirtualItem item, int count, int data, CompoundBinaryTag nbt) {
+    return new SetSlot(windowId, slot, item, count, data, nbt);
+  }
+
+  private <T extends MinecraftPacket> PreparedPacket prepare(Function<ProtocolVersion, T> packets) {
+    return new PreparedPacket().prepare(packets);
+  }
+
+  @SafeVarargs
+  private <T extends MinecraftPacket> PreparedPacket prepare(T... packets) {
+    PreparedPacket preparedPacket = new PreparedPacket();
+
+    for (T packet : packets) {
+      preparedPacket.prepare(packet);
+    }
+
+    return preparedPacket;
+  }
+
+  private PreparedPacket createChatPacket(String text) {
+    return new PreparedPacket()
+        .prepare(new Chat(
+            ProtocolUtils.getJsonChatSerializer(ProtocolVersion.MINIMUM_VERSION).serialize(
+                LegacyComponentSerializer
+                    .legacyAmpersand()
+                    .deserialize(text)
+            ), Chat.CHAT_TYPE, null
+        ), ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MINECRAFT_1_15_2)
+        .prepare(new Chat(
+            ProtocolUtils.getJsonChatSerializer(ProtocolVersion.MINECRAFT_1_16).serialize(
+                LegacyComponentSerializer
+                    .legacyAmpersand()
+                    .deserialize(text)
+            ), Chat.CHAT_TYPE, null
+        ), ProtocolVersion.MINECRAFT_1_16);
+  }
+
+  private Disconnect createDisconnectPacket(String message, ProtocolVersion version) {
+    Component component = LegacyComponentSerializer.legacyAmpersand().deserialize(message);
+    return Disconnect.create(component, version);
+  }
+
+  private PreparedPacket createTitlePacket(
+      String title, String subtitle, int fadeIn, int stay, int fadeOut) {
+
+    PreparedPacket preparedPacket = new PreparedPacket();
+
+    Component titleComponent = LegacyComponentSerializer.legacyAmpersand().deserialize(title);
+    Component subtitleComponent = LegacyComponentSerializer.legacyAmpersand().deserialize(subtitle);
+
+    preparedPacket.prepare((Function<ProtocolVersion, GenericTitlePacket>) (version) -> {
+      GenericTitlePacket packet = GenericTitlePacket.constructTitlePacket(GenericTitlePacket.ActionType.SET_TITLE, version);
+      packet.setComponent(ProtocolUtils.getJsonChatSerializer(version).serialize(titleComponent));
+      return packet;
+    }, ProtocolVersion.MINECRAFT_1_8);
+
+    preparedPacket.prepare((Function<ProtocolVersion, GenericTitlePacket>) (version) -> {
+      GenericTitlePacket packet = GenericTitlePacket.constructTitlePacket(GenericTitlePacket.ActionType.SET_SUBTITLE, version);
+      packet.setComponent(ProtocolUtils.getJsonChatSerializer(version).serialize(subtitleComponent));
+      return packet;
+    }, ProtocolVersion.MINECRAFT_1_8);
+
+    preparedPacket.prepare((Function<ProtocolVersion, GenericTitlePacket>) (version) -> {
+      GenericTitlePacket packet = GenericTitlePacket.constructTitlePacket(GenericTitlePacket.ActionType.SET_TIMES, version);
+      packet.setFadeIn(fadeIn);
+      packet.setStay(stay);
+      packet.setFadeOut(fadeOut);
+      return packet;
+    }, ProtocolVersion.MINECRAFT_1_8);
+
+    return preparedPacket;
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/ServerPackets.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/ServerPackets.java
deleted file mode 100644
index e5af91d5..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/ServerPackets.java
+++ /dev/null
@@ -1,294 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.virtual.server;
-
-import com.google.common.collect.ImmutableSet;
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.registry.DimensionData;
-import com.velocitypowered.proxy.connection.registry.DimensionInfo;
-import com.velocitypowered.proxy.connection.registry.DimensionRegistry;
-import com.velocitypowered.proxy.protocol.MinecraftPacket;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import com.velocitypowered.proxy.protocol.packet.Chat;
-import com.velocitypowered.proxy.protocol.packet.Disconnect;
-import com.velocitypowered.proxy.protocol.packet.JoinGame;
-import com.velocitypowered.proxy.protocol.packet.PluginMessage;
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.ByteBufAllocator;
-import java.io.IOException;
-import java.nio.file.Path;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.function.Supplier;
-import lombok.Getter;
-import net.elytrium.elytraproxy.botfilter.handler.BotFilterSessionHandler;
-import net.elytrium.elytraproxy.config.Settings;
-import net.elytrium.elytraproxy.virtual.file.SchematicFile;
-import net.elytrium.elytraproxy.virtual.file.WorldFile;
-import net.elytrium.elytraproxy.virtual.protocol.cache.PreparedPacket;
-import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
-import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerAbilities;
-import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
-import net.elytrium.elytraproxy.virtual.protocol.packet.SetExp;
-import net.elytrium.elytraproxy.virtual.protocol.packet.SetSlot;
-import net.elytrium.elytraproxy.virtual.protocol.packet.UpdateViewPosition;
-import net.elytrium.elytraproxy.virtual.protocol.packet.world.ChunkData;
-import net.elytrium.elytraproxy.virtual.server.world.VirtualWorld;
-import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-
-@Getter
-public class ServerPackets {
-
-  private final VirtualServer virtualServer;
-  private final String key = Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.MODERN_KEY;
-  private final String hardcodedBrandString = Settings.IMP.ANTIBOT.BRAND + " (ely.su/github)";
-  private final int dimensionId = Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.ID;
-  private final int legacyDimensionId = Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.LEGACY_ID;
-  private DimensionData dimension;
-  private DimensionData legacyDimension;
-  private VirtualWorld virtualWorld;
-  private PreparedPacket staticWorldPacket;
-  private PreparedPacket joinPacket;
-  private PreparedPacket alreadyConnected;
-  private PreparedPacket tooBigPacket;
-  private PreparedPacket captchaFailed;
-  private PreparedPacket fallingCheckFailed;
-  private PreparedPacket setSlot;
-  private PreparedPacket resetSlot;
-  private PreparedPacket checkingChat;
-  private PreparedPacket checkingCaptchaChat;
-  private PreparedPacket loginChat;
-  private PreparedPacket totpChat;
-  private PreparedPacket registerChat;
-  private PreparedPacket wrongPasswordChat;
-  private PreparedPacket successfulBotFilterChat;
-  private PreparedPacket nicknamePremium;
-  private PreparedPacket nicknameInvalid;
-  private PreparedPacket ipLimit;
-  private PreparedPacket wrongPassword;
-  private PreparedPacket wrongNicknameCase;
-  private PreparedPacket successfulBotFilterDisconnect;
-  private PreparedPacket captchaPosition;
-  private PreparedPacket authPosition;
-  private PreparedPacket noAbilities;
-  private PreparedPacket antiBotBrand;
-  private List<SetExp> experience;
-
-  public ServerPackets(VirtualServer virtualServer) {
-    this.virtualServer = virtualServer;
-  }
-
-  public void createPackets() {
-    Settings.ANTIBOT.CAPTCHA_COORDS captchaCoords = Settings.IMP.ANTIBOT.CAPTCHA_COORDS;
-    Settings.AUTH.AUTH_COORDS authCoords = Settings.IMP.AUTH.AUTH_COORDS;
-    // TODO: Проверять валид ли ид
-    dimension = new DimensionData(key, dimensionId, true,
-        0.0f, false, false, false, true,
-        true, true, false, false, 256,
-        "minecraft:infiniburn_nether",
-        0L, false, 1.0, key, 0, 256);
-    legacyDimension = new DimensionData(key, legacyDimensionId, true,
-        0.0f, false, false, false, true,
-        true, true, false, false, 256,
-        "minecraft:infiniburn_nether",
-        0L, false, 1.0, key, 0, 256);
-    this.virtualWorld = new VirtualWorld(dimension,
-        new DimensionInfo(key, key, true, false), (int) captchaCoords.X, (int) captchaCoords.Y);
-
-    if (Settings.IMP.VIRTUAL.LOAD_WORLD) {
-      try {
-        Path path = Path.of(Settings.IMP.VIRTUAL.WORLD_FILE_PATH);
-        WorldFile file;
-        switch (Settings.IMP.VIRTUAL.WORLD_FILE_TYPE) {
-          case "schematic":
-          default:
-            file = new SchematicFile(path);
-            break;
-        }
-
-        Settings.VIRTUAL.VIRTUAL_COORDS coords = Settings.IMP.VIRTUAL.VIRTUAL_COORDS;
-        file.toWorld(virtualWorld, coords.X, coords.Y, coords.Z);
-      } catch (IOException e) {
-        e.printStackTrace();
-      }
-    }
-
-    experience = createExpPackets();
-    captchaPosition = new PreparedPacket()
-        .prepare(createPlayerPosAndLookPacket(
-            captchaCoords.X, captchaCoords.Y, captchaCoords.Z, (float) captchaCoords.YAW, (float) captchaCoords.PITCH))
-        .prepare(createUpdateViewPosition((int) captchaCoords.X, (int) captchaCoords.Z), ProtocolVersion.MINECRAFT_1_14);
-    authPosition = new PreparedPacket()
-        .prepare(createPlayerPosAndLookPacket(
-            authCoords.X, authCoords.Y, authCoords.Z, (float) authCoords.YAW, (float) authCoords.PITCH))
-        .prepare(createUpdateViewPosition((int) authCoords.X, (int) authCoords.Z), ProtocolVersion.MINECRAFT_1_14);
-
-    joinPacket = new PreparedPacket()
-        .prepare(createLegacyJoinGamePacket(), ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MINECRAFT_1_15_2)
-        .prepare(createJoinGamePacket(), ProtocolVersion.MINECRAFT_1_16);
-
-    staticWorldPacket = prepare(createChunksPackets(60));
-
-    noAbilities = prepare(createAbilitiesPacket());
-    alreadyConnected = prepare(createDisconnectPacket(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY));
-    tooBigPacket = prepare(createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.TOO_BIG_PACKET));
-    captchaFailed = prepare(createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.CAPTCHA_FAILED));
-    fallingCheckFailed = prepare(createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.FALLING_CHECK_FAILED));
-    setSlot = prepare(createSetSlotPacket(0, 36, 358, 1, 0));
-    resetSlot = prepare(createSetSlotPacket(0, 36, -1, 0, 0));
-    checkingChat = createChatPacket(Settings.IMP.ANTIBOT.STRINGS.CHECKING);
-    checkingCaptchaChat = createChatPacket(Settings.IMP.ANTIBOT.STRINGS.CHECKING_CAPTCHA);
-    loginChat = createChatPacket(Settings.IMP.AUTH.STRINGS.LOGIN);
-    totpChat = createChatPacket(Settings.IMP.AUTH.STRINGS.TOTP);
-    registerChat = createChatPacket(Settings.IMP.AUTH.STRINGS.REGISTER);
-    wrongPasswordChat = createChatPacket(Settings.IMP.AUTH.STRINGS.PASSWORD_WRONG);
-    wrongPassword = prepare(createDisconnectPacket(Settings.IMP.AUTH.STRINGS.PASSWORD_WRONG));
-    wrongNicknameCase = prepare(createDisconnectPacket(Settings.IMP.AUTH.STRINGS.WRONG_NICKNAME_CASE));
-    nicknamePremium = prepare(createDisconnectPacket(Settings.IMP.AUTH.STRINGS.NICKNAME_PREMIUM));
-    nicknameInvalid = prepare(createDisconnectPacket(Settings.IMP.AUTH.STRINGS.NICKNAME_INVALID));
-    successfulBotFilterChat = createChatPacket(Settings.IMP.ANTIBOT.STRINGS.SUCCESSFUL_CRACKED);
-    successfulBotFilterDisconnect = prepare(createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.SUCCESSFUL_PREMIUM));
-    ipLimit = prepare(createDisconnectPacket(Settings.IMP.AUTH.STRINGS.IP_LIMIT));
-    antiBotBrand = prepare(() -> createBrandPacket(createBrandBuf(hardcodedBrandString)));
-  }
-
-  private PlayerAbilities createAbilitiesPacket() {
-    return new PlayerAbilities((byte) 6, 0f, 0f);
-  }
-
-  private JoinGame createJoinGamePacket() {
-    DimensionRegistry dimensionRegistry = new DimensionRegistry(ImmutableSet.of(dimension), ImmutableSet.of(key));
-
-    JoinGame joinGame = new JoinGame();
-    joinGame.setEntityId(0);
-    joinGame.setGamemode((short) 2);
-    joinGame.setPreviousGamemode((short) 2);
-    joinGame.setDimension(dimensionId);
-    joinGame.setDifficulty((short) 0);
-    joinGame.setMaxPlayers(1);
-    joinGame.setPartialHashedSeed(System.currentTimeMillis());
-    joinGame.setLevelType("flat");
-    joinGame.setViewDistance(4);
-    joinGame.setReducedDebugInfo(true);
-    joinGame.setIsHardcore(Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.HARDCORE_HEARTS);
-    joinGame.setDimensionRegistry(dimensionRegistry);
-    joinGame.setDimensionInfo(new DimensionInfo(key, key, false, false));
-    joinGame.setCurrentDimensionData(dimension);
-    joinGame.setBiomeRegistry(Biome.getRegistry());
-    return joinGame;
-  }
-
-  private JoinGame createLegacyJoinGamePacket() {
-    JoinGame joinGame = createJoinGamePacket();
-    joinGame.setDimension(legacyDimensionId);
-    return joinGame;
-  }
-
-  public PlayerPositionAndLook createPlayerPosAndLookPacket(double x, double y, double z, float yaw, float pitch) {
-    return new PlayerPositionAndLook(x, y, z, yaw, pitch, -133, false, true);
-  }
-
-  private List<ChunkData> createChunksPackets(int skyLightY) {
-    List<ChunkData> packets = new ArrayList<>();
-    for (SimpleChunk chunk : virtualWorld.getChunks()) {
-      packets.add(createChunkDataPacket(chunk, skyLightY));
-    }
-    return packets;
-  }
-
-  private List<SetExp> createExpPackets() {
-    List<SetExp> packets = new ArrayList<>();
-    long ticks = BotFilterSessionHandler.TOTAL_TICKS;
-    float expInterval = 1f / (float) ticks;
-    for (int i = 0; i < ticks; ++i) {
-      packets.add(new SetExp(i * expInterval, i, 0));
-    }
-    return packets;
-  }
-
-  public ChunkData createChunkDataPacket(SimpleChunk chunk, int skyLightY) {
-    chunk.setSkyLight(chunk.getX() % 16, skyLightY, chunk.getZ() % 16, (byte) 1);
-    return new ChunkData(chunk.getFullChunkSnapshot(), true);
-  }
-
-  public UpdateViewPosition createUpdateViewPosition(int x, int z) {
-    return new UpdateViewPosition(Math.floorDiv(x, 16), Math.floorDiv(z, 16));
-  }
-
-  private SetSlot createSetSlotPacket(int windowId, int slot, int item, int count, int data) {
-    return new SetSlot(windowId, slot, item, count, data);
-  }
-
-  private <T extends MinecraftPacket> PreparedPacket prepare(Supplier<T> packets) {
-    return new PreparedPacket().prepare(packets);
-  }
-
-  @SafeVarargs
-  private <T extends MinecraftPacket> PreparedPacket prepare(T... packets) {
-    PreparedPacket preparedPacket = new PreparedPacket();
-
-    for (T packet : packets) {
-      preparedPacket.prepare(packet);
-    }
-
-    return preparedPacket;
-  }
-
-  private <T extends MinecraftPacket> PreparedPacket prepare(List<T> packets) {
-    PreparedPacket preparedPacket = new PreparedPacket();
-    packets.forEach(preparedPacket::prepare);
-    return preparedPacket;
-  }
-
-  private PluginMessage createBrandPacket(ByteBuf brandBuf) {
-    return new PluginMessage("MC|Brand", brandBuf);
-  }
-
-  private ByteBuf createBrandBuf(String brand) {
-    ByteBuf brandBuf = ByteBufAllocator.DEFAULT.heapBuffer();
-    ProtocolUtils.writeString(brandBuf, brand);
-    return brandBuf;
-  }
-
-  private PreparedPacket createChatPacket(String text) {
-    return new PreparedPacket()
-        .prepare(new Chat(
-            ProtocolUtils.getJsonChatSerializer(ProtocolVersion.MINIMUM_VERSION).serialize(
-                LegacyComponentSerializer
-                    .legacyAmpersand()
-                    .deserialize(text)
-            ), Chat.CHAT_TYPE, null
-        ), ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MINECRAFT_1_15_2)
-        .prepare(new Chat(
-            ProtocolUtils.getJsonChatSerializer(ProtocolVersion.MINECRAFT_1_16).serialize(
-                LegacyComponentSerializer
-                    .legacyAmpersand()
-                    .deserialize(text)
-            ), Chat.CHAT_TYPE, null
-        ), ProtocolVersion.MINECRAFT_1_16);
-  }
-
-  private Disconnect createDisconnectPacket(String message) {
-    Component component = LegacyComponentSerializer.legacyAmpersand().deserialize(message);
-    return Disconnect.create(component, ProtocolVersion.MINIMUM_VERSION);
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/SimpleSessionHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/SimpleSessionHandler.java
new file mode 100644
index 00000000..6ed1ede0
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/SimpleSessionHandler.java
@@ -0,0 +1,113 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.server;
+
+import com.velocitypowered.api.proxy.server.RegisteredServer;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
+import com.velocitypowered.proxy.protocol.packet.Chat;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelPipeline;
+import lombok.Getter;
+import net.elytrium.elytraproxy.ElytraProxy;
+import net.elytrium.elytraproxy.api.virtual.VirtualSessionHandler;
+import net.elytrium.elytraproxy.api.virtual.player.VirtualServerPlayer;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.virtual.protocol.cache.PreparedPacketEncoder;
+import net.elytrium.elytraproxy.virtual.protocol.packet.Player;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPosition;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
+import net.elytrium.elytraproxy.virtual.protocol.packet.TeleportConfirm;
+
+@Getter
+public class SimpleSessionHandler implements MinecraftSessionHandler {
+  private final ElytraProxy elytraProxy;
+  private final ConnectedPlayer player;
+  private final VirtualSessionHandler callback;
+  private final MinecraftSessionHandler originalHandler;
+  private RegisteredServer previousServer;
+
+  public SimpleSessionHandler(
+      ElytraProxy elytraProxy,
+      ConnectedPlayer player,
+      VirtualSessionHandler callback,
+      MinecraftSessionHandler originalHandler) {
+    this.elytraProxy = elytraProxy;
+    this.player = player;
+    this.callback = callback;
+    this.originalHandler = originalHandler;
+
+    player.getCurrentServer().ifPresent(e -> previousServer = e.getServer());
+  }
+
+  public void onSpawn(VirtualServerImpl server, VirtualServerPlayer player) {
+    callback.onSpawn(server, player);
+  }
+
+  public boolean handle(Player packet) {
+    callback.onGround(packet.isOnGround());
+    return true;
+  }
+
+  public boolean handle(PlayerPosition packet) {
+    callback.onMove(packet.getX(), packet.getY(), packet.getZ());
+    callback.onGround(packet.isOnGround());
+    return true;
+  }
+
+  public boolean handle(PlayerPositionAndLook packet) {
+    callback.onMove(packet.getX(), packet.getY(), packet.getZ());
+    callback.onRotate(packet.getYaw(), packet.getPitch());
+    callback.onGround(packet.isOnGround());
+    return true;
+  }
+
+  public boolean handle(TeleportConfirm packet) {
+    callback.onTeleport(packet.getTeleportId());
+    return true;
+  }
+
+  public boolean handle(Chat packet) {
+    callback.onChat(packet.getMessage());
+    return true;
+  }
+
+  @Override
+  public void handleUnknown(ByteBuf packet) {
+    if (packet.readableBytes() > 2048) {
+      elytraProxy.getStatistics().addBlockedBots();
+      player.getConnection().closeWith(elytraProxy.getPackets().getTooBigPacket());
+    }
+  }
+
+  @SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE")
+  public void disconnected() {
+    callback.onDisconnect();
+    if (Settings.IMP.ANTIBOT.LOGGING_ENABLED) {
+      elytraProxy.getLogger().info(
+          player.getUsername() + " (" + player.getRemoteAddress()
+              + ") has disconnected from VirtualServer");
+    }
+    player.getConnection().setSessionHandler(originalHandler);
+    ChannelPipeline pipeline = player.getConnection().getChannel().pipeline();
+    if (pipeline.names().contains("prepared-encoder")) {
+      pipeline.remove(PreparedPacketEncoder.class);
+    }
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/SimpleVirtualServerPlayer.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/SimpleVirtualServerPlayer.java
new file mode 100644
index 00000000..e976306b
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/SimpleVirtualServerPlayer.java
@@ -0,0 +1,134 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.server;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.api.proxy.Player;
+import com.velocitypowered.api.proxy.server.RegisteredServer;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
+import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import com.velocitypowered.proxy.protocol.packet.title.GenericTitlePacket;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+import java.awt.image.BufferedImage;
+import lombok.RequiredArgsConstructor;
+import net.elytrium.elytraproxy.api.virtual.VirtualServer;
+import net.elytrium.elytraproxy.api.virtual.material.VirtualItem;
+import net.elytrium.elytraproxy.api.virtual.player.VirtualServerPlayer;
+import net.elytrium.elytraproxy.botfilter.generator.map.MapPalette;
+import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetSlot;
+import net.kyori.adventure.nbt.CompoundBinaryTag;
+import net.kyori.adventure.text.Component;
+
+@RequiredArgsConstructor
+public class SimpleVirtualServerPlayer implements VirtualServerPlayer {
+  private final ConnectedPlayer player;
+  private final VirtualServerImpl server;
+
+  @Override
+  public void sendImage(int mapId, BufferedImage image) {
+    byte[] canvas = new byte[16384];
+    int[] toWrite = MapPalette.imageToBytes(image);
+
+    for (int i = 0; i < 16384; i++) {
+      canvas[i] = (byte) toWrite[i];
+    }
+
+    player.getConnection().write(
+        new MapDataPacket(mapId, (byte) 0, new MapDataPacket.MapData(128, 128, 0, 0, canvas))
+    );
+  }
+
+  @Override
+  public void setInventory(int slot, VirtualItem item, int count, int data, CompoundBinaryTag nbt) {
+    player.getConnection().write(
+        new SetSlot(0, slot, item, count, data, nbt)
+    );
+  }
+
+  @Override
+  public void sendTitle(Component title, Component subtitle, ProtocolVersion version, int fadeIn, int stay, int fadeOut) {
+    {
+      GenericTitlePacket packet = GenericTitlePacket.constructTitlePacket(GenericTitlePacket.ActionType.SET_TITLE, version);
+      packet.setComponent(ProtocolUtils.getJsonChatSerializer(version).serialize(title));
+      player.getConnection().write(packet);
+    }
+    {
+      GenericTitlePacket packet = GenericTitlePacket.constructTitlePacket(GenericTitlePacket.ActionType.SET_SUBTITLE, version);
+      packet.setComponent(ProtocolUtils.getJsonChatSerializer(version).serialize(subtitle));
+      player.getConnection().write(packet);
+    }
+    {
+      GenericTitlePacket packet = GenericTitlePacket.constructTitlePacket(GenericTitlePacket.ActionType.SET_TIMES, version);
+      packet.setFadeIn(fadeIn);
+      packet.setStay(stay);
+      packet.setFadeOut(fadeOut);
+      player.getConnection().write(packet);
+    }
+  }
+
+  @Override
+  public void teleport(double x, double y, double z, float yaw, float pitch) {
+    player.getConnection().write(
+        new PlayerPositionAndLook(x, y, z, yaw, pitch, -133, false, true)
+    );
+  }
+
+  @Override
+  @SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE")
+  public void disconnect() {
+    SimpleSessionHandler handler = (SimpleSessionHandler) player.getConnection().getSessionHandler();
+    handler.disconnected();
+
+    player.getConnection().eventLoop().execute(() -> {
+      if (handler.getOriginalHandler() instanceof LoginSessionHandler) {
+        ((LoginSessionHandler) handler.getOriginalHandler()).initialize(player);
+      } else {
+        player.createConnectionRequest(handler.getPreviousServer()).fireAndForget();
+      }
+    });
+  }
+
+  @Override
+  @SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE")
+  public void disconnect(RegisteredServer server) {
+    SimpleSessionHandler handler = (SimpleSessionHandler) player.getConnection().getSessionHandler();
+    handler.disconnected();
+
+    player.getConnection().eventLoop().execute(() -> {
+      if (handler.getOriginalHandler() instanceof LoginSessionHandler) {
+        handler.getElytraProxy().getLogger().error("Cannot send to Registered Server while joining");
+        ((LoginSessionHandler) handler.getOriginalHandler()).initialize(player);
+      } else {
+        player.createConnectionRequest(server).fireAndForget();
+      }
+    });
+  }
+
+  @Override
+  public VirtualServer getServer() {
+    return server;
+  }
+
+  @Override
+  public Player getProxyPlayer() {
+    return player;
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualFactoryImpl.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualFactoryImpl.java
new file mode 100644
index 00000000..2f4eb6c6
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualFactoryImpl.java
@@ -0,0 +1,68 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+
+package net.elytrium.elytraproxy.virtual.server;
+
+import lombok.AllArgsConstructor;
+import net.elytrium.elytraproxy.ElytraProxy;
+import net.elytrium.elytraproxy.api.virtual.VirtualFactory;
+import net.elytrium.elytraproxy.api.virtual.VirtualServer;
+import net.elytrium.elytraproxy.api.virtual.chunk.Dimension;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBlock;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualWorld;
+import net.elytrium.elytraproxy.api.virtual.material.Block;
+import net.elytrium.elytraproxy.api.virtual.material.Item;
+import net.elytrium.elytraproxy.api.virtual.material.VirtualItem;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleItem;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleWorld;
+
+@AllArgsConstructor
+public class VirtualFactoryImpl implements VirtualFactory {
+
+  private final ElytraProxy elytraProxy;
+
+  public VirtualBlock createSimpleBlock(Block block) {
+    return SimpleBlock
+        .fromLegacyId((short) block.getId())
+        .setData(block.getData());
+  }
+
+  public VirtualBlock createSimpleBlock(short legacyId, byte data) {
+    return SimpleBlock
+        .fromLegacyId(legacyId)
+        .setData(data);
+  }
+
+  public VirtualBlock createSimpleBlock(
+      boolean solid, boolean air, boolean motionBlocking, SimpleBlock.BlockInfo... blockInfos) {
+    return new SimpleBlock(solid, air, motionBlocking, blockInfos);
+  }
+
+  public VirtualItem getItem(Item item) {
+    return SimpleItem.fromItem(item);
+  }
+
+  public VirtualServer createVirtualServer(VirtualWorld world) {
+    return new VirtualServerImpl(elytraProxy, world);
+  }
+
+  public VirtualWorld createVirtualWorld(Dimension dimension, double x, double y, double z, float yaw, float pitch) {
+    return new SimpleWorld(dimension, x, y, z, yaw, pitch);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualServer.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualServer.java
deleted file mode 100644
index b48599ef..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualServer.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.virtual.server;
-
-import com.velocitypowered.proxy.connection.MinecraftConnection;
-import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
-import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
-import com.velocitypowered.proxy.network.Connections;
-import com.velocitypowered.proxy.protocol.StateRegistry;
-import io.netty.channel.ChannelPipeline;
-import lombok.Getter;
-import net.elytrium.elytraproxy.ElytraProxy;
-import net.elytrium.elytraproxy.virtual.protocol.cache.PreparedPacketEncoder;
-
-public class VirtualServer implements MinecraftSessionHandler {
-
-  @Getter
-  private final ElytraProxy elytraProxy;
-  @Getter
-  private final ServerPackets packets;
-
-  public VirtualServer(ElytraProxy elytraProxy) {
-    this.elytraProxy = elytraProxy;
-    this.packets = new ServerPackets(this);
-  }
-
-  public void reload() {
-    packets.createPackets();
-  }
-
-  public void spawnPlayer(VirtualSessionHandler handler) {
-    ConnectedPlayer player = handler.getPlayer();
-    MinecraftConnection connection = player.getConnection();
-    ChannelPipeline pipeline = connection.getChannel().pipeline();
-
-    pipeline.addAfter(Connections.MINECRAFT_ENCODER,
-        "prepared-encoder", new PreparedPacketEncoder(connection.getProtocolVersion()));
-
-    player.setVirtualServerJoined(true);
-    connection.setSessionHandler(handler);
-    handler.onSpawn();
-  }
-
-  public void sendJoinPacket(VirtualSessionHandler handler) {
-    ConnectedPlayer player = handler.getPlayer();
-    MinecraftConnection connection = player.getConnection();
-
-    connection.write(packets.getJoinPacket());
-  }
-
-  public void loginComplete(VirtualSessionHandler handler) {
-    ConnectedPlayer player = handler.getPlayer();
-    MinecraftConnection connection = player.getConnection();
-
-    if (connection.getState() != StateRegistry.VIRTUAL) {
-      connection.setState(StateRegistry.VIRTUAL);
-      sendJoinPacket(handler);
-    }
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualServerImpl.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualServerImpl.java
new file mode 100644
index 00000000..b3e1f92c
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualServerImpl.java
@@ -0,0 +1,213 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.server;
+
+import com.google.common.collect.ImmutableSet;
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.api.proxy.Player;
+import com.velocitypowered.proxy.connection.ConnectionTypes;
+import com.velocitypowered.proxy.connection.MinecraftConnection;
+import com.velocitypowered.proxy.connection.client.ClientPlaySessionHandler;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
+import com.velocitypowered.proxy.connection.registry.DimensionData;
+import com.velocitypowered.proxy.connection.registry.DimensionInfo;
+import com.velocitypowered.proxy.connection.registry.DimensionRegistry;
+import com.velocitypowered.proxy.network.Connections;
+import com.velocitypowered.proxy.protocol.StateRegistry;
+import com.velocitypowered.proxy.protocol.packet.JoinGame;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+import io.netty.channel.ChannelPipeline;
+import java.util.ArrayList;
+import java.util.List;
+import lombok.Getter;
+import lombok.Setter;
+import net.elytrium.elytraproxy.ElytraProxy;
+import net.elytrium.elytraproxy.api.virtual.VirtualServer;
+import net.elytrium.elytraproxy.api.virtual.VirtualSessionHandler;
+import net.elytrium.elytraproxy.api.virtual.chunk.Dimension;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualChunk;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualWorld;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.virtual.material.Biome;
+import net.elytrium.elytraproxy.virtual.protocol.cache.PreparedPacket;
+import net.elytrium.elytraproxy.virtual.protocol.cache.PreparedPacketEncoder;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
+import net.elytrium.elytraproxy.virtual.protocol.packet.UpdateViewPosition;
+import net.elytrium.elytraproxy.virtual.protocol.packet.world.ChunkData;
+
+@Getter
+@Setter
+@SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE")
+public class VirtualServerImpl implements VirtualServer {
+  private final ElytraProxy elytraProxy;
+  private VirtualWorld world;
+
+  private PreparedPacket joinPackets;
+  private PreparedPacket fastRejoinPackets;
+  private PreparedPacket safeRejoinPackets;
+  private PreparedPacket chunks;
+  private PreparedPacket spawnPosition;
+
+  public VirtualServerImpl(ElytraProxy elytraProxy, VirtualWorld world) {
+    this.elytraProxy = elytraProxy;
+    this.world = world;
+
+    refresh();
+  }
+
+  public void refresh() {
+    JoinGame legacyJoinGame = createLegacyJoinGamePacket();
+    JoinGame joinGame = createJoinGamePacket();
+
+    joinPackets = new PreparedPacket()
+        .prepare(legacyJoinGame, ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MINECRAFT_1_15_2)
+        .prepare(joinGame, ProtocolVersion.MINECRAFT_1_16);
+
+    fastRejoinPackets = new PreparedPacket();
+    ClientPlaySessionHandler.createFastClientServerSwitch(legacyJoinGame, ProtocolVersion.MINECRAFT_1_7_2)
+        .forEach(minecraftPacket -> fastRejoinPackets.prepare(minecraftPacket, ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MINECRAFT_1_15_2));
+    ClientPlaySessionHandler.createFastClientServerSwitch(joinGame, ProtocolVersion.MINECRAFT_1_16)
+        .forEach(minecraftPacket -> fastRejoinPackets.prepare(minecraftPacket, ProtocolVersion.MINECRAFT_1_16));
+
+    safeRejoinPackets = new PreparedPacket()
+        .prepare(ClientPlaySessionHandler.createSafeClientServerSwitch(legacyJoinGame));
+
+    chunks = new PreparedPacket().prepare(createChunksPackets());
+    spawnPosition = new PreparedPacket()
+        .prepare(createPlayerPosAndLookPacket(
+            world.getSpawnX(), world.getSpawnY(), world.getSpawnZ(), getWorld().getYaw(), getWorld().getPitch()))
+        .prepare(createUpdateViewPosition((int) world.getSpawnX(), (int) world.getSpawnZ()), ProtocolVersion.MINECRAFT_1_14);
+  }
+
+  public void spawnPlayer(ConnectedPlayer player, VirtualSessionHandler handler) {
+    MinecraftConnection connection = player.getConnection();
+
+    connection.eventLoop().execute(() -> {
+      ChannelPipeline pipeline = connection.getChannel().pipeline();
+      pipeline.names().forEach(System.out::println);
+
+      if (Settings.IMP.ANTIBOT.LOGGING_ENABLED) {
+        elytraProxy.getLogger().info(
+            player.getUsername() + " (" + player.getRemoteAddress()
+                + ") has connected to VirtualServer " + handler.getClass().getSimpleName());
+      }
+
+      if (!pipeline.names().contains("prepared-encoder")) {
+        pipeline.addAfter(Connections.MINECRAFT_ENCODER,
+            "prepared-encoder", new PreparedPacketEncoder(connection.getProtocolVersion()));
+      }
+
+      SimpleSessionHandler simpleSessionHandler =
+          new SimpleSessionHandler(elytraProxy, player, handler, connection.getSessionHandler());
+
+      player.setVirtualServerJoined(true);
+
+      if (connection.getState() != StateRegistry.VIRTUAL) {
+        connection.setState(StateRegistry.VIRTUAL);
+        if (player.getConnectedServer() != null) {
+          player.getConnectedServer().disconnect();
+        }
+      }
+
+      if (player.isVirtualServerJoined()) {
+        if (connection.getType() == ConnectionTypes.LEGACY_FORGE) {
+          connection.delayedWrite(getSafeRejoinPackets());
+        } else {
+          connection.delayedWrite(getFastRejoinPackets());
+        }
+      } else {
+        connection.delayedWrite(getJoinPackets());
+      }
+
+      connection.setSessionHandler(simpleSessionHandler);
+
+      connection.flush();
+      respawnPlayer(player);
+      simpleSessionHandler.onSpawn(this, new SimpleVirtualServerPlayer(player, this));
+    });
+  }
+
+  public void respawnPlayer(Player player) {
+    MinecraftConnection connection = ((ConnectedPlayer) player).getConnection();
+
+    connection.write(getChunks());
+    connection.write(getSpawnPosition());
+  }
+
+  private DimensionData createDimensionData(Dimension dimension) {
+    return new DimensionData(dimension.getKey(), dimension.getModernId(), true,
+        0.0f, false, false, false, true,
+        true, true, false, false, 256,
+        "minecraft:infiniburn_nether",
+        0L, false, 1.0, dimension.getKey(), 0, 256);
+  }
+
+  private JoinGame createJoinGamePacket() {
+    Dimension dimension = world.getDimension();
+    DimensionData dimensionData = createDimensionData(dimension);
+    String key = dimension.getKey();
+
+    DimensionRegistry dimensionRegistry =
+        new DimensionRegistry(ImmutableSet.of(dimensionData), ImmutableSet.of(key));
+
+    JoinGame joinGame = new JoinGame();
+    joinGame.setEntityId(0);
+    joinGame.setGamemode((short) 2);
+    joinGame.setPreviousGamemode((short) 2);
+    joinGame.setDimension(dimension.getModernId());
+    joinGame.setDifficulty((short) 0);
+    joinGame.setMaxPlayers(1);
+    joinGame.setPartialHashedSeed(System.currentTimeMillis());
+    joinGame.setLevelType("flat");
+    joinGame.setViewDistance(12);
+    joinGame.setReducedDebugInfo(true);
+    joinGame.setIsHardcore(Settings.IMP.ANTIBOT.HARDCORE_HEARTS);
+    joinGame.setDimensionRegistry(dimensionRegistry);
+    joinGame.setDimensionInfo(new DimensionInfo(key, key, false, false));
+    joinGame.setCurrentDimensionData(dimensionData);
+    joinGame.setBiomeRegistry(Biome.getRegistry());
+    return joinGame;
+  }
+
+  private JoinGame createLegacyJoinGamePacket() {
+    JoinGame joinGame = createJoinGamePacket();
+    joinGame.setDimension(world.getDimension().getLegacyId());
+    return joinGame;
+  }
+
+  private List<ChunkData> createChunksPackets() {
+    List<ChunkData> packets = new ArrayList<>();
+    for (VirtualChunk chunk : world.getChunks()) {
+      packets.add(createChunkDataPacket(chunk, (int) world.getSpawnY()));
+    }
+    return packets;
+  }
+
+  private ChunkData createChunkDataPacket(VirtualChunk chunk, int skyLightY) {
+    chunk.setSkyLight(chunk.getX() % 16, skyLightY, chunk.getZ() % 16, (byte) 1);
+    return new ChunkData(chunk.getFullChunkSnapshot(), true);
+  }
+
+  public PlayerPositionAndLook createPlayerPosAndLookPacket(double x, double y, double z, float yaw, float pitch) {
+    return new PlayerPositionAndLook(x, y, z, yaw, pitch, -133, false, true);
+  }
+
+  public UpdateViewPosition createUpdateViewPosition(int x, int z) {
+    return new UpdateViewPosition(x >> 4, z >> 4);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualSessionHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualSessionHandler.java
deleted file mode 100644
index 3b9f5fa9..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualSessionHandler.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Copyright (C) 2021 Elytrium
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.virtual.server;
-
-import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
-import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
-import io.netty.channel.ChannelPipeline;
-import java.util.Locale;
-import lombok.Getter;
-import net.elytrium.elytraproxy.virtual.protocol.cache.PreparedPacketEncoder;
-import net.elytrium.elytraproxy.virtual.protocol.packet.Player;
-import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPosition;
-import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
-import net.elytrium.elytraproxy.virtual.protocol.packet.TeleportConfirm;
-
-@Getter
-public abstract class VirtualSessionHandler implements MinecraftSessionHandler {
-  public final ConnectedPlayer player;
-  public final MinecraftSessionHandler originalHandler;
-  public final VirtualServer virtualServer;
-  public final String lowercaseNickname;
-
-  public VirtualSessionHandler(
-      ConnectedPlayer player, MinecraftSessionHandler originalHandler, VirtualServer virtualServer) {
-    this.player = player;
-    this.originalHandler = originalHandler;
-    this.virtualServer = virtualServer;
-    this.lowercaseNickname = player.getUsername().toLowerCase(Locale.ROOT);
-  }
-
-  public abstract void onSpawn();
-
-  public boolean handle(Player packet) {
-    return false;
-  }
-
-  public boolean handle(PlayerPosition packet) {
-    return false;
-  }
-
-  public boolean handle(PlayerPositionAndLook packet) {
-    return false;
-  }
-
-  public boolean handle(TeleportConfirm packet) {
-    return false;
-  }
-
-  public void disconnected() {
-    ChannelPipeline pipeline = player.getConnection().getChannel().pipeline();
-    if (pipeline.names().contains("prepared-encoder")) {
-      pipeline.remove(PreparedPacketEncoder.class);
-    }
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleBlock.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleBlock.java
index 7cb44c84..087590b2 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleBlock.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleBlock.java
@@ -19,10 +19,6 @@
 
 package net.elytrium.elytraproxy.virtual.server.world;
 
-import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.BlockInfo.info;
-import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.LEGACY;
-import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_17;
-
 import com.google.gson.Gson;
 import com.google.gson.internal.LinkedTreeMap;
 import com.velocitypowered.api.network.ProtocolVersion;
@@ -30,19 +26,18 @@ import java.io.IOException;
 import java.io.InputStreamReader;
 import java.net.URL;
 import java.nio.charset.StandardCharsets;
-import java.util.Arrays;
 import java.util.EnumMap;
 import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.Set;
-import lombok.NonNull;
+import lombok.Getter;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBlock;
 import org.jetbrains.annotations.NotNull;
 
-public class SimpleBlock {
+public class SimpleBlock implements VirtualBlock {
 
   public static final SimpleBlock AIR = air(
-      info(LEGACY, 0)
+      BlockInfo.info(Version.LEGACY, 0)
   );
 
   private static final Gson gson = new Gson();
@@ -50,13 +45,13 @@ public class SimpleBlock {
 
   static {
     try {
-      URL file = ClassLoader.getSystemResource("net/elytrium/elytraproxy/virtual/ids.json");
+      URL file = ClassLoader.getSystemResource("net/elytrium/elytraproxy/virtual/blocks.json");
       LinkedTreeMap<String, LinkedTreeMap<String, String>> map = gson.fromJson(
           new InputStreamReader(file.openStream(), StandardCharsets.UTF_8), LinkedTreeMap.class);
 
       map.forEach((legacyBlockId, versionMap) -> {
         BlockInfo[] info = versionMap.entrySet().stream()
-            .map(e -> info(Version.parse(e.getKey()), Integer.parseInt(e.getValue())))
+            .map(e -> BlockInfo.info(Version.parse(e.getKey()), Integer.parseInt(e.getValue())))
             .toArray(BlockInfo[]::new);
 
         legacyIDsMap.put(Short.valueOf(legacyBlockId), solid(info));
@@ -68,15 +63,17 @@ public class SimpleBlock {
     }
   }
 
-  private final Map<Version, BlockInfo> blockInfos = new EnumMap<>(Version.class);
+  @Getter
+  private final Map<Version, BlockInfo> blockInfos;
   private final boolean solid;
   private final boolean air;
   private final boolean motionBlocking; //1.14+
 
   public SimpleBlock(boolean solid, boolean air, boolean motionBlocking, BlockInfo... blockInfos) {
     this.motionBlocking = motionBlocking;
+    this.blockInfos = new EnumMap<>(Version.class);
     for (BlockInfo info : blockInfos) {
-      for (Version version : EnumSet.range(info.version, MINECRAFT_1_17)) {
+      for (Version version : EnumSet.range(info.getVersion(), Version.MINECRAFT_1_17)) {
         this.blockInfos.put(version, info);
       }
     }
@@ -84,10 +81,22 @@ public class SimpleBlock {
     this.solid = solid;
   }
 
+  public SimpleBlock(SimpleBlock block) {
+    this.motionBlocking = block.motionBlocking;
+    this.blockInfos = Map.copyOf(block.blockInfos);
+    this.air = block.air;
+    this.solid = block.solid;
+  }
+
   public short getId(Version version) {
     return blockInfos.get(version).getId();
   }
 
+  public SimpleBlock setData(byte data) {
+    blockInfos.forEach((e, k) -> k.setData(data));
+    return this;
+  }
+
   public byte getData(Version version) {
     return blockInfos.get(version).getData();
   }
@@ -136,139 +145,4 @@ public class SimpleBlock {
     return new SimpleBlock(false, true, false, infos);
   }
 
-  public enum Version {
-    /*
-    MINECRAFT_1_7(ProtocolVersion.MINECRAFT_1_7_2, ProtocolVersion.MINECRAFT_1_7_6),
-    MINECRAFT_1_8(ProtocolVersion.MINECRAFT_1_8),
-    MINECRAFT_1_9(EnumSet.range(ProtocolVersion.MINECRAFT_1_9, ProtocolVersion.MINECRAFT_1_9_4)),
-    MINECRAFT_1_10(ProtocolVersion.MINECRAFT_1_10),
-    MINECRAFT_1_11(ProtocolVersion.MINECRAFT_1_11, ProtocolVersion.MINECRAFT_1_11_1),
-    */
-    LEGACY(EnumSet.range(ProtocolVersion.MINECRAFT_1_7_2, ProtocolVersion.MINECRAFT_1_12_2)),
-    MINECRAFT_1_12(EnumSet.range(ProtocolVersion.MINECRAFT_1_12, ProtocolVersion.MINECRAFT_1_12_2)),
-    MINECRAFT_1_13(ProtocolVersion.MINECRAFT_1_13),
-    MINECRAFT_1_13_2(ProtocolVersion.MINECRAFT_1_13_1, ProtocolVersion.MINECRAFT_1_13_2),
-    MINECRAFT_1_14(EnumSet.range(ProtocolVersion.MINECRAFT_1_14, ProtocolVersion.MINECRAFT_1_14_4)),
-    MINECRAFT_1_15(EnumSet.range(ProtocolVersion.MINECRAFT_1_15, ProtocolVersion.MINECRAFT_1_15_2)),
-    MINECRAFT_1_16(ProtocolVersion.MINECRAFT_1_16, ProtocolVersion.MINECRAFT_1_16_1),
-    MINECRAFT_1_16_2(EnumSet.range(ProtocolVersion.MINECRAFT_1_16_2, ProtocolVersion.MINECRAFT_1_16_4)),
-    MINECRAFT_1_17(EnumSet.range(ProtocolVersion.MINECRAFT_1_17, ProtocolVersion.MINECRAFT_1_17_1));
-
-    private static final EnumMap<ProtocolVersion, Version> mcVersionToBlockVersions = new EnumMap<>(
-        ProtocolVersion.class);
-
-    public static Version parse(String from) {
-      switch (from) {
-        case "1.12":
-          return MINECRAFT_1_12;
-        case "1.13":
-          return MINECRAFT_1_13;
-        case "1.13.2":
-          return MINECRAFT_1_13_2;
-        case "1.14":
-          return MINECRAFT_1_14;
-        case "1.15":
-          return MINECRAFT_1_15;
-        case "1.16":
-          return MINECRAFT_1_16;
-        case "1.16.2":
-          return MINECRAFT_1_16_2;
-        case "1.17":
-          return MINECRAFT_1_17;
-        default:
-          return LEGACY;
-      }
-    }
-
-    static {
-      for (Version version : Version.values()) {
-        for (ProtocolVersion protocolVersion : version.versions) {
-          mcVersionToBlockVersions.put(protocolVersion, version);
-        }
-      }
-    }
-
-    private final Set<ProtocolVersion> versions;
-
-    Version(ProtocolVersion... versions) {
-      this.versions = EnumSet.copyOf(Arrays.asList(versions));
-    }
-
-    Version(Set<ProtocolVersion> versions) {
-      this.versions = versions;
-    }
-
-    public boolean isBefore(Version other) {
-      return this.compareTo(other) < 0;
-    }
-
-    public boolean isBeforeOrEq(Version other) {
-      return this.compareTo(other) <= 0;
-    }
-
-    public boolean isAfter(Version other) {
-      return this.compareTo(other) > 0;
-    }
-
-    public boolean isAfterOrEq(Version other) {
-      return this.compareTo(other) >= 0;
-    }
-
-    public Set<ProtocolVersion> getVersions() {
-      return versions;
-    }
-
-    public static Version map(ProtocolVersion protocolVersion) {
-      return mcVersionToBlockVersions.get(protocolVersion);
-    }
-  }
-
-  public static class BlockInfo {
-
-    @NonNull
-    @NotNull
-    private final Version version;
-    private final short id;
-    private final byte data;
-    private final BlockInfo fallback;
-
-    public BlockInfo(Version version, short id, byte data) {
-      this(version, id, data, null);
-    }
-
-    public BlockInfo(Version version, @NonNull BlockInfo fallback) {
-      this(version, (short) 0, (byte) 0, fallback);
-    }
-
-    private BlockInfo(@NonNull Version version, short id, byte data, BlockInfo fallback) {
-      this.version = version;
-      this.id = id;
-      this.data = data;
-      this.fallback = fallback;
-    }
-
-    public Version getVersion() {
-      return version;
-    }
-
-    public short getId() {
-      return fallback == null ? id : fallback.getId();
-    }
-
-    public byte getData() {
-      return fallback == null ? data : fallback.getData();
-    }
-
-    public static BlockInfo info(Version version, int id, int meta) {
-      return new BlockInfo(version, (short) id, (byte) meta);
-    }
-
-    public static BlockInfo info(Version version, int id) {
-      return info(version, id, 0);
-    }
-
-    public static BlockInfo fallback(Version version, SimpleBlock fallback) {
-      return new BlockInfo(version, fallback.blockInfos.get(version));
-    }
-  }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleItem.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleItem.java
new file mode 100644
index 00000000..78c5417a
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleItem.java
@@ -0,0 +1,139 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.server.world;
+
+import com.google.gson.Gson;
+import com.google.gson.internal.LinkedTreeMap;
+import com.velocitypowered.api.network.ProtocolVersion;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.URL;
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.EnumMap;
+import java.util.EnumSet;
+import java.util.Map;
+import java.util.Set;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import net.elytrium.elytraproxy.api.virtual.material.Item;
+import net.elytrium.elytraproxy.api.virtual.material.VirtualItem;
+
+@NoArgsConstructor
+public class SimpleItem implements VirtualItem {
+
+  private static final Gson gson = new Gson();
+
+  @Getter
+  private static final Map<Item, SimpleItem> legacyIdMap = new EnumMap<>(Item.class);
+
+  @Getter
+  private final Map<Version, Short> versionIDs = new EnumMap<>(Version.class);
+
+  public short getId(ProtocolVersion version) {
+    return getId(Version.map(version));
+  }
+
+  public short getId(Version version) {
+    return versionIDs.get(version);
+  }
+
+  static {
+    try {
+      URL file = ClassLoader.getSystemResource("net/elytrium/elytraproxy/virtual/items.json");
+      LinkedTreeMap<String, LinkedTreeMap<String, String>> map = gson.fromJson(
+          new InputStreamReader(file.openStream(), StandardCharsets.UTF_8), LinkedTreeMap.class);
+
+      for (Item item : Item.values()) {
+        SimpleItem simpleItem = new SimpleItem();
+        map.get(String.valueOf(item.getId()))
+            .forEach((key, value) -> simpleItem.getVersionIDs().put(Version.parse(key), Short.parseShort(value)));
+        legacyIdMap.put(item, simpleItem);
+      }
+    } catch (IOException e) {
+      e.printStackTrace();
+    }
+  }
+
+  public static SimpleItem fromItem(Item item) {
+    return legacyIdMap.get(item);
+  }
+
+  public enum Version {
+    LEGACY(EnumSet.range(ProtocolVersion.MINECRAFT_1_7_2, ProtocolVersion.MINECRAFT_1_12_2)),
+    MINECRAFT_1_13(ProtocolVersion.MINECRAFT_1_13),
+    MINECRAFT_1_13_2(ProtocolVersion.MINECRAFT_1_13_1, ProtocolVersion.MINECRAFT_1_13_2),
+    MINECRAFT_1_14(EnumSet.range(ProtocolVersion.MINECRAFT_1_14, ProtocolVersion.MINECRAFT_1_14_4)),
+    MINECRAFT_1_15(EnumSet.range(ProtocolVersion.MINECRAFT_1_15, ProtocolVersion.MINECRAFT_1_15_2)),
+    MINECRAFT_1_16(ProtocolVersion.MINECRAFT_1_16, ProtocolVersion.MINECRAFT_1_16_1),
+    MINECRAFT_1_16_2(EnumSet.range(ProtocolVersion.MINECRAFT_1_16_2, ProtocolVersion.MINECRAFT_1_16_4)),
+    MINECRAFT_1_17(EnumSet.range(ProtocolVersion.MINECRAFT_1_17, ProtocolVersion.MINECRAFT_1_17_1));
+
+    private static final EnumMap<ProtocolVersion, Version> mcVersionToItemVersions = new EnumMap<>(
+        ProtocolVersion.class);
+
+    public static Version parse(String from) {
+      switch (from) {
+        case "1.13":
+          return MINECRAFT_1_13;
+        case "1.13.2":
+          return MINECRAFT_1_13_2;
+        case "1.14":
+          return MINECRAFT_1_14;
+        case "1.15":
+          return MINECRAFT_1_15;
+        case "1.16":
+          return MINECRAFT_1_16;
+        case "1.16.2":
+          return MINECRAFT_1_16_2;
+        case "1.17":
+          return MINECRAFT_1_17;
+        default:
+          return LEGACY;
+      }
+    }
+
+    static {
+      for (Version version : Version.values()) {
+        for (ProtocolVersion protocolVersion : version.getVersions()) {
+          mcVersionToItemVersions.put(protocolVersion, version);
+        }
+      }
+    }
+
+    private final Set<ProtocolVersion> versions;
+
+    Version(ProtocolVersion... versions) {
+      this.versions = EnumSet.copyOf(Arrays.asList(versions));
+    }
+
+    Version(Set<ProtocolVersion> versions) {
+      this.versions = versions;
+    }
+
+    public Set<ProtocolVersion> getVersions() {
+      return versions;
+    }
+
+    public static Version map(ProtocolVersion protocolVersion) {
+      return mcVersionToItemVersions.get(protocolVersion);
+    }
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/VirtualWorld.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleWorld.java
similarity index 72%
rename from proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/VirtualWorld.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleWorld.java
index 008561e8..5e6f75c1 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/VirtualWorld.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleWorld.java
@@ -20,8 +20,6 @@
 package net.elytrium.elytraproxy.virtual.server.world;
 
 import com.google.common.collect.ImmutableList;
-import com.velocitypowered.proxy.connection.registry.DimensionData;
-import com.velocitypowered.proxy.connection.registry.DimensionInfo;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.HashMap;
 import java.util.List;
@@ -30,47 +28,66 @@ import java.util.function.Function;
 import java.util.function.Supplier;
 import lombok.Getter;
 import lombok.NonNull;
-import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.api.virtual.chunk.Dimension;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBiome;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBlock;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualChunk;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualWorld;
+import net.elytrium.elytraproxy.virtual.material.Biome;
 import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-public class VirtualWorld {
+public class SimpleWorld implements VirtualWorld {
 
   @NonNull
   @Getter
-  private final DimensionData dimension;
-  @NonNull
-  @Getter
-  private final DimensionInfo dimensionInfo;
+  private final Dimension dimension;
   private final Map<Long, SimpleChunk> chunks = new HashMap<>();
 
-  public VirtualWorld(@NonNull DimensionData dimension, @NonNull DimensionInfo dimensionInfo, int x, int z) {
+  @Getter
+  private final double spawnX;
+  @Getter
+  private final double spawnY;
+  @Getter
+  private final double spawnZ;
+  @Getter
+  private final float yaw;
+  @Getter
+  private final float pitch;
+
+  public SimpleWorld(@NonNull Dimension dimension, double x, double y, double z, float yaw, float pitch) {
     this.dimension = dimension;
-    this.dimensionInfo = dimensionInfo;
-    getChunkOrNew(x, z);
+
+    this.spawnX = x;
+    this.spawnY = y;
+    this.spawnZ = z;
+    this.yaw = yaw;
+    this.pitch = pitch;
+
+    getChunkOrNew((int) x, (int) z);
   }
 
-  public void setBlock(int x, int y, int z, @Nullable SimpleBlock block) {
+  public void setBlock(int x, int y, int z, @Nullable VirtualBlock block) {
     getChunkOrNew(x, z).setBlock(getChunkCoordinate(x), y, getChunkCoordinate(z), block);
   }
 
   @SuppressFBWarnings("NP_NONNULL_RETURN_VIOLATION")
   @NotNull
-  public SimpleBlock getBlock(int x, int y, int z) {
+  public VirtualBlock getBlock(int x, int y, int z) {
     return chunkAction(x, z, (c) -> c.getBlock(getChunkCoordinate(x), y, getChunkCoordinate(z)),
         () -> SimpleBlock.AIR);
   }
 
-  public void setBiome2d(int x, int z, @NonNull Biome biome) {
+  public void setBiome2d(int x, int z, @NonNull VirtualBiome biome) {
     getChunkOrNew(x, z).setBiome2d(getChunkCoordinate(x), getChunkCoordinate(z), biome);
   }
 
-  public void setBiome3d(int x, int y, int z, @NonNull Biome biome) {
+  public void setBiome3d(int x, int y, int z, @NonNull VirtualBiome biome) {
     getChunkOrNew(x, z).setBiome3d(getChunkCoordinate(x), y, getChunkCoordinate(z), biome);
   }
 
-  public Biome getBiome(int x, int y, int z) {
+  public VirtualBiome getBiome(int x, int y, int z) {
     return chunkAction(x, z, (c) -> c.getBiome(x, y, z), () -> Biome.PLAINS);
   }
 
@@ -83,7 +100,7 @@ public class VirtualWorld {
     getChunkOrNew(x, z).setBlockLight(getChunkCoordinate(x), y, getChunkCoordinate(z), light);
   }
 
-  public List<SimpleChunk> getChunks() {
+  public List<VirtualChunk> getChunks() {
     return ImmutableList.copyOf(chunks.values());
   }
 
@@ -116,7 +133,7 @@ public class VirtualWorld {
   }
 
   private static int getChunkXZ(int xz) {
-    return Math.floorDiv(xz, 16);
+    return xz >> 4;
   }
 
   private static int getChunkCoordinate(int xz) {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleChunk.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleChunk.java
index db6a8cca..4ab8674f 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleChunk.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleChunk.java
@@ -25,13 +25,18 @@ import java.util.function.Function;
 import java.util.function.Supplier;
 import lombok.Getter;
 import lombok.NonNull;
-import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBiome;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBlock;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualChunk;
+import net.elytrium.elytraproxy.api.virtual.chunk.data.ChunkSnapshot;
+import net.elytrium.elytraproxy.api.virtual.chunk.data.LightSection;
+import net.elytrium.elytraproxy.virtual.material.Biome;
 import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 @SuppressFBWarnings("NP_NONNULL_RETURN_VIOLATION")
-public class SimpleChunk {
+public class SimpleChunk implements VirtualChunk {
 
   public static final int MAX_BLOCKS_PER_SECTION = 16 * 16 * 16;
 
@@ -41,7 +46,7 @@ public class SimpleChunk {
   private final int z;
   private final SimpleSection[] sections = new SimpleSection[16];
   private final LightSection[] light = new LightSection[18];
-  private final Biome[] biomes = new Biome[1024];
+  private final VirtualBiome[] biomes = new VirtualBiome[1024];
 
   public SimpleChunk(int x, int z) {
     this.x = x;
@@ -50,30 +55,30 @@ public class SimpleChunk {
     //Arrays.fill(light, LightSection.DEFAULT);
   }
 
-  public void setBlock(int x, int y, int z, @Nullable SimpleBlock block) {
+  public void setBlock(int x, int y, int z, @Nullable VirtualBlock block) {
     SimpleSection section = getSection(y);
     section.setBlockAt(x, y % 16, z, block);
   }
 
   @NotNull
-  public SimpleBlock getBlock(int x, int y, int z) {
+  public VirtualBlock getBlock(int x, int y, int z) {
     return sectionAction(y, (s) -> s.getBlockAt(x, y % 16, z), () -> SimpleBlock.AIR);
   }
 
   @NotNull
-  public Biome getBiome(int x, int y, int z) {
+  public VirtualBiome getBiome(int x, int y, int z) {
     return biomes[getBiomeIndex(x, y, z)];
   }
 
 
-  public void setBiome2d(int x, int z, @NonNull Biome biome) {
+  public void setBiome2d(int x, int z, @NonNull VirtualBiome biome) {
     for (int y = 0; y < 256; y += 4) {
       setBiome3d(x, y, z, biome);
     }
   }
 
 
-  public void setBiome3d(int x, int y, int z, @NonNull Biome biome) {
+  public void setBiome3d(int x, int y, int z, @NonNull VirtualBiome biome) {
     this.biomes[getBiomeIndex(x, y, z)] = biome;
   }
 
@@ -111,12 +116,12 @@ public class SimpleChunk {
     LightSection[] lightSnapshot = new LightSection[18];
     for (int i = 0; i < light.length; i++) {
       if (light[i] == null) {
-        lightSnapshot[i] = LightSection.DEFAULT;
+        lightSnapshot[i] = SimpleLightSection.DEFAULT;
       } else if (light[i].getLastUpdate() > previousUpdate) {
         lightSnapshot[i] = light[i].copy();
       }
     }
-    return new ChunkSnapshot(x, z, full, sectionsSnapshot, lightSnapshot,
+    return new SimpleChunkSnapshot(x, z, full, sectionsSnapshot, lightSnapshot,
         Arrays.copyOf(biomes, biomes.length));
   }
 
@@ -141,9 +146,9 @@ public class SimpleChunk {
     int index = y < 0 ? 0 : getSectionIndex(y) + 1;
     LightSection result = light[index];
     if (create && result == null) {
-      light[index] = result = new LightSection();
+      light[index] = result = new SimpleLightSection();
     }
-    return result == null ? LightSection.DEFAULT : result;
+    return result == null ? SimpleLightSection.DEFAULT : result;
   }
 
   private static int getSectionIndex(int y) {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/ChunkSnapshot.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleChunkSnapshot.java
similarity index 76%
rename from proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/ChunkSnapshot.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleChunkSnapshot.java
index 9c2c3ca4..052150f1 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/ChunkSnapshot.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleChunkSnapshot.java
@@ -21,21 +21,24 @@ package net.elytrium.elytraproxy.virtual.server.world.chunk;
 
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBiome;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBlock;
+import net.elytrium.elytraproxy.api.virtual.chunk.data.ChunkSnapshot;
+import net.elytrium.elytraproxy.api.virtual.chunk.data.LightSection;
 import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
 
 @RequiredArgsConstructor
 @Getter
-public class ChunkSnapshot {
+public class SimpleChunkSnapshot implements ChunkSnapshot {
 
   private final int x;
   private final int z;
   private final boolean fullChunk;
   private final SimpleSection[] sections;
   private final LightSection[] light;
-  private final Biome[] biomes;
+  private final VirtualBiome[] biomes;
 
-  public SimpleBlock getBlock(int x, int y, int z) {
+  public VirtualBlock getBlock(int x, int y, int z) {
     SimpleSection section = sections[y / 16];
     return section == null ? SimpleBlock.AIR : section.getBlockAt(x, y % 16, z);
   }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/LightSection.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleLightSection.java
similarity index 89%
rename from proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/LightSection.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleLightSection.java
index 7c899885..53b78dcc 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/LightSection.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleLightSection.java
@@ -24,15 +24,16 @@ import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
-import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.NibbleArray3d;
+import net.elytrium.elytraproxy.api.virtual.chunk.data.LightSection;
+import net.elytrium.elytraproxy.api.virtual.mcprotocollib.NibbleArray3d;
 
 @AllArgsConstructor(access = AccessLevel.PRIVATE)
 @NoArgsConstructor
-public class LightSection {
+public class SimpleLightSection implements LightSection {
 
   public static NibbleArray3d NO_LIGHT = new NibbleArray3d(SimpleChunk.MAX_BLOCKS_PER_SECTION);
   public static NibbleArray3d ALL_LIGHT = new NibbleArray3d(SimpleChunk.MAX_BLOCKS_PER_SECTION, 15);
-  public static final LightSection DEFAULT = new LightSection();
+  public static final LightSection DEFAULT = new SimpleLightSection();
 
   @Getter
   private NibbleArray3d blockLight = NO_LIGHT;
@@ -81,9 +82,9 @@ public class LightSection {
     return i >= 0 && i <= 15;
   }
 
-  public LightSection copy() {
+  public SimpleLightSection copy() {
     NibbleArray3d skyLight = this.skyLight == ALL_LIGHT ? ALL_LIGHT : this.skyLight.copy();
     NibbleArray3d blockLight = this.blockLight == NO_LIGHT ? NO_LIGHT : this.blockLight.copy();
-    return new LightSection(blockLight, skyLight, lastUpdate);
+    return new SimpleLightSection(blockLight, skyLight, lastUpdate);
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleSection.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleSection.java
index c4fbdf79..fdf98bbb 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleSection.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleSection.java
@@ -24,14 +24,16 @@ import com.velocitypowered.api.network.ProtocolVersion;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.virtual.protocol.data.storage.BlockStorage;
-import net.elytrium.elytraproxy.virtual.protocol.data.storage.BlockStorage19;
+import net.elytrium.elytraproxy.api.virtual.chunk.VirtualBlock;
+import net.elytrium.elytraproxy.api.virtual.chunk.data.BlockSection;
+import net.elytrium.elytraproxy.virtual.protocol.data.BlockStorage;
+import net.elytrium.elytraproxy.virtual.protocol.data.BlockStorage19;
 import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
 import org.jetbrains.annotations.Nullable;
 
 @RequiredArgsConstructor
 @AllArgsConstructor()
-public class SimpleSection {
+public class SimpleSection implements BlockSection {
 
   private final BlockStorage blocks;
   @Getter
@@ -41,12 +43,12 @@ public class SimpleSection {
     this(new BlockStorage19(ProtocolVersion.MINECRAFT_1_17));
   }
 
-  public SimpleBlock getBlockAt(int x, int y, int z) {
+  public VirtualBlock getBlockAt(int x, int y, int z) {
     checkIndexes(x, y, z);
     return blocks.get(x, y, z);
   }
 
-  public void setBlockAt(int x, int y, int z, @Nullable SimpleBlock block) {
+  public void setBlockAt(int x, int y, int z, @Nullable VirtualBlock block) {
     checkIndexes(x, y, z);
     blocks.set(x, y, z, block == null ? SimpleBlock.AIR : block);
     lastUpdate = System.nanoTime();
diff --git a/proxy/src/main/resources/net/elytrium/elytraproxy/virtual/ids.json b/proxy/src/main/resources/net/elytrium/elytraproxy/virtual/blocks.json
similarity index 100%
rename from proxy/src/main/resources/net/elytrium/elytraproxy/virtual/ids.json
rename to proxy/src/main/resources/net/elytrium/elytraproxy/virtual/blocks.json
diff --git a/proxy/src/main/resources/net/elytrium/elytraproxy/virtual/items.json b/proxy/src/main/resources/net/elytrium/elytraproxy/virtual/items.json
new file mode 100644
index 00000000..a3c7ec5e
--- /dev/null
+++ b/proxy/src/main/resources/net/elytrium/elytraproxy/virtual/items.json
@@ -0,0 +1,3363 @@
+{
+  "0": {
+    "legacy": "0",
+    "1.12": "0",
+    "1.13": "0",
+    "1.13.2": "0",
+    "1.14": "0",
+    "1.15": "0",
+    "1.16": "0",
+    "1.16.2": "0",
+    "1.17": "0"
+  },
+  "1": {
+    "legacy": "1",
+    "1.13": "1",
+    "1.13.2": "1",
+    "1.14": "1",
+    "1.15": "1",
+    "1.16": "1",
+    "1.16.2": "1",
+    "1.17": "1"
+  },
+  "2": {
+    "legacy": "2",
+    "1.13": "76",
+    "1.13.2": "76",
+    "1.14": "76",
+    "1.15": "76",
+    "1.16": "89",
+    "1.16.2": "89",
+    "1.17": "150"
+  },
+  "3": {
+    "legacy": "3",
+    "1.13": "9",
+    "1.13.2": "9",
+    "1.14": "9",
+    "1.15": "9",
+    "1.16": "9",
+    "1.16.2": "9",
+    "1.17": "15"
+  },
+  "4": {
+    "legacy": "4",
+    "1.13": "12",
+    "1.13.2": "12",
+    "1.14": "12",
+    "1.15": "12",
+    "1.16": "14",
+    "1.16.2": "14",
+    "1.17": "21"
+  },
+  "5": {
+    "legacy": "5",
+    "1.13": "13",
+    "1.13.2": "13",
+    "1.14": "13",
+    "1.15": "13",
+    "1.16": "15",
+    "1.16.2": "15",
+    "1.17": "22"
+  },
+  "6": {
+    "legacy": "6",
+    "1.13": "19",
+    "1.13.2": "19",
+    "1.14": "19",
+    "1.15": "19",
+    "1.16": "23",
+    "1.16.2": "23",
+    "1.17": "30"
+  },
+  "7": {
+    "legacy": "7",
+    "1.13": "25",
+    "1.13.2": "25",
+    "1.14": "25",
+    "1.15": "25",
+    "1.16": "29",
+    "1.16.2": "29",
+    "1.17": "36"
+  },
+  "12": {
+    "legacy": "12",
+    "1.13": "26",
+    "1.13.2": "26",
+    "1.14": "26",
+    "1.15": "26",
+    "1.16": "30",
+    "1.16.2": "30",
+    "1.17": "37"
+  },
+  "13": {
+    "legacy": "13",
+    "1.13": "28",
+    "1.13.2": "28",
+    "1.14": "28",
+    "1.15": "28",
+    "1.16": "32",
+    "1.16.2": "32",
+    "1.17": "39"
+  },
+  "14": {
+    "legacy": "14",
+    "1.13": "29",
+    "1.13.2": "29",
+    "1.14": "29",
+    "1.15": "29",
+    "1.16": "33",
+    "1.16.2": "33",
+    "1.17": "46"
+  },
+  "15": {
+    "legacy": "15",
+    "1.13": "30",
+    "1.13.2": "30",
+    "1.14": "30",
+    "1.15": "30",
+    "1.16": "34",
+    "1.16.2": "34",
+    "1.17": "42"
+  },
+  "16": {
+    "legacy": "16",
+    "1.13": "31",
+    "1.13.2": "31",
+    "1.14": "31",
+    "1.15": "31",
+    "1.16": "35",
+    "1.16.2": "35",
+    "1.17": "40"
+  },
+  "17": {
+    "legacy": "17",
+    "1.13": "32",
+    "1.13.2": "32",
+    "1.14": "32",
+    "1.15": "32",
+    "1.16": "37",
+    "1.16.2": "37",
+    "1.17": "101"
+  },
+  "18": {
+    "legacy": "18",
+    "1.13": "56",
+    "1.13.2": "56",
+    "1.14": "56",
+    "1.15": "56",
+    "1.16": "69",
+    "1.16.2": "69",
+    "1.17": "133"
+  },
+  "19": {
+    "legacy": "19",
+    "1.13": "62",
+    "1.13.2": "62",
+    "1.14": "62",
+    "1.15": "62",
+    "1.16": "75",
+    "1.16.2": "75",
+    "1.17": "141"
+  },
+  "20": {
+    "legacy": "20",
+    "1.13": "64",
+    "1.13.2": "64",
+    "1.14": "64",
+    "1.15": "64",
+    "1.16": "77",
+    "1.16.2": "77",
+    "1.17": "143"
+  },
+  "21": {
+    "legacy": "21",
+    "1.13": "65",
+    "1.13.2": "65",
+    "1.14": "65",
+    "1.15": "65",
+    "1.16": "78",
+    "1.16.2": "78",
+    "1.17": "52"
+  },
+  "22": {
+    "legacy": "22",
+    "1.13": "66",
+    "1.13.2": "66",
+    "1.14": "66",
+    "1.15": "66",
+    "1.16": "79",
+    "1.16.2": "79",
+    "1.17": "145"
+  },
+  "23": {
+    "legacy": "23",
+    "1.13": "67",
+    "1.13.2": "67",
+    "1.14": "67",
+    "1.15": "67",
+    "1.16": "80",
+    "1.16.2": "80",
+    "1.17": "596"
+  },
+  "24": {
+    "legacy": "24",
+    "1.13": "68",
+    "1.13.2": "68",
+    "1.14": "68",
+    "1.15": "68",
+    "1.16": "81",
+    "1.16.2": "81",
+    "1.17": "146"
+  },
+  "25": {
+    "legacy": "25",
+    "1.13": "71",
+    "1.13.2": "71",
+    "1.14": "71",
+    "1.15": "71",
+    "1.16": "84",
+    "1.16.2": "84",
+    "1.17": "608"
+  },
+  "27": {
+    "legacy": "27",
+    "1.13": "72",
+    "1.13.2": "72",
+    "1.14": "72",
+    "1.15": "72",
+    "1.16": "85",
+    "1.16.2": "85",
+    "1.17": "657"
+  },
+  "28": {
+    "legacy": "28",
+    "1.13": "73",
+    "1.13.2": "73",
+    "1.14": "73",
+    "1.15": "73",
+    "1.16": "86",
+    "1.16.2": "86",
+    "1.17": "658"
+  },
+  "29": {
+    "legacy": "29",
+    "1.13": "74",
+    "1.13.2": "74",
+    "1.14": "74",
+    "1.15": "74",
+    "1.16": "87",
+    "1.16.2": "87",
+    "1.17": "591"
+  },
+  "30": {
+    "legacy": "30",
+    "1.13": "75",
+    "1.13.2": "75",
+    "1.14": "75",
+    "1.15": "75",
+    "1.16": "88",
+    "1.16.2": "88",
+    "1.17": "149"
+  },
+  "31": {
+    "legacy": "31",
+    "1.13": "309",
+    "1.13.2": "309",
+    "1.14": "327",
+    "1.15": "327",
+    "1.16": "377",
+    "1.16.2": "377",
+    "1.17": "398"
+  },
+  "32": {
+    "legacy": "32",
+    "1.13": "78",
+    "1.13.2": "78",
+    "1.14": "78",
+    "1.15": "78",
+    "1.16": "91",
+    "1.16.2": "91",
+    "1.17": "154"
+  },
+  "33": {
+    "legacy": "33",
+    "1.13": "81",
+    "1.13.2": "81",
+    "1.14": "81",
+    "1.15": "81",
+    "1.16": "94",
+    "1.16.2": "94",
+    "1.17": "590"
+  },
+  "35": {
+    "legacy": "35",
+    "1.13": "82",
+    "1.13.2": "82",
+    "1.14": "82",
+    "1.15": "82",
+    "1.16": "95",
+    "1.16.2": "95",
+    "1.17": "157"
+  },
+  "37": {
+    "legacy": "37",
+    "1.13": "98",
+    "1.13.2": "98",
+    "1.14": "98",
+    "1.15": "98",
+    "1.16": "111",
+    "1.16.2": "111",
+    "1.17": "173"
+  },
+  "38": {
+    "legacy": "38",
+    "1.13": "99",
+    "1.13.2": "99",
+    "1.14": "99",
+    "1.15": "99",
+    "1.16": "112",
+    "1.16.2": "112",
+    "1.17": "174"
+  },
+  "39": {
+    "legacy": "39",
+    "1.13": "108",
+    "1.13.2": "108",
+    "1.14": "111",
+    "1.15": "111",
+    "1.16": "124",
+    "1.16.2": "124",
+    "1.17": "187"
+  },
+  "40": {
+    "legacy": "40",
+    "1.13": "109",
+    "1.13.2": "109",
+    "1.14": "112",
+    "1.15": "112",
+    "1.16": "125",
+    "1.16.2": "125",
+    "1.17": "188"
+  },
+  "41": {
+    "legacy": "41",
+    "1.13": "110",
+    "1.13.2": "110",
+    "1.14": "113",
+    "1.15": "113",
+    "1.16": "136",
+    "1.16.2": "136",
+    "1.17": "67"
+  },
+  "42": {
+    "legacy": "42",
+    "1.13": "111",
+    "1.13.2": "111",
+    "1.14": "114",
+    "1.15": "114",
+    "1.16": "137",
+    "1.16.2": "137",
+    "1.17": "65"
+  },
+  "44": {
+    "legacy": "44",
+    "1.13": "118",
+    "1.13.2": "121",
+    "1.14": "121",
+    "1.15": "121",
+    "1.16": "146",
+    "1.16.2": "146",
+    "1.17": "212"
+  },
+  "45": {
+    "legacy": "45",
+    "1.13": "135",
+    "1.13.2": "135",
+    "1.14": "141",
+    "1.15": "141",
+    "1.16": "166",
+    "1.16.2": "166",
+    "1.17": "232"
+  },
+  "46": {
+    "legacy": "46",
+    "1.13": "136",
+    "1.13.2": "136",
+    "1.14": "142",
+    "1.15": "142",
+    "1.16": "167",
+    "1.16.2": "167",
+    "1.17": "606"
+  },
+  "47": {
+    "legacy": "47",
+    "1.13": "137",
+    "1.13.2": "137",
+    "1.14": "143",
+    "1.15": "143",
+    "1.16": "168",
+    "1.16.2": "168",
+    "1.17": "233"
+  },
+  "48": {
+    "legacy": "48",
+    "1.13": "138",
+    "1.13.2": "138",
+    "1.14": "144",
+    "1.15": "144",
+    "1.16": "169",
+    "1.16.2": "169",
+    "1.17": "234"
+  },
+  "49": {
+    "legacy": "49",
+    "1.13": "139",
+    "1.13.2": "139",
+    "1.14": "145",
+    "1.15": "145",
+    "1.16": "170",
+    "1.16.2": "170",
+    "1.17": "235"
+  },
+  "50": {
+    "legacy": "50",
+    "1.13": "140",
+    "1.13.2": "140",
+    "1.14": "146",
+    "1.15": "146",
+    "1.16": "171",
+    "1.16.2": "171",
+    "1.17": "236"
+  },
+  "52": {
+    "legacy": "52",
+    "1.13": "147",
+    "1.13.2": "147",
+    "1.14": "153",
+    "1.15": "153",
+    "1.16": "178",
+    "1.16.2": "178",
+    "1.17": "243"
+  },
+  "53": {
+    "legacy": "53",
+    "1.13": "148",
+    "1.13.2": "148",
+    "1.14": "154",
+    "1.15": "154",
+    "1.16": "179",
+    "1.16.2": "179",
+    "1.17": "244"
+  },
+  "54": {
+    "legacy": "54",
+    "1.13": "149",
+    "1.13.2": "149",
+    "1.14": "155",
+    "1.15": "155",
+    "1.16": "180",
+    "1.16.2": "180",
+    "1.17": "245"
+  },
+  "56": {
+    "legacy": "56",
+    "1.13": "150",
+    "1.13.2": "150",
+    "1.14": "156",
+    "1.15": "156",
+    "1.16": "181",
+    "1.16.2": "181",
+    "1.17": "54"
+  },
+  "57": {
+    "legacy": "57",
+    "1.13": "151",
+    "1.13.2": "151",
+    "1.14": "157",
+    "1.15": "157",
+    "1.16": "182",
+    "1.16.2": "182",
+    "1.17": "68"
+  },
+  "58": {
+    "legacy": "58",
+    "1.13": "152",
+    "1.13.2": "152",
+    "1.14": "158",
+    "1.15": "158",
+    "1.16": "183",
+    "1.16.2": "183",
+    "1.17": "246"
+  },
+  "60": {
+    "legacy": "60",
+    "1.13": "153",
+    "1.13.2": "153",
+    "1.14": "159",
+    "1.15": "159",
+    "1.16": "184",
+    "1.16.2": "184",
+    "1.17": "247"
+  },
+  "61": {
+    "legacy": "61",
+    "1.13": "154",
+    "1.13.2": "154",
+    "1.14": "160",
+    "1.15": "160",
+    "1.16": "185",
+    "1.16.2": "185",
+    "1.17": "248"
+  },
+  "65": {
+    "legacy": "65",
+    "1.13": "155",
+    "1.13.2": "155",
+    "1.14": "161",
+    "1.15": "161",
+    "1.16": "186",
+    "1.16.2": "186",
+    "1.17": "249"
+  },
+  "66": {
+    "legacy": "66",
+    "1.13": "156",
+    "1.13.2": "156",
+    "1.14": "162",
+    "1.15": "162",
+    "1.16": "187",
+    "1.16.2": "187",
+    "1.17": "659"
+  },
+  "67": {
+    "legacy": "67",
+    "1.13": "157",
+    "1.13.2": "157",
+    "1.14": "484",
+    "1.15": "484",
+    "1.16": "535",
+    "1.16.2": "535",
+    "1.17": "555"
+  },
+  "69": {
+    "legacy": "69",
+    "1.13": "158",
+    "1.13.2": "158",
+    "1.14": "164",
+    "1.15": "164",
+    "1.16": "189",
+    "1.16.2": "189",
+    "1.17": "600"
+  },
+  "70": {
+    "legacy": "70",
+    "1.13": "159",
+    "1.13.2": "159",
+    "1.14": "165",
+    "1.15": "165",
+    "1.16": "190",
+    "1.16.2": "190",
+    "1.17": "619"
+  },
+  "72": {
+    "legacy": "72",
+    "1.13": "160",
+    "1.13.2": "160",
+    "1.14": "166",
+    "1.15": "166",
+    "1.16": "191",
+    "1.16.2": "191",
+    "1.17": "623"
+  },
+  "73": {
+    "legacy": "73",
+    "1.13": "166",
+    "1.13.2": "166",
+    "1.14": "172",
+    "1.15": "172",
+    "1.16": "200",
+    "1.16.2": "200",
+    "1.17": "48"
+  },
+  "76": {
+    "legacy": "76",
+    "1.13": "167",
+    "1.13.2": "167",
+    "1.14": "173",
+    "1.15": "173",
+    "1.16": "201",
+    "1.16.2": "201",
+    "1.17": "586"
+  },
+  "77": {
+    "legacy": "77",
+    "1.13": "168",
+    "1.13.2": "168",
+    "1.14": "174",
+    "1.15": "174",
+    "1.16": "304",
+    "1.16.2": "304",
+    "1.17": "609"
+  },
+  "78": {
+    "legacy": "78",
+    "1.13": "171",
+    "1.13.2": "171",
+    "1.14": "177",
+    "1.15": "177",
+    "1.16": "204",
+    "1.16.2": "204",
+    "1.17": "253"
+  },
+  "79": {
+    "legacy": "79",
+    "1.13": "170",
+    "1.13.2": "170",
+    "1.14": "176",
+    "1.15": "176",
+    "1.16": "203",
+    "1.16.2": "203",
+    "1.17": "252"
+  },
+  "80": {
+    "legacy": "80",
+    "1.13": "169",
+    "1.13.2": "169",
+    "1.14": "175",
+    "1.15": "175",
+    "1.16": "202",
+    "1.16.2": "202",
+    "1.17": "251"
+  },
+  "81": {
+    "legacy": "81",
+    "1.13": "172",
+    "1.13.2": "172",
+    "1.14": "178",
+    "1.15": "178",
+    "1.16": "205",
+    "1.16.2": "205",
+    "1.17": "254"
+  },
+  "82": {
+    "legacy": "82",
+    "1.13": "173",
+    "1.13.2": "173",
+    "1.14": "179",
+    "1.15": "179",
+    "1.16": "206",
+    "1.16.2": "206",
+    "1.17": "255"
+  },
+  "84": {
+    "legacy": "84",
+    "1.13": "174",
+    "1.13.2": "174",
+    "1.14": "180",
+    "1.15": "180",
+    "1.16": "207",
+    "1.16.2": "207",
+    "1.17": "256"
+  },
+  "85": {
+    "legacy": "85",
+    "1.13": "175",
+    "1.13.2": "175",
+    "1.14": "181",
+    "1.15": "181",
+    "1.16": "208",
+    "1.16.2": "208",
+    "1.17": "257"
+  },
+  "86": {
+    "legacy": "86",
+    "1.13": "181",
+    "1.13.2": "181",
+    "1.14": "187",
+    "1.15": "187",
+    "1.16": "216",
+    "1.16.2": "216",
+    "1.17": "265"
+  },
+  "87": {
+    "legacy": "87",
+    "1.13": "183",
+    "1.13.2": "183",
+    "1.14": "189",
+    "1.15": "189",
+    "1.16": "218",
+    "1.16.2": "218",
+    "1.17": "268"
+  },
+  "88": {
+    "legacy": "88",
+    "1.13": "184",
+    "1.13.2": "184",
+    "1.14": "190",
+    "1.15": "190",
+    "1.16": "219",
+    "1.16.2": "219",
+    "1.17": "269"
+  },
+  "89": {
+    "legacy": "89",
+    "1.13": "185",
+    "1.13.2": "185",
+    "1.14": "191",
+    "1.15": "191",
+    "1.16": "224",
+    "1.16.2": "224",
+    "1.17": "275"
+  },
+  "91": {
+    "legacy": "91",
+    "1.13": "186",
+    "1.13.2": "186",
+    "1.14": "192",
+    "1.15": "192",
+    "1.16": "225",
+    "1.16.2": "225",
+    "1.17": "267"
+  },
+  "95": {
+    "legacy": "95",
+    "1.13": "311",
+    "1.13.2": "311",
+    "1.14": "329",
+    "1.15": "329",
+    "1.16": "379",
+    "1.16.2": "379",
+    "1.17": "400"
+  },
+  "96": {
+    "legacy": "96",
+    "1.13": "187",
+    "1.13.2": "187",
+    "1.14": "193",
+    "1.15": "193",
+    "1.16": "226",
+    "1.16.2": "226",
+    "1.17": "641"
+  },
+  "98": {
+    "legacy": "98",
+    "1.13": "199",
+    "1.13.2": "199",
+    "1.14": "205",
+    "1.15": "205",
+    "1.16": "240",
+    "1.16.2": "240",
+    "1.17": "283"
+  },
+  "99": {
+    "legacy": "99",
+    "1.13": "203",
+    "1.13.2": "203",
+    "1.14": "209",
+    "1.15": "209",
+    "1.16": "244",
+    "1.16.2": "244",
+    "1.17": "292"
+  },
+  "100": {
+    "legacy": "100",
+    "1.13": "204",
+    "1.13.2": "204",
+    "1.14": "210",
+    "1.15": "210",
+    "1.16": "245",
+    "1.16.2": "245",
+    "1.17": "293"
+  },
+  "101": {
+    "legacy": "101",
+    "1.13": "206",
+    "1.13.2": "206",
+    "1.14": "212",
+    "1.15": "212",
+    "1.16": "247",
+    "1.16.2": "247",
+    "1.17": "295"
+  },
+  "102": {
+    "legacy": "102",
+    "1.13": "207",
+    "1.13.2": "207",
+    "1.14": "213",
+    "1.15": "213",
+    "1.16": "249",
+    "1.16.2": "249",
+    "1.17": "297"
+  },
+  "103": {
+    "legacy": "103",
+    "1.13": "208",
+    "1.13.2": "208",
+    "1.14": "214",
+    "1.15": "214",
+    "1.16": "250",
+    "1.16.2": "250",
+    "1.17": "298"
+  },
+  "106": {
+    "legacy": "106",
+    "1.13": "209",
+    "1.13.2": "209",
+    "1.14": "215",
+    "1.15": "215",
+    "1.16": "251",
+    "1.16.2": "251",
+    "1.17": "299"
+  },
+  "107": {
+    "legacy": "107",
+    "1.13": "210",
+    "1.13.2": "210",
+    "1.14": "216",
+    "1.15": "216",
+    "1.16": "252",
+    "1.16.2": "252",
+    "1.17": "649"
+  },
+  "108": {
+    "legacy": "108",
+    "1.13": "216",
+    "1.13.2": "216",
+    "1.14": "222",
+    "1.15": "222",
+    "1.16": "260",
+    "1.16.2": "260",
+    "1.17": "301"
+  },
+  "109": {
+    "legacy": "109",
+    "1.13": "217",
+    "1.13.2": "217",
+    "1.14": "223",
+    "1.15": "223",
+    "1.16": "261",
+    "1.16.2": "261",
+    "1.17": "302"
+  },
+  "110": {
+    "legacy": "110",
+    "1.13": "218",
+    "1.13.2": "218",
+    "1.14": "224",
+    "1.15": "224",
+    "1.16": "262",
+    "1.16.2": "262",
+    "1.17": "303"
+  },
+  "111": {
+    "legacy": "111",
+    "1.13": "219",
+    "1.13.2": "219",
+    "1.14": "225",
+    "1.15": "225",
+    "1.16": "263",
+    "1.16.2": "263",
+    "1.17": "304"
+  },
+  "112": {
+    "legacy": "112",
+    "1.13": "710",
+    "1.13.2": "715",
+    "1.14": "780",
+    "1.15": "781",
+    "1.16": "848",
+    "1.16.2": "849",
+    "1.17": "964"
+  },
+  "113": {
+    "legacy": "113",
+    "1.13": "221",
+    "1.13.2": "221",
+    "1.14": "227",
+    "1.15": "227",
+    "1.16": "267",
+    "1.16.2": "267",
+    "1.17": "308"
+  },
+  "114": {
+    "legacy": "114",
+    "1.13": "222",
+    "1.13.2": "222",
+    "1.14": "228",
+    "1.15": "228",
+    "1.16": "268",
+    "1.16.2": "268",
+    "1.17": "309"
+  },
+  "116": {
+    "legacy": "116",
+    "1.13": "223",
+    "1.13.2": "223",
+    "1.14": "229",
+    "1.15": "229",
+    "1.16": "269",
+    "1.16.2": "269",
+    "1.17": "310"
+  },
+  "120": {
+    "legacy": "120",
+    "1.13": "224",
+    "1.13.2": "224",
+    "1.14": "230",
+    "1.15": "230",
+    "1.16": "270",
+    "1.16.2": "270",
+    "1.17": "311"
+  },
+  "121": {
+    "legacy": "121",
+    "1.13": "225",
+    "1.13.2": "225",
+    "1.14": "231",
+    "1.15": "231",
+    "1.16": "271",
+    "1.16.2": "271",
+    "1.17": "312"
+  },
+  "122": {
+    "legacy": "122",
+    "1.13": "227",
+    "1.13.2": "227",
+    "1.14": "233",
+    "1.15": "233",
+    "1.16": "273",
+    "1.16.2": "273",
+    "1.17": "314"
+  },
+  "123": {
+    "legacy": "123",
+    "1.13": "228",
+    "1.13.2": "228",
+    "1.14": "234",
+    "1.15": "234",
+    "1.16": "274",
+    "1.16.2": "274",
+    "1.17": "607"
+  },
+  "126": {
+    "legacy": "126",
+    "1.13": "112",
+    "1.13.2": "112",
+    "1.14": "115",
+    "1.15": "115",
+    "1.16": "138",
+    "1.16.2": "138",
+    "1.17": "204"
+  },
+  "128": {
+    "legacy": "128",
+    "1.13": "229",
+    "1.13.2": "229",
+    "1.14": "235",
+    "1.15": "235",
+    "1.16": "275",
+    "1.16.2": "275",
+    "1.17": "315"
+  },
+  "129": {
+    "legacy": "129",
+    "1.13": "230",
+    "1.13.2": "230",
+    "1.14": "236",
+    "1.15": "236",
+    "1.16": "276",
+    "1.16.2": "276",
+    "1.17": "50"
+  },
+  "130": {
+    "legacy": "130",
+    "1.13": "231",
+    "1.13.2": "231",
+    "1.14": "237",
+    "1.15": "237",
+    "1.16": "277",
+    "1.16.2": "277",
+    "1.17": "316"
+  },
+  "131": {
+    "legacy": "131",
+    "1.13": "232",
+    "1.13.2": "232",
+    "1.14": "238",
+    "1.15": "238",
+    "1.16": "278",
+    "1.16.2": "278",
+    "1.17": "604"
+  },
+  "133": {
+    "legacy": "133",
+    "1.13": "233",
+    "1.13.2": "233",
+    "1.14": "239",
+    "1.15": "239",
+    "1.16": "279",
+    "1.16.2": "279",
+    "1.17": "317"
+  },
+  "134": {
+    "legacy": "134",
+    "1.13": "234",
+    "1.13.2": "234",
+    "1.14": "240",
+    "1.15": "240",
+    "1.16": "280",
+    "1.16.2": "280",
+    "1.17": "318"
+  },
+  "135": {
+    "legacy": "135",
+    "1.13": "235",
+    "1.13.2": "235",
+    "1.14": "241",
+    "1.15": "241",
+    "1.16": "281",
+    "1.16.2": "281",
+    "1.17": "319"
+  },
+  "136": {
+    "legacy": "136",
+    "1.13": "236",
+    "1.13.2": "236",
+    "1.14": "242",
+    "1.15": "242",
+    "1.16": "282",
+    "1.16.2": "282",
+    "1.17": "320"
+  },
+  "137": {
+    "legacy": "137",
+    "1.13": "237",
+    "1.13.2": "237",
+    "1.14": "243",
+    "1.15": "243",
+    "1.16": "285",
+    "1.16.2": "285",
+    "1.17": "323"
+  },
+  "138": {
+    "legacy": "138",
+    "1.13": "238",
+    "1.13.2": "238",
+    "1.14": "244",
+    "1.15": "244",
+    "1.16": "286",
+    "1.16.2": "286",
+    "1.17": "324"
+  },
+  "139": {
+    "legacy": "139",
+    "1.13": "239",
+    "1.13.2": "239",
+    "1.14": "245",
+    "1.15": "245",
+    "1.16": "287",
+    "1.16.2": "287",
+    "1.17": "325"
+  },
+  "143": {
+    "legacy": "143",
+    "1.13": "241",
+    "1.13.2": "241",
+    "1.14": "259",
+    "1.15": "259",
+    "1.16": "305",
+    "1.16.2": "305",
+    "1.17": "611"
+  },
+  "145": {
+    "legacy": "145",
+    "1.13": "247",
+    "1.13.2": "247",
+    "1.14": "265",
+    "1.15": "265",
+    "1.16": "314",
+    "1.16.2": "314",
+    "1.17": "346"
+  },
+  "146": {
+    "legacy": "146",
+    "1.13": "250",
+    "1.13.2": "250",
+    "1.14": "268",
+    "1.15": "268",
+    "1.16": "317",
+    "1.16.2": "317",
+    "1.17": "605"
+  },
+  "147": {
+    "legacy": "147",
+    "1.13": "251",
+    "1.13.2": "251",
+    "1.14": "269",
+    "1.15": "269",
+    "1.16": "318",
+    "1.16.2": "318",
+    "1.17": "621"
+  },
+  "148": {
+    "legacy": "148",
+    "1.13": "252",
+    "1.13.2": "252",
+    "1.14": "270",
+    "1.15": "270",
+    "1.16": "319",
+    "1.16.2": "319",
+    "1.17": "622"
+  },
+  "151": {
+    "legacy": "151",
+    "1.13": "253",
+    "1.13.2": "253",
+    "1.14": "271",
+    "1.15": "271",
+    "1.16": "320",
+    "1.16.2": "320",
+    "1.17": "602"
+  },
+  "152": {
+    "legacy": "152",
+    "1.13": "254",
+    "1.13.2": "254",
+    "1.14": "272",
+    "1.15": "272",
+    "1.16": "321",
+    "1.16.2": "321",
+    "1.17": "587"
+  },
+  "153": {
+    "legacy": "153",
+    "1.13": "255",
+    "1.13.2": "255",
+    "1.14": "273",
+    "1.15": "273",
+    "1.16": "322",
+    "1.16.2": "322",
+    "1.17": "57"
+  },
+  "154": {
+    "legacy": "154",
+    "1.13": "256",
+    "1.13.2": "256",
+    "1.14": "274",
+    "1.15": "274",
+    "1.16": "323",
+    "1.16.2": "323",
+    "1.17": "595"
+  },
+  "155": {
+    "legacy": "155",
+    "1.13": "258",
+    "1.13.2": "258",
+    "1.14": "276",
+    "1.15": "276",
+    "1.16": "325",
+    "1.16.2": "325",
+    "1.17": "350"
+  },
+  "156": {
+    "legacy": "156",
+    "1.13": "260",
+    "1.13.2": "260",
+    "1.14": "278",
+    "1.15": "278",
+    "1.16": "328",
+    "1.16.2": "328",
+    "1.17": "353"
+  },
+  "157": {
+    "legacy": "157",
+    "1.13": "261",
+    "1.13.2": "261",
+    "1.14": "279",
+    "1.15": "279",
+    "1.16": "329",
+    "1.16.2": "329",
+    "1.17": "660"
+  },
+  "158": {
+    "legacy": "158",
+    "1.13": "262",
+    "1.13.2": "262",
+    "1.14": "280",
+    "1.15": "280",
+    "1.16": "330",
+    "1.16.2": "330",
+    "1.17": "597"
+  },
+  "159": {
+    "legacy": "159",
+    "1.13": "395",
+    "1.13.2": "395",
+    "1.14": "413",
+    "1.15": "413",
+    "1.16": "464",
+    "1.16.2": "464",
+    "1.17": "484"
+  },
+  "160": {
+    "legacy": "160",
+    "1.13": "327",
+    "1.13.2": "327",
+    "1.14": "345",
+    "1.15": "345",
+    "1.16": "395",
+    "1.16.2": "395",
+    "1.17": "416"
+  },
+  "161": {
+    "legacy": "161",
+    "1.13": "60",
+    "1.13.2": "60",
+    "1.14": "60",
+    "1.15": "60",
+    "1.16": "73",
+    "1.16.2": "73",
+    "1.17": "137"
+  },
+  "162": {
+    "legacy": "162",
+    "1.13": "36",
+    "1.13.2": "36",
+    "1.14": "36",
+    "1.15": "36",
+    "1.16": "41",
+    "1.16.2": "41",
+    "1.17": "105"
+  },
+  "163": {
+    "legacy": "163",
+    "1.13": "301",
+    "1.13.2": "301",
+    "1.14": "319",
+    "1.15": "319",
+    "1.16": "369",
+    "1.16.2": "369",
+    "1.17": "391"
+  },
+  "164": {
+    "legacy": "164",
+    "1.13": "302",
+    "1.13.2": "302",
+    "1.14": "320",
+    "1.15": "320",
+    "1.16": "370",
+    "1.16.2": "370",
+    "1.17": "392"
+  },
+  "165": {
+    "legacy": "165",
+    "1.13": "303",
+    "1.13.2": "303",
+    "1.14": "321",
+    "1.15": "321",
+    "1.16": "371",
+    "1.16.2": "371",
+    "1.17": "592"
+  },
+  "166": {
+    "legacy": "166",
+    "1.13": "279",
+    "1.13.2": "279",
+    "1.14": "297",
+    "1.15": "297",
+    "1.16": "347",
+    "1.16.2": "347",
+    "1.17": "370"
+  },
+  "167": {
+    "legacy": "167",
+    "1.13": "280",
+    "1.13.2": "280",
+    "1.14": "298",
+    "1.15": "298",
+    "1.16": "348",
+    "1.16.2": "348",
+    "1.17": "640"
+  },
+  "168": {
+    "legacy": "168",
+    "1.13": "343",
+    "1.13.2": "343",
+    "1.14": "361",
+    "1.15": "361",
+    "1.16": "411",
+    "1.16.2": "411",
+    "1.17": "432"
+  },
+  "169": {
+    "legacy": "169",
+    "1.13": "349",
+    "1.13.2": "349",
+    "1.14": "367",
+    "1.15": "367",
+    "1.16": "417",
+    "1.16.2": "417",
+    "1.17": "438"
+  },
+  "170": {
+    "legacy": "170",
+    "1.13": "281",
+    "1.13.2": "281",
+    "1.14": "299",
+    "1.15": "299",
+    "1.16": "349",
+    "1.16.2": "349",
+    "1.17": "372"
+  },
+  "171": {
+    "legacy": "171",
+    "1.13": "282",
+    "1.13.2": "282",
+    "1.14": "300",
+    "1.15": "300",
+    "1.16": "350",
+    "1.16.2": "350",
+    "1.17": "373"
+  },
+  "172": {
+    "legacy": "172",
+    "1.13": "407",
+    "1.13.2": "407",
+    "1.14": "425",
+    "1.15": "425",
+    "1.16": "476",
+    "1.16.2": "476",
+    "1.17": "496"
+  },
+  "173": {
+    "legacy": "173",
+    "1.13": "299",
+    "1.13.2": "299",
+    "1.14": "317",
+    "1.15": "317",
+    "1.16": "367",
+    "1.16.2": "367",
+    "1.17": "59"
+  },
+  "174": {
+    "legacy": "174",
+    "1.13": "300",
+    "1.13.2": "300",
+    "1.14": "318",
+    "1.15": "318",
+    "1.16": "368",
+    "1.16.2": "368",
+    "1.17": "390"
+  },
+  "175": {
+    "legacy": "175",
+    "1.13": "305",
+    "1.13.2": "305",
+    "1.14": "323",
+    "1.15": "323",
+    "1.16": "373",
+    "1.16.2": "373",
+    "1.17": "394"
+  },
+  "179": {
+    "legacy": "179",
+    "1.13": "350",
+    "1.13.2": "350",
+    "1.14": "368",
+    "1.15": "368",
+    "1.16": "418",
+    "1.16.2": "418",
+    "1.17": "439"
+  },
+  "180": {
+    "legacy": "180",
+    "1.13": "353",
+    "1.13.2": "353",
+    "1.14": "371",
+    "1.15": "371",
+    "1.16": "421",
+    "1.16.2": "421",
+    "1.17": "442"
+  },
+  "182": {
+    "legacy": "182",
+    "1.13": "118",
+    "1.13.2": "118",
+    "1.14": "122",
+    "1.15": "122",
+    "1.16": "147",
+    "1.16.2": "147",
+    "1.17": "213"
+  },
+  "183": {
+    "legacy": "183",
+    "1.13": "211",
+    "1.13.2": "211",
+    "1.14": "217",
+    "1.15": "217",
+    "1.16": "253",
+    "1.16.2": "253",
+    "1.17": "650"
+  },
+  "184": {
+    "legacy": "184",
+    "1.13": "212",
+    "1.13.2": "212",
+    "1.14": "218",
+    "1.15": "218",
+    "1.16": "254",
+    "1.16.2": "254",
+    "1.17": "651"
+  },
+  "185": {
+    "legacy": "185",
+    "1.13": "213",
+    "1.13.2": "213",
+    "1.14": "219",
+    "1.15": "219",
+    "1.16": "255",
+    "1.16.2": "255",
+    "1.17": "652"
+  },
+  "186": {
+    "legacy": "186",
+    "1.13": "215",
+    "1.13.2": "215",
+    "1.14": "221",
+    "1.15": "221",
+    "1.16": "257",
+    "1.16.2": "257",
+    "1.17": "654"
+  },
+  "187": {
+    "legacy": "187",
+    "1.13": "214",
+    "1.13.2": "214",
+    "1.14": "220",
+    "1.15": "220",
+    "1.16": "256",
+    "1.16.2": "256",
+    "1.17": "653"
+  },
+  "188": {
+    "legacy": "188",
+    "1.13": "176",
+    "1.13.2": "176",
+    "1.14": "182",
+    "1.15": "182",
+    "1.16": "209",
+    "1.16.2": "209",
+    "1.17": "258"
+  },
+  "189": {
+    "legacy": "189",
+    "1.13": "177",
+    "1.13.2": "177",
+    "1.14": "183",
+    "1.15": "183",
+    "1.16": "210",
+    "1.16.2": "210",
+    "1.17": "259"
+  },
+  "190": {
+    "legacy": "190",
+    "1.13": "178",
+    "1.13.2": "178",
+    "1.14": "184",
+    "1.15": "184",
+    "1.16": "211",
+    "1.16.2": "211",
+    "1.17": "260"
+  },
+  "191": {
+    "legacy": "191",
+    "1.13": "180",
+    "1.13.2": "180",
+    "1.14": "186",
+    "1.15": "186",
+    "1.16": "213",
+    "1.16.2": "213",
+    "1.17": "262"
+  },
+  "192": {
+    "legacy": "192",
+    "1.13": "179",
+    "1.13.2": "179",
+    "1.14": "185",
+    "1.15": "185",
+    "1.16": "212",
+    "1.16.2": "212",
+    "1.17": "261"
+  },
+  "256": {
+    "legacy": "256",
+    "1.13": "467",
+    "1.13.2": "472",
+    "1.14": "520",
+    "1.15": "520",
+    "1.16": "572",
+    "1.16.2": "599",
+    "1.17": "715"
+  },
+  "257": {
+    "legacy": "257",
+    "1.13": "468",
+    "1.13.2": "473",
+    "1.14": "521",
+    "1.15": "521",
+    "1.16": "573",
+    "1.16.2": "600",
+    "1.17": "716"
+  },
+  "258": {
+    "legacy": "258",
+    "1.13": "469",
+    "1.13.2": "474",
+    "1.14": "522",
+    "1.15": "522",
+    "1.16": "574",
+    "1.16.2": "601",
+    "1.17": "717"
+  },
+  "259": {
+    "legacy": "259",
+    "1.13": "470",
+    "1.13.2": "475",
+    "1.14": "523",
+    "1.15": "523",
+    "1.16": "575",
+    "1.16.2": "572",
+    "1.17": "680"
+  },
+  "260": {
+    "legacy": "260",
+    "1.13": "471",
+    "1.13.2": "476",
+    "1.14": "524",
+    "1.15": "524",
+    "1.16": "576",
+    "1.16.2": "573",
+    "1.17": "681"
+  },
+  "261": {
+    "legacy": "261",
+    "1.13": "472",
+    "1.13.2": "477",
+    "1.14": "525",
+    "1.15": "525",
+    "1.16": "577",
+    "1.16.2": "574",
+    "1.17": "682"
+  },
+  "262": {
+    "legacy": "262",
+    "1.13": "473",
+    "1.13.2": "478",
+    "1.14": "526",
+    "1.15": "526",
+    "1.16": "578",
+    "1.16.2": "575",
+    "1.17": "683"
+  },
+  "263": {
+    "legacy": "263",
+    "1.13": "474",
+    "1.13.2": "479",
+    "1.14": "527",
+    "1.15": "527",
+    "1.16": "579",
+    "1.16.2": "576",
+    "1.17": "684"
+  },
+  "264": {
+    "legacy": "264",
+    "1.13": "476",
+    "1.13.2": "481",
+    "1.14": "529",
+    "1.15": "529",
+    "1.16": "581",
+    "1.16.2": "578",
+    "1.17": "686"
+  },
+  "265": {
+    "legacy": "265",
+    "1.13": "477",
+    "1.13.2": "482",
+    "1.14": "530",
+    "1.15": "530",
+    "1.16": "582",
+    "1.16.2": "579",
+    "1.17": "692"
+  },
+  "266": {
+    "legacy": "266",
+    "1.13": "478",
+    "1.13.2": "483",
+    "1.14": "531",
+    "1.15": "531",
+    "1.16": "583",
+    "1.16.2": "580",
+    "1.17": "696"
+  },
+  "267": {
+    "legacy": "267",
+    "1.13": "479",
+    "1.13.2": "484",
+    "1.14": "532",
+    "1.15": "532",
+    "1.16": "586",
+    "1.16.2": "598",
+    "1.17": "714"
+  },
+  "268": {
+    "legacy": "268",
+    "1.13": "480",
+    "1.13.2": "485",
+    "1.14": "533",
+    "1.15": "533",
+    "1.16": "587",
+    "1.16.2": "583",
+    "1.17": "699"
+  },
+  "269": {
+    "legacy": "269",
+    "1.13": "481",
+    "1.13.2": "486",
+    "1.14": "534",
+    "1.15": "534",
+    "1.16": "588",
+    "1.16.2": "584",
+    "1.17": "700"
+  },
+  "270": {
+    "legacy": "270",
+    "1.13": "482",
+    "1.13.2": "487",
+    "1.14": "535",
+    "1.15": "535",
+    "1.16": "589",
+    "1.16.2": "585",
+    "1.17": "701"
+  },
+  "271": {
+    "legacy": "271",
+    "1.13": "483",
+    "1.13.2": "488",
+    "1.14": "536",
+    "1.15": "536",
+    "1.16": "590",
+    "1.16.2": "586",
+    "1.17": "702"
+  },
+  "272": {
+    "legacy": "272",
+    "1.13": "484",
+    "1.13.2": "489",
+    "1.14": "537",
+    "1.15": "537",
+    "1.16": "591",
+    "1.16.2": "588",
+    "1.17": "704"
+  },
+  "273": {
+    "legacy": "273",
+    "1.13": "485",
+    "1.13.2": "490",
+    "1.14": "538",
+    "1.15": "538",
+    "1.16": "592",
+    "1.16.2": "589",
+    "1.17": "705"
+  },
+  "274": {
+    "legacy": "274",
+    "1.13": "486",
+    "1.13.2": "491",
+    "1.14": "539",
+    "1.15": "539",
+    "1.16": "593",
+    "1.16.2": "590",
+    "1.17": "706"
+  },
+  "275": {
+    "legacy": "275",
+    "1.13": "487",
+    "1.13.2": "492",
+    "1.14": "540",
+    "1.15": "540",
+    "1.16": "594",
+    "1.16.2": "591",
+    "1.17": "707"
+  },
+  "276": {
+    "legacy": "276",
+    "1.13": "488",
+    "1.13.2": "493",
+    "1.14": "541",
+    "1.15": "541",
+    "1.16": "595",
+    "1.16.2": "603",
+    "1.17": "719"
+  },
+  "277": {
+    "legacy": "277",
+    "1.13": "489",
+    "1.13.2": "494",
+    "1.14": "542",
+    "1.15": "542",
+    "1.16": "596",
+    "1.16.2": "604",
+    "1.17": "720"
+  },
+  "278": {
+    "legacy": "278",
+    "1.13": "490",
+    "1.13.2": "495",
+    "1.14": "543",
+    "1.15": "543",
+    "1.16": "597",
+    "1.16.2": "605",
+    "1.17": "721"
+  },
+  "279": {
+    "legacy": "279",
+    "1.13": "491",
+    "1.13.2": "496",
+    "1.14": "544",
+    "1.15": "544",
+    "1.16": "598",
+    "1.16.2": "606",
+    "1.17": "722"
+  },
+  "280": {
+    "legacy": "280",
+    "1.13": "492",
+    "1.13.2": "497",
+    "1.14": "545",
+    "1.15": "545",
+    "1.16": "599",
+    "1.16.2": "613",
+    "1.17": "729"
+  },
+  "281": {
+    "legacy": "281",
+    "1.13": "493",
+    "1.13.2": "498",
+    "1.14": "546",
+    "1.15": "546",
+    "1.16": "600",
+    "1.16.2": "614",
+    "1.17": "730"
+  },
+  "282": {
+    "legacy": "282",
+    "1.13": "494",
+    "1.13.2": "499",
+    "1.14": "547",
+    "1.15": "547",
+    "1.16": "601",
+    "1.16.2": "615",
+    "1.17": "731"
+  },
+  "283": {
+    "legacy": "283",
+    "1.13": "495",
+    "1.13.2": "500",
+    "1.14": "548",
+    "1.15": "548",
+    "1.16": "602",
+    "1.16.2": "593",
+    "1.17": "709"
+  },
+  "284": {
+    "legacy": "284",
+    "1.13": "496",
+    "1.13.2": "501",
+    "1.14": "549",
+    "1.15": "549",
+    "1.16": "603",
+    "1.16.2": "594",
+    "1.17": "710"
+  },
+  "285": {
+    "legacy": "285",
+    "1.13": "497",
+    "1.13.2": "502",
+    "1.14": "550",
+    "1.15": "550",
+    "1.16": "604",
+    "1.16.2": "595",
+    "1.17": "711"
+  },
+  "286": {
+    "legacy": "286",
+    "1.13": "498",
+    "1.13.2": "503",
+    "1.14": "551",
+    "1.15": "551",
+    "1.16": "605",
+    "1.16.2": "596",
+    "1.17": "712"
+  },
+  "287": {
+    "legacy": "287",
+    "1.13": "499",
+    "1.13.2": "504",
+    "1.14": "552",
+    "1.15": "552",
+    "1.16": "610",
+    "1.16.2": "616",
+    "1.17": "732"
+  },
+  "288": {
+    "legacy": "288",
+    "1.13": "500",
+    "1.13.2": "505",
+    "1.14": "553",
+    "1.15": "553",
+    "1.16": "611",
+    "1.16.2": "617",
+    "1.17": "733"
+  },
+  "289": {
+    "legacy": "289",
+    "1.13": "501",
+    "1.13.2": "506",
+    "1.14": "554",
+    "1.15": "554",
+    "1.16": "612",
+    "1.16.2": "618",
+    "1.17": "734"
+  },
+  "290": {
+    "legacy": "290",
+    "1.13": "502",
+    "1.13.2": "507",
+    "1.14": "555",
+    "1.15": "555",
+    "1.16": "613",
+    "1.16.2": "587",
+    "1.17": "703"
+  },
+  "291": {
+    "legacy": "291",
+    "1.13": "503",
+    "1.13.2": "508",
+    "1.14": "556",
+    "1.15": "556",
+    "1.16": "614",
+    "1.16.2": "592",
+    "1.17": "708"
+  },
+  "292": {
+    "legacy": "292",
+    "1.13": "504",
+    "1.13.2": "509",
+    "1.14": "557",
+    "1.15": "557",
+    "1.16": "615",
+    "1.16.2": "602",
+    "1.17": "718"
+  },
+  "293": {
+    "legacy": "293",
+    "1.13": "505",
+    "1.13.2": "510",
+    "1.14": "558",
+    "1.15": "558",
+    "1.16": "616",
+    "1.16.2": "607",
+    "1.17": "723"
+  },
+  "294": {
+    "legacy": "294",
+    "1.13": "506",
+    "1.13.2": "511",
+    "1.14": "559",
+    "1.15": "559",
+    "1.16": "617",
+    "1.16.2": "597",
+    "1.17": "713"
+  },
+  "295": {
+    "legacy": "295",
+    "1.13": "507",
+    "1.13.2": "512",
+    "1.14": "560",
+    "1.15": "560",
+    "1.16": "619",
+    "1.16.2": "619",
+    "1.17": "735"
+  },
+  "296": {
+    "legacy": "296",
+    "1.13": "508",
+    "1.13.2": "513",
+    "1.14": "561",
+    "1.15": "561",
+    "1.16": "620",
+    "1.16.2": "620",
+    "1.17": "736"
+  },
+  "297": {
+    "legacy": "297",
+    "1.13": "509",
+    "1.13.2": "514",
+    "1.14": "562",
+    "1.15": "562",
+    "1.16": "621",
+    "1.16.2": "621",
+    "1.17": "737"
+  },
+  "298": {
+    "legacy": "298",
+    "1.13": "510",
+    "1.13.2": "515",
+    "1.14": "563",
+    "1.15": "563",
+    "1.16": "622",
+    "1.16.2": "622",
+    "1.17": "738"
+  },
+  "299": {
+    "legacy": "299",
+    "1.13": "511",
+    "1.13.2": "516",
+    "1.14": "564",
+    "1.15": "564",
+    "1.16": "623",
+    "1.16.2": "623",
+    "1.17": "739"
+  },
+  "300": {
+    "legacy": "300",
+    "1.13": "512",
+    "1.13.2": "517",
+    "1.14": "565",
+    "1.15": "565",
+    "1.16": "624",
+    "1.16.2": "624",
+    "1.17": "740"
+  },
+  "301": {
+    "legacy": "301",
+    "1.13": "513",
+    "1.13.2": "518",
+    "1.14": "566",
+    "1.15": "566",
+    "1.16": "625",
+    "1.16.2": "625",
+    "1.17": "741"
+  },
+  "302": {
+    "legacy": "302",
+    "1.13": "514",
+    "1.13.2": "519",
+    "1.14": "567",
+    "1.15": "567",
+    "1.16": "626",
+    "1.16.2": "626",
+    "1.17": "742"
+  },
+  "303": {
+    "legacy": "303",
+    "1.13": "515",
+    "1.13.2": "520",
+    "1.14": "568",
+    "1.15": "568",
+    "1.16": "627",
+    "1.16.2": "627",
+    "1.17": "743"
+  },
+  "304": {
+    "legacy": "304",
+    "1.13": "516",
+    "1.13.2": "521",
+    "1.14": "569",
+    "1.15": "569",
+    "1.16": "628",
+    "1.16.2": "628",
+    "1.17": "744"
+  },
+  "305": {
+    "legacy": "305",
+    "1.13": "517",
+    "1.13.2": "522",
+    "1.14": "570",
+    "1.15": "570",
+    "1.16": "629",
+    "1.16.2": "629",
+    "1.17": "745"
+  },
+  "306": {
+    "legacy": "306",
+    "1.13": "518",
+    "1.13.2": "523",
+    "1.14": "571",
+    "1.15": "571",
+    "1.16": "630",
+    "1.16.2": "630",
+    "1.17": "746"
+  },
+  "307": {
+    "legacy": "307",
+    "1.13": "519",
+    "1.13.2": "524",
+    "1.14": "572",
+    "1.15": "572",
+    "1.16": "631",
+    "1.16.2": "631",
+    "1.17": "747"
+  },
+  "308": {
+    "legacy": "308",
+    "1.13": "520",
+    "1.13.2": "525",
+    "1.14": "573",
+    "1.15": "573",
+    "1.16": "632",
+    "1.16.2": "632",
+    "1.17": "748"
+  },
+  "309": {
+    "legacy": "309",
+    "1.13": "521",
+    "1.13.2": "526",
+    "1.14": "574",
+    "1.15": "574",
+    "1.16": "633",
+    "1.16.2": "633",
+    "1.17": "749"
+  },
+  "310": {
+    "legacy": "310",
+    "1.13": "522",
+    "1.13.2": "527",
+    "1.14": "575",
+    "1.15": "575",
+    "1.16": "634",
+    "1.16.2": "634",
+    "1.17": "750"
+  },
+  "311": {
+    "legacy": "311",
+    "1.13": "523",
+    "1.13.2": "528",
+    "1.14": "576",
+    "1.15": "576",
+    "1.16": "635",
+    "1.16.2": "635",
+    "1.17": "751"
+  },
+  "312": {
+    "legacy": "312",
+    "1.13": "524",
+    "1.13.2": "529",
+    "1.14": "577",
+    "1.15": "577",
+    "1.16": "636",
+    "1.16.2": "636",
+    "1.17": "752"
+  },
+  "313": {
+    "legacy": "313",
+    "1.13": "525",
+    "1.13.2": "530",
+    "1.14": "578",
+    "1.15": "578",
+    "1.16": "637",
+    "1.16.2": "637",
+    "1.17": "753"
+  },
+  "314": {
+    "legacy": "314",
+    "1.13": "526",
+    "1.13.2": "531",
+    "1.14": "579",
+    "1.15": "579",
+    "1.16": "638",
+    "1.16.2": "638",
+    "1.17": "754"
+  },
+  "315": {
+    "legacy": "315",
+    "1.13": "527",
+    "1.13.2": "532",
+    "1.14": "580",
+    "1.15": "580",
+    "1.16": "639",
+    "1.16.2": "639",
+    "1.17": "755"
+  },
+  "316": {
+    "legacy": "316",
+    "1.13": "528",
+    "1.13.2": "533",
+    "1.14": "581",
+    "1.15": "581",
+    "1.16": "640",
+    "1.16.2": "640",
+    "1.17": "756"
+  },
+  "317": {
+    "legacy": "317",
+    "1.13": "529",
+    "1.13.2": "534",
+    "1.14": "582",
+    "1.15": "582",
+    "1.16": "641",
+    "1.16.2": "641",
+    "1.17": "757"
+  },
+  "318": {
+    "legacy": "318",
+    "1.13": "530",
+    "1.13.2": "535",
+    "1.14": "583",
+    "1.15": "583",
+    "1.16": "646",
+    "1.16.2": "646",
+    "1.17": "762"
+  },
+  "319": {
+    "legacy": "319",
+    "1.13": "531",
+    "1.13.2": "536",
+    "1.14": "584",
+    "1.15": "584",
+    "1.16": "647",
+    "1.16.2": "647",
+    "1.17": "763"
+  },
+  "320": {
+    "legacy": "320",
+    "1.13": "532",
+    "1.13.2": "537",
+    "1.14": "585",
+    "1.15": "585",
+    "1.16": "648",
+    "1.16.2": "648",
+    "1.17": "764"
+  },
+  "321": {
+    "legacy": "321",
+    "1.13": "533",
+    "1.13.2": "538",
+    "1.14": "586",
+    "1.15": "586",
+    "1.16": "649",
+    "1.16.2": "649",
+    "1.17": "765"
+  },
+  "322": {
+    "legacy": "322",
+    "1.13": "534",
+    "1.13.2": "539",
+    "1.14": "587",
+    "1.15": "587",
+    "1.16": "650",
+    "1.16.2": "650",
+    "1.17": "766"
+  },
+  "323": {
+    "legacy": "323",
+    "1.13": "536",
+    "1.13.2": "541",
+    "1.14": "589",
+    "1.15": "589",
+    "1.16": "652",
+    "1.16.2": "652",
+    "1.17": "768"
+  },
+  "324": {
+    "legacy": "324",
+    "1.13": "456",
+    "1.13.2": "461",
+    "1.14": "507",
+    "1.15": "507",
+    "1.16": "558",
+    "1.16.2": "558",
+    "1.17": "632"
+  },
+  "325": {
+    "legacy": "325",
+    "1.13": "537",
+    "1.13.2": "542",
+    "1.14": "595",
+    "1.15": "595",
+    "1.16": "660",
+    "1.16.2": "660",
+    "1.17": "776"
+  },
+  "326": {
+    "legacy": "326",
+    "1.13": "538",
+    "1.13.2": "543",
+    "1.14": "596",
+    "1.15": "596",
+    "1.16": "661",
+    "1.16.2": "661",
+    "1.17": "777"
+  },
+  "327": {
+    "legacy": "327",
+    "1.13": "539",
+    "1.13.2": "544",
+    "1.14": "597",
+    "1.15": "597",
+    "1.16": "662",
+    "1.16.2": "662",
+    "1.17": "778"
+  },
+  "328": {
+    "legacy": "328",
+    "1.13": "540",
+    "1.13.2": "545",
+    "1.14": "598",
+    "1.15": "598",
+    "1.16": "663",
+    "1.16.2": "663",
+    "1.17": "662"
+  },
+  "329": {
+    "legacy": "329",
+    "1.13": "541",
+    "1.13.2": "546",
+    "1.14": "599",
+    "1.15": "599",
+    "1.16": "664",
+    "1.16.2": "664",
+    "1.17": "661"
+  },
+  "330": {
+    "legacy": "330",
+    "1.13": "455",
+    "1.13.2": "460",
+    "1.14": "506",
+    "1.15": "506",
+    "1.16": "557",
+    "1.16.2": "557",
+    "1.17": "631"
+  },
+  "331": {
+    "legacy": "331",
+    "1.13": "542",
+    "1.13.2": "547",
+    "1.14": "600",
+    "1.15": "600",
+    "1.16": "665",
+    "1.16.2": "665",
+    "1.17": "585"
+  },
+  "332": {
+    "legacy": "332",
+    "1.13": "543",
+    "1.13.2": "548",
+    "1.14": "601",
+    "1.15": "601",
+    "1.16": "666",
+    "1.16.2": "666",
+    "1.17": "780"
+  },
+  "333": {
+    "legacy": "333",
+    "1.13": "544",
+    "1.13.2": "549",
+    "1.14": "602",
+    "1.15": "602",
+    "1.16": "667",
+    "1.16.2": "667",
+    "1.17": "670"
+  },
+  "334": {
+    "legacy": "334",
+    "1.13": "545",
+    "1.13.2": "550",
+    "1.14": "603",
+    "1.15": "603",
+    "1.16": "668",
+    "1.16.2": "668",
+    "1.17": "781"
+  },
+  "335": {
+    "legacy": "335",
+    "1.13": "546",
+    "1.13.2": "551",
+    "1.14": "604",
+    "1.15": "604",
+    "1.16": "669",
+    "1.16.2": "669",
+    "1.17": "782"
+  },
+  "336": {
+    "legacy": "336",
+    "1.13": "551",
+    "1.13.2": "556",
+    "1.14": "609",
+    "1.15": "609",
+    "1.16": "674",
+    "1.16.2": "674",
+    "1.17": "788"
+  },
+  "337": {
+    "legacy": "337",
+    "1.13": "552",
+    "1.13.2": "557",
+    "1.14": "610",
+    "1.15": "610",
+    "1.16": "675",
+    "1.16.2": "675",
+    "1.17": "789"
+  },
+  "338": {
+    "legacy": "338",
+    "1.13": "553",
+    "1.13.2": "558",
+    "1.14": "611",
+    "1.15": "611",
+    "1.16": "133",
+    "1.16.2": "133",
+    "1.17": "196"
+  },
+  "339": {
+    "legacy": "339",
+    "1.13": "556",
+    "1.13.2": "561",
+    "1.14": "615",
+    "1.15": "615",
+    "1.16": "677",
+    "1.16.2": "677",
+    "1.17": "791"
+  },
+  "340": {
+    "legacy": "340",
+    "1.13": "557",
+    "1.13.2": "562",
+    "1.14": "616",
+    "1.15": "616",
+    "1.16": "678",
+    "1.16.2": "678",
+    "1.17": "792"
+  },
+  "341": {
+    "legacy": "341",
+    "1.13": "558",
+    "1.13.2": "563",
+    "1.14": "617",
+    "1.15": "617",
+    "1.16": "679",
+    "1.16.2": "679",
+    "1.17": "793"
+  },
+  "342": {
+    "legacy": "342",
+    "1.13": "559",
+    "1.13.2": "564",
+    "1.14": "618",
+    "1.15": "618",
+    "1.16": "680",
+    "1.16.2": "680",
+    "1.17": "663"
+  },
+  "343": {
+    "legacy": "343",
+    "1.13": "560",
+    "1.13.2": "565",
+    "1.14": "619",
+    "1.15": "619",
+    "1.16": "681",
+    "1.16.2": "681",
+    "1.17": "664"
+  },
+  "344": {
+    "legacy": "344",
+    "1.13": "561",
+    "1.13.2": "566",
+    "1.14": "620",
+    "1.15": "620",
+    "1.16": "682",
+    "1.16.2": "682",
+    "1.17": "794"
+  },
+  "345": {
+    "legacy": "345",
+    "1.13": "562",
+    "1.13.2": "567",
+    "1.14": "621",
+    "1.15": "621",
+    "1.16": "683",
+    "1.16.2": "683",
+    "1.17": "795"
+  },
+  "346": {
+    "legacy": "346",
+    "1.13": "563",
+    "1.13.2": "568",
+    "1.14": "622",
+    "1.15": "622",
+    "1.16": "684",
+    "1.16.2": "684",
+    "1.17": "797"
+  },
+  "347": {
+    "legacy": "347",
+    "1.13": "564",
+    "1.13.2": "569",
+    "1.14": "623",
+    "1.15": "623",
+    "1.16": "685",
+    "1.16.2": "685",
+    "1.17": "798"
+  },
+  "348": {
+    "legacy": "348",
+    "1.13": "565",
+    "1.13.2": "570",
+    "1.14": "624",
+    "1.15": "624",
+    "1.16": "686",
+    "1.16.2": "686",
+    "1.17": "800"
+  },
+  "349": {
+    "legacy": "349",
+    "1.13": "568",
+    "1.13.2": "573",
+    "1.14": "627",
+    "1.15": "627",
+    "1.16": "689",
+    "1.16.2": "689",
+    "1.17": "803"
+  },
+  "350": {
+    "legacy": "350",
+    "1.13": "570",
+    "1.13.2": "575",
+    "1.14": "629",
+    "1.15": "629",
+    "1.16": "691",
+    "1.16.2": "691",
+    "1.17": "805"
+  },
+  "351": {
+    "legacy": "351",
+    "1.13": "579",
+    "1.13.2": "584",
+    "1.14": "650",
+    "1.15": "650",
+    "1.16": "712",
+    "1.16.2": "696",
+    "1.17": "810"
+  },
+  "352": {
+    "legacy": "352",
+    "1.13": "588",
+    "1.13.2": "593",
+    "1.14": "651",
+    "1.15": "651",
+    "1.16": "713",
+    "1.16.2": "713",
+    "1.17": "827"
+  },
+  "353": {
+    "legacy": "353",
+    "1.13": "589",
+    "1.13.2": "594",
+    "1.14": "652",
+    "1.15": "652",
+    "1.16": "714",
+    "1.16.2": "714",
+    "1.17": "828"
+  },
+  "354": {
+    "legacy": "354",
+    "1.13": "590",
+    "1.13.2": "595",
+    "1.14": "653",
+    "1.15": "653",
+    "1.16": "715",
+    "1.16.2": "715",
+    "1.17": "829"
+  },
+  "355": {
+    "legacy": "355",
+    "1.13": "591",
+    "1.13.2": "596",
+    "1.14": "654",
+    "1.15": "654",
+    "1.16": "716",
+    "1.16.2": "716",
+    "1.17": "830"
+  },
+  "356": {
+    "legacy": "356",
+    "1.13": "462",
+    "1.13.2": "467",
+    "1.14": "513",
+    "1.15": "513",
+    "1.16": "566",
+    "1.16.2": "566",
+    "1.17": "588"
+  },
+  "357": {
+    "legacy": "357",
+    "1.13": "607",
+    "1.13.2": "612",
+    "1.14": "670",
+    "1.15": "670",
+    "1.16": "732",
+    "1.16.2": "732",
+    "1.17": "846"
+  },
+  "358": {
+    "legacy": "358",
+    "1.13": "608",
+    "1.13.2": "613",
+    "1.14": "671",
+    "1.15": "671",
+    "1.16": "733",
+    "1.16.2": "733",
+    "1.17": "847"
+  },
+  "359": {
+    "legacy": "359",
+    "1.13": "609",
+    "1.13.2": "614",
+    "1.14": "672",
+    "1.15": "672",
+    "1.16": "734",
+    "1.16.2": "734",
+    "1.17": "848"
+  },
+  "360": {
+    "legacy": "360",
+    "1.13": "208",
+    "1.13.2": "208",
+    "1.14": "214",
+    "1.15": "214",
+    "1.16": "250",
+    "1.16.2": "250",
+    "1.17": "298"
+  },
+  "361": {
+    "legacy": "361",
+    "1.13": "612",
+    "1.13.2": "617",
+    "1.14": "675",
+    "1.15": "675",
+    "1.16": "737",
+    "1.16.2": "737",
+    "1.17": "851"
+  },
+  "362": {
+    "legacy": "362",
+    "1.13": "613",
+    "1.13.2": "618",
+    "1.14": "676",
+    "1.15": "676",
+    "1.16": "738",
+    "1.16.2": "738",
+    "1.17": "852"
+  },
+  "363": {
+    "legacy": "363",
+    "1.13": "614",
+    "1.13.2": "619",
+    "1.14": "677",
+    "1.15": "677",
+    "1.16": "739",
+    "1.16.2": "739",
+    "1.17": "853"
+  },
+  "364": {
+    "legacy": "364",
+    "1.13": "615",
+    "1.13.2": "620",
+    "1.14": "678",
+    "1.15": "678",
+    "1.16": "740",
+    "1.16.2": "740",
+    "1.17": "854"
+  },
+  "365": {
+    "legacy": "365",
+    "1.13": "616",
+    "1.13.2": "621",
+    "1.14": "679",
+    "1.15": "679",
+    "1.16": "741",
+    "1.16.2": "741",
+    "1.17": "855"
+  },
+  "366": {
+    "legacy": "366",
+    "1.13": "617",
+    "1.13.2": "622",
+    "1.14": "680",
+    "1.15": "680",
+    "1.16": "742",
+    "1.16.2": "742",
+    "1.17": "856"
+  },
+  "367": {
+    "legacy": "367",
+    "1.13": "618",
+    "1.13.2": "623",
+    "1.14": "681",
+    "1.15": "681",
+    "1.16": "743",
+    "1.16.2": "743",
+    "1.17": "857"
+  },
+  "368": {
+    "legacy": "368",
+    "1.13": "619",
+    "1.13.2": "624",
+    "1.14": "682",
+    "1.15": "682",
+    "1.16": "744",
+    "1.16.2": "744",
+    "1.17": "858"
+  },
+  "369": {
+    "legacy": "369",
+    "1.13": "620",
+    "1.13.2": "625",
+    "1.14": "683",
+    "1.15": "683",
+    "1.16": "745",
+    "1.16.2": "745",
+    "1.17": "859"
+  },
+  "370": {
+    "legacy": "370",
+    "1.13": "621",
+    "1.13.2": "626",
+    "1.14": "684",
+    "1.15": "684",
+    "1.16": "746",
+    "1.16.2": "746",
+    "1.17": "860"
+  },
+  "371": {
+    "legacy": "371",
+    "1.13": "622",
+    "1.13.2": "627",
+    "1.14": "685",
+    "1.15": "685",
+    "1.16": "747",
+    "1.16.2": "747",
+    "1.17": "861"
+  },
+  "372": {
+    "legacy": "372",
+    "1.13": "623",
+    "1.13.2": "628",
+    "1.14": "686",
+    "1.15": "686",
+    "1.16": "748",
+    "1.16.2": "748",
+    "1.17": "862"
+  },
+  "373": {
+    "legacy": "373",
+    "1.13": "624",
+    "1.13.2": "629",
+    "1.14": "687",
+    "1.15": "687",
+    "1.16": "749",
+    "1.16.2": "749",
+    "1.17": "863"
+  },
+  "374": {
+    "legacy": "374",
+    "1.13": "625",
+    "1.13.2": "630",
+    "1.14": "688",
+    "1.15": "688",
+    "1.16": "750",
+    "1.16.2": "750",
+    "1.17": "864"
+  },
+  "375": {
+    "legacy": "375",
+    "1.13": "626",
+    "1.13.2": "631",
+    "1.14": "689",
+    "1.15": "689",
+    "1.16": "751",
+    "1.16.2": "751",
+    "1.17": "865"
+  },
+  "376": {
+    "legacy": "376",
+    "1.13": "627",
+    "1.13.2": "632",
+    "1.14": "690",
+    "1.15": "690",
+    "1.16": "752",
+    "1.16.2": "752",
+    "1.17": "866"
+  },
+  "377": {
+    "legacy": "377",
+    "1.13": "628",
+    "1.13.2": "633",
+    "1.14": "691",
+    "1.15": "691",
+    "1.16": "753",
+    "1.16.2": "753",
+    "1.17": "867"
+  },
+  "378": {
+    "legacy": "378",
+    "1.13": "629",
+    "1.13.2": "634",
+    "1.14": "692",
+    "1.15": "692",
+    "1.16": "754",
+    "1.16.2": "754",
+    "1.17": "868"
+  },
+  "379": {
+    "legacy": "379",
+    "1.13": "630",
+    "1.13.2": "635",
+    "1.14": "693",
+    "1.15": "693",
+    "1.16": "755",
+    "1.16.2": "755",
+    "1.17": "869"
+  },
+  "380": {
+    "legacy": "380",
+    "1.13": "631",
+    "1.13.2": "636",
+    "1.14": "694",
+    "1.15": "694",
+    "1.16": "756",
+    "1.16.2": "756",
+    "1.17": "870"
+  },
+  "381": {
+    "legacy": "381",
+    "1.13": "632",
+    "1.13.2": "637",
+    "1.14": "695",
+    "1.15": "695",
+    "1.16": "757",
+    "1.16.2": "757",
+    "1.17": "871"
+  },
+  "382": {
+    "legacy": "382",
+    "1.13": "633",
+    "1.13.2": "638",
+    "1.14": "696",
+    "1.15": "696",
+    "1.16": "758",
+    "1.16.2": "758",
+    "1.17": "872"
+  },
+  "383": {
+    "legacy": "383",
+    "1.13": "680",
+    "1.13.2": "685",
+    "1.14": "750",
+    "1.15": "751",
+    "1.16": "816",
+    "1.16.2": "817",
+    "1.17": "934"
+  },
+  "384": {
+    "legacy": "384",
+    "1.13": "685",
+    "1.13.2": "690",
+    "1.14": "755",
+    "1.15": "756",
+    "1.16": "822",
+    "1.16.2": "823",
+    "1.17": "940"
+  },
+  "385": {
+    "legacy": "385",
+    "1.13": "686",
+    "1.13.2": "691",
+    "1.14": "756",
+    "1.15": "757",
+    "1.16": "823",
+    "1.16.2": "824",
+    "1.17": "941"
+  },
+  "386": {
+    "legacy": "386",
+    "1.13": "687",
+    "1.13.2": "692",
+    "1.14": "757",
+    "1.15": "758",
+    "1.16": "824",
+    "1.16.2": "825",
+    "1.17": "942"
+  },
+  "387": {
+    "legacy": "387",
+    "1.13": "688",
+    "1.13.2": "693",
+    "1.14": "758",
+    "1.15": "759",
+    "1.16": "825",
+    "1.16.2": "826",
+    "1.17": "943"
+  },
+  "388": {
+    "legacy": "388",
+    "1.13": "689",
+    "1.13.2": "694",
+    "1.14": "759",
+    "1.15": "760",
+    "1.16": "826",
+    "1.16.2": "827",
+    "1.17": "687"
+  },
+  "389": {
+    "legacy": "389",
+    "1.13": "690",
+    "1.13.2": "695",
+    "1.14": "760",
+    "1.15": "761",
+    "1.16": "827",
+    "1.16.2": "828",
+    "1.17": "944"
+  },
+  "390": {
+    "legacy": "390",
+    "1.13": "691",
+    "1.13.2": "696",
+    "1.14": "761",
+    "1.15": "762",
+    "1.16": "828",
+    "1.16.2": "829",
+    "1.17": "946"
+  },
+  "391": {
+    "legacy": "391",
+    "1.13": "692",
+    "1.13.2": "697",
+    "1.14": "762",
+    "1.15": "763",
+    "1.16": "829",
+    "1.16.2": "830",
+    "1.17": "947"
+  },
+  "392": {
+    "legacy": "392",
+    "1.13": "693",
+    "1.13.2": "698",
+    "1.14": "763",
+    "1.15": "764",
+    "1.16": "830",
+    "1.16.2": "831",
+    "1.17": "948"
+  },
+  "393": {
+    "legacy": "393",
+    "1.13": "694",
+    "1.13.2": "699",
+    "1.14": "764",
+    "1.15": "765",
+    "1.16": "831",
+    "1.16.2": "832",
+    "1.17": "949"
+  },
+  "394": {
+    "legacy": "394",
+    "1.13": "695",
+    "1.13.2": "700",
+    "1.14": "765",
+    "1.15": "766",
+    "1.16": "832",
+    "1.16.2": "833",
+    "1.17": "950"
+  },
+  "395": {
+    "legacy": "395",
+    "1.13": "696",
+    "1.13.2": "701",
+    "1.14": "766",
+    "1.15": "767",
+    "1.16": "833",
+    "1.16.2": "834",
+    "1.17": "951"
+  },
+  "396": {
+    "legacy": "396",
+    "1.13": "697",
+    "1.13.2": "702",
+    "1.14": "767",
+    "1.15": "768",
+    "1.16": "834",
+    "1.16.2": "835",
+    "1.17": "952"
+  },
+  "397": {
+    "legacy": "397",
+    "1.13": "698",
+    "1.13.2": "703",
+    "1.14": "768",
+    "1.15": "769",
+    "1.16": "835",
+    "1.16.2": "836",
+    "1.17": "953"
+  },
+  "398": {
+    "legacy": "398",
+    "1.13": "704",
+    "1.13.2": "709",
+    "1.14": "774",
+    "1.15": "775",
+    "1.16": "841",
+    "1.16.2": "842",
+    "1.17": "667"
+  },
+  "399": {
+    "legacy": "399",
+    "1.13": "705",
+    "1.13.2": "710",
+    "1.14": "775",
+    "1.15": "776",
+    "1.16": "843",
+    "1.16.2": "844",
+    "1.17": "959"
+  },
+  "400": {
+    "legacy": "400",
+    "1.13": "706",
+    "1.13.2": "711",
+    "1.14": "776",
+    "1.15": "777",
+    "1.16": "844",
+    "1.16.2": "845",
+    "1.17": "960"
+  },
+  "401": {
+    "legacy": "401",
+    "1.13": "707",
+    "1.13.2": "712",
+    "1.14": "777",
+    "1.15": "778",
+    "1.16": "845",
+    "1.16.2": "846",
+    "1.17": "961"
+  },
+  "402": {
+    "legacy": "402",
+    "1.13": "708",
+    "1.13.2": "713",
+    "1.14": "778",
+    "1.15": "779",
+    "1.16": "846",
+    "1.16.2": "847",
+    "1.17": "962"
+  },
+  "403": {
+    "legacy": "403",
+    "1.13": "709",
+    "1.13.2": "714",
+    "1.14": "779",
+    "1.15": "780",
+    "1.16": "847",
+    "1.16.2": "848",
+    "1.17": "963"
+  },
+  "404": {
+    "legacy": "404",
+    "1.13": "463",
+    "1.13.2": "468",
+    "1.14": "514",
+    "1.15": "514",
+    "1.16": "567",
+    "1.16.2": "567",
+    "1.17": "589"
+  },
+  "405": {
+    "legacy": "405",
+    "1.13": "220",
+    "1.13.2": "220",
+    "1.14": "226",
+    "1.15": "226",
+    "1.16": "264",
+    "1.16.2": "264",
+    "1.17": "305"
+  },
+  "406": {
+    "legacy": "406",
+    "1.13": "711",
+    "1.13.2": "716",
+    "1.14": "781",
+    "1.15": "782",
+    "1.16": "849",
+    "1.16.2": "850",
+    "1.17": "689"
+  },
+  "407": {
+    "legacy": "407",
+    "1.13": "712",
+    "1.13.2": "717",
+    "1.14": "782",
+    "1.15": "783",
+    "1.16": "850",
+    "1.16.2": "851",
+    "1.17": "665"
+  },
+  "408": {
+    "legacy": "408",
+    "1.13": "713",
+    "1.13.2": "718",
+    "1.14": "783",
+    "1.15": "784",
+    "1.16": "851",
+    "1.16.2": "852",
+    "1.17": "666"
+  },
+  "409": {
+    "legacy": "409",
+    "1.13": "714",
+    "1.13.2": "719",
+    "1.14": "784",
+    "1.15": "785",
+    "1.16": "852",
+    "1.16.2": "853",
+    "1.17": "965"
+  },
+  "410": {
+    "legacy": "410",
+    "1.13": "715",
+    "1.13.2": "720",
+    "1.14": "785",
+    "1.15": "786",
+    "1.16": "853",
+    "1.16.2": "854",
+    "1.17": "966"
+  },
+  "411": {
+    "legacy": "411",
+    "1.13": "716",
+    "1.13.2": "721",
+    "1.14": "786",
+    "1.15": "787",
+    "1.16": "854",
+    "1.16.2": "855",
+    "1.17": "967"
+  },
+  "412": {
+    "legacy": "412",
+    "1.13": "717",
+    "1.13.2": "722",
+    "1.14": "787",
+    "1.15": "788",
+    "1.16": "855",
+    "1.16.2": "856",
+    "1.17": "968"
+  },
+  "413": {
+    "legacy": "413",
+    "1.13": "718",
+    "1.13.2": "723",
+    "1.14": "788",
+    "1.15": "789",
+    "1.16": "856",
+    "1.16.2": "857",
+    "1.17": "969"
+  },
+  "414": {
+    "legacy": "414",
+    "1.13": "719",
+    "1.13.2": "724",
+    "1.14": "789",
+    "1.15": "790",
+    "1.16": "857",
+    "1.16.2": "858",
+    "1.17": "970"
+  },
+  "415": {
+    "legacy": "415",
+    "1.13": "720",
+    "1.13.2": "725",
+    "1.14": "790",
+    "1.15": "791",
+    "1.16": "858",
+    "1.16.2": "859",
+    "1.17": "971"
+  },
+  "416": {
+    "legacy": "416",
+    "1.13": "721",
+    "1.13.2": "726",
+    "1.14": "791",
+    "1.15": "792",
+    "1.16": "859",
+    "1.16.2": "860",
+    "1.17": "972"
+  },
+  "417": {
+    "legacy": "417",
+    "1.13": "722",
+    "1.13.2": "727",
+    "1.14": "792",
+    "1.15": "793",
+    "1.16": "860",
+    "1.16.2": "861",
+    "1.17": "973"
+  },
+  "418": {
+    "legacy": "418",
+    "1.13": "723",
+    "1.13.2": "728",
+    "1.14": "793",
+    "1.15": "794",
+    "1.16": "861",
+    "1.16.2": "862",
+    "1.17": "974"
+  },
+  "419": {
+    "legacy": "419",
+    "1.13": "724",
+    "1.13.2": "729",
+    "1.14": "794",
+    "1.15": "795",
+    "1.16": "862",
+    "1.16.2": "863",
+    "1.17": "975"
+  },
+  "420": {
+    "legacy": "420",
+    "1.13": "725",
+    "1.13.2": "730",
+    "1.14": "796",
+    "1.15": "797",
+    "1.16": "864",
+    "1.16.2": "865",
+    "1.17": "977"
+  },
+  "421": {
+    "legacy": "421",
+    "1.13": "726",
+    "1.13.2": "731",
+    "1.14": "797",
+    "1.15": "798",
+    "1.16": "865",
+    "1.16.2": "866",
+    "1.17": "978"
+  },
+  "422": {
+    "legacy": "422",
+    "1.13": "727",
+    "1.13.2": "732",
+    "1.14": "798",
+    "1.15": "799",
+    "1.16": "866",
+    "1.16.2": "867",
+    "1.17": "979"
+  },
+  "423": {
+    "legacy": "423",
+    "1.13": "728",
+    "1.13.2": "733",
+    "1.14": "799",
+    "1.15": "800",
+    "1.16": "867",
+    "1.16.2": "868",
+    "1.17": "980"
+  },
+  "424": {
+    "legacy": "424",
+    "1.13": "729",
+    "1.13.2": "734",
+    "1.14": "800",
+    "1.15": "801",
+    "1.16": "868",
+    "1.16.2": "869",
+    "1.17": "981"
+  },
+  "425": {
+    "legacy": "425",
+    "1.13": "730",
+    "1.13.2": "735",
+    "1.14": "801",
+    "1.15": "802",
+    "1.16": "869",
+    "1.16.2": "870",
+    "1.17": "982"
+  },
+  "427": {
+    "legacy": "427",
+    "1.13": "457",
+    "1.13.2": "462",
+    "1.14": "508",
+    "1.15": "508",
+    "1.16": "559",
+    "1.16.2": "559",
+    "1.17": "633"
+  },
+  "428": {
+    "legacy": "428",
+    "1.13": "458",
+    "1.13.2": "463",
+    "1.14": "509",
+    "1.15": "509",
+    "1.16": "560",
+    "1.16.2": "560",
+    "1.17": "634"
+  },
+  "429": {
+    "legacy": "429",
+    "1.13": "459",
+    "1.13.2": "464",
+    "1.14": "510",
+    "1.15": "510",
+    "1.16": "561",
+    "1.16.2": "561",
+    "1.17": "635"
+  },
+  "430": {
+    "legacy": "430",
+    "1.13": "460",
+    "1.13.2": "465",
+    "1.14": "511",
+    "1.15": "511",
+    "1.16": "562",
+    "1.16.2": "562",
+    "1.17": "636"
+  },
+  "431": {
+    "legacy": "431",
+    "1.13": "461",
+    "1.13.2": "466",
+    "1.14": "512",
+    "1.15": "512",
+    "1.16": "563",
+    "1.16.2": "563",
+    "1.17": "637"
+  },
+  "2256": {
+    "legacy": "2256",
+    "1.13": "769",
+    "1.13.2": "774",
+    "1.14": "840",
+    "1.15": "841",
+    "1.16": "908",
+    "1.16.2": "909",
+    "1.17": "1015"
+  },
+  "2257": {
+    "legacy": "2257",
+    "1.13": "770",
+    "1.13.2": "775",
+    "1.14": "841",
+    "1.15": "842",
+    "1.16": "909",
+    "1.16.2": "910",
+    "1.17": "1016"
+  },
+  "2258": {
+    "legacy": "2258",
+    "1.13": "771",
+    "1.13.2": "776",
+    "1.14": "842",
+    "1.15": "843",
+    "1.16": "910",
+    "1.16.2": "911",
+    "1.17": "1017"
+  },
+  "2259": {
+    "legacy": "2259",
+    "1.13": "772",
+    "1.13.2": "777",
+    "1.14": "843",
+    "1.15": "844",
+    "1.16": "911",
+    "1.16.2": "912",
+    "1.17": "1018"
+  },
+  "2260": {
+    "legacy": "2260",
+    "1.13": "773",
+    "1.13.2": "778",
+    "1.14": "844",
+    "1.15": "845",
+    "1.16": "912",
+    "1.16.2": "913",
+    "1.17": "1019"
+  },
+  "2261": {
+    "legacy": "2261",
+    "1.13": "774",
+    "1.13.2": "779",
+    "1.14": "845",
+    "1.15": "846",
+    "1.16": "913",
+    "1.16.2": "914",
+    "1.17": "1020"
+  },
+  "2262": {
+    "legacy": "2262",
+    "1.13": "775",
+    "1.13.2": "780",
+    "1.14": "846",
+    "1.15": "847",
+    "1.16": "914",
+    "1.16.2": "915",
+    "1.17": "1021"
+  },
+  "2263": {
+    "legacy": "2263",
+    "1.13": "776",
+    "1.13.2": "781",
+    "1.14": "847",
+    "1.15": "848",
+    "1.16": "915",
+    "1.16.2": "916",
+    "1.17": "1022"
+  },
+  "2264": {
+    "legacy": "2264",
+    "1.13": "777",
+    "1.13.2": "782",
+    "1.14": "848",
+    "1.15": "849",
+    "1.16": "916",
+    "1.16.2": "917",
+    "1.17": "1023"
+  },
+  "2265": {
+    "legacy": "2265",
+    "1.13": "778",
+    "1.13.2": "783",
+    "1.14": "849",
+    "1.15": "850",
+    "1.16": "917",
+    "1.16.2": "918",
+    "1.17": "1024"
+  },
+  "2266": {
+    "legacy": "2266",
+    "1.13": "779",
+    "1.13.2": "784",
+    "1.14": "850",
+    "1.15": "851",
+    "1.16": "918",
+    "1.16.2": "919",
+    "1.17": "1025"
+  },
+  "2267": {
+    "legacy": "2267",
+    "1.13": "780",
+    "1.13.2": "785",
+    "1.14": "851",
+    "1.15": "852",
+    "1.16": "919",
+    "1.16.2": "920",
+    "1.17": "1026"
+  }
+}
\ No newline at end of file
-- 
2.24.1.windows.2

