From 66b37b548fa8648cbba843508a225998ba6cbebb Mon Sep 17 00:00:00 2001
From: mdxd44 <mdxd44@ely.su>
Date: Mon, 7 Jun 2021 04:45:40 +0900
Subject: [PATCH] Move Messages Section To ElytraProxy Config


diff --git a/config/checkstyle/checkstyle.xml b/config/checkstyle/checkstyle.xml
index 083337a8..76a9665e 100644
--- a/config/checkstyle/checkstyle.xml
+++ b/config/checkstyle/checkstyle.xml
@@ -185,10 +185,12 @@
       <property name="lineWrappingIndentation" value="4"/>
       <property name="arrayInitIndent" value="2"/>
     </module>
+    <!--
     <module name="AbbreviationAsWordInName">
       <property name="ignoreFinal" value="false"/>
       <property name="allowedAbbreviationLength" value="1"/>
     </module>
+    -->
     <module name="OverloadMethodsDeclarationOrder"/>
     <module name="VariableDeclarationUsageDistance"/>
     <module name="CustomImportOrder">
@@ -241,7 +243,6 @@
       <property name="allowedAnnotations" value="Override, Test"/>
       <property name="allowThrowsTagsForSubclasses" value="true"/>
     </module>
-    -->
     <module name="MethodName">
       <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
       <message key="name.invalidPattern"
@@ -250,6 +251,7 @@
     <module name="SingleLineJavadoc">
       <property name="ignoreInlineTags" value="false"/>
     </module>
+    -->
     <module name="EmptyCatchBlock">
       <property name="exceptionVariableName" value="expected"/>
     </module>
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java
index b4a5a213..deeb16fa 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java
@@ -18,13 +18,25 @@
 package com.velocitypowered.proxy.command.builtin;
 
 import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.TranslatableComponent;
-import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import ru.elytrium.elytraproxy.config.Settings;
 
 public class CommandMessages {
 
-  public static final TranslatableComponent PLAYERS_ONLY = Component.translatable(
-      "velocity.command.players-only", NamedTextColor.RED);
-  public static final TranslatableComponent SERVER_DOES_NOT_EXIST = Component.translatable(
-      "velocity.command.server-does-not-exist", NamedTextColor.RED);
+  public static final Component PLAYERS_ONLY = LegacyComponentSerializer
+          .legacyAmpersand()
+          .deserialize((
+                  Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                  + Settings.IMP.MESSAGES.VELOCITY.COMMAND.PLAYERS_ONLY)
+                          .replace("%nl%", "\n"));
+
+  public static Component SERVER_DOES_NOT_EXIST(String serverName) {
+    return LegacyComponentSerializer
+            .legacyAmpersand()
+            .deserialize((
+                    Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                    + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_DOES_NOT_EXIST)
+                            .replace("%nl%", "\n")
+                            .replace("{0}", serverName));
+  }
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java
index 1e0c6a3f..b2b9d87b 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java
@@ -38,6 +38,8 @@ import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.TextComponent;
 import net.kyori.adventure.text.TranslatableComponent;
 import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import ru.elytrium.elytraproxy.config.Settings;
 
 public class GlistCommand {
 
@@ -78,7 +80,12 @@ public class GlistCommand {
     final CommandSource source = context.getSource();
     sendTotalProxyCount(source);
     source.sendMessage(Identity.nil(),
-        Component.translatable("velocity.command.glist-view-all", NamedTextColor.YELLOW));
+            LegacyComponentSerializer
+                    .legacyAmpersand()
+                    .deserialize((
+                            Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                            + Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_VIEW_ALL)
+                                    .replace("%nl%", "\n")));
     return 1;
   }
 
@@ -94,7 +101,7 @@ public class GlistCommand {
       Optional<RegisteredServer> registeredServer = server.getServer(serverName);
       if (!registeredServer.isPresent()) {
         source.sendMessage(Identity.nil(),
-            CommandMessages.SERVER_DOES_NOT_EXIST.args(Component.text(serverName)));
+            CommandMessages.SERVER_DOES_NOT_EXIST(serverName));
         return -1;
       }
       sendServerPlayers(source, registeredServer.get(), false);
@@ -103,12 +110,23 @@ public class GlistCommand {
   }
 
   private void sendTotalProxyCount(CommandSource target) {
-    int online = server.getPlayerCount();
-    TranslatableComponent msg = online == 1
-        ? Component.translatable("velocity.command.glist-player-singular")
-        : Component.translatable("velocity.command.glist-player-plural");
-    target.sendMessage(msg.color(NamedTextColor.YELLOW)
-        .args(Component.text(Integer.toString(online), NamedTextColor.GREEN)));
+    int online = server.getAllPlayers().size();
+    Component msg = online == 1
+            ? LegacyComponentSerializer
+                    .legacyAmpersand()
+                    .deserialize((
+                            Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                            + Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_PLAYER_SINGULAR)
+                                    .replace("%nl%", "\n")
+                                    .replace("{0}", Integer.toString(online)))
+            : LegacyComponentSerializer
+                    .legacyAmpersand()
+                    .deserialize((
+                            Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                            + Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_PLAYER_PLURAL)
+                                    .replace("%nl%", "\n")
+                                    .replace("{0}", Integer.toString(online)));
+    target.sendMessage(msg);
   }
 
   private void sendServerPlayers(CommandSource target, RegisteredServer server, boolean fromAll) {
@@ -117,11 +135,13 @@ public class GlistCommand {
       return;
     }
 
-    TextComponent.Builder builder = Component.text()
-        .append(Component.text("[" + server.getServerInfo().getName() + "] ",
-            NamedTextColor.DARK_AQUA))
-        .append(Component.text("(" + onServer.size() + ")", NamedTextColor.GRAY))
-        .append(Component.text(": "))
+    TextComponent.Builder builder = Component.text().append(LegacyComponentSerializer
+                            .legacyAmpersand()
+                            .deserialize((
+                                    Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_FORMAT_VIEW_ALL)
+                                            .replace("%nl%", "\n")
+                                            .replace("{0}", server.getServerInfo().getName())
+                                            .replace("{1}", Integer.toString(onServer.size()))))
         .resetStyle();
 
     for (int i = 0; i < onServer.size(); i++) {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java
index 4b0b1154..b666855f 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java
@@ -37,6 +37,9 @@ import net.kyori.adventure.text.TextComponent;
 import net.kyori.adventure.text.TranslatableComponent;
 import net.kyori.adventure.text.event.ClickEvent;
 import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import net.kyori.adventure.text.serializer.plain.PlainComponentSerializer;
+import ru.elytrium.elytraproxy.config.Settings;
 
 public class ServerCommand implements SimpleCommand {
 
@@ -63,8 +66,7 @@ public class ServerCommand implements SimpleCommand {
       String serverName = args[0];
       Optional<RegisteredServer> toConnect = server.getServer(serverName);
       if (!toConnect.isPresent()) {
-        player.sendMessage(Identity.nil(), CommandMessages.SERVER_DOES_NOT_EXIST
-            .args(Component.text(serverName)));
+        player.sendMessage(Identity.nil(), CommandMessages.SERVER_DOES_NOT_EXIST(serverName));
         return;
       }
 
@@ -77,23 +79,35 @@ public class ServerCommand implements SimpleCommand {
   private void outputServerInformation(Player executor) {
     String currentServer = executor.getCurrentServer().map(ServerConnection::getServerInfo)
         .map(ServerInfo::getName).orElse("<unknown>");
-    executor.sendMessage(Identity.nil(), Component.translatable(
-        "velocity.command.server-current-server",
-        NamedTextColor.YELLOW,
-        Component.text(currentServer)));
+    executor.sendMessage(Identity.nil(),
+            LegacyComponentSerializer
+                    .legacyAmpersand()
+                    .deserialize((
+                            Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                            + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_CURRENT_SERVER)
+                                    .replace("%nl%", "\n")
+                                    .replace("{0}", currentServer)));
 
     List<RegisteredServer> servers = BuiltinCommandUtil.sortedServerList(server);
     if (servers.size() > MAX_SERVERS_TO_LIST) {
-      executor.sendMessage(Identity.nil(), Component.translatable(
-          "velocity.command.server-too-many", NamedTextColor.RED));
+      executor.sendMessage(Identity.nil(),
+              LegacyComponentSerializer
+                      .legacyAmpersand()
+                      .deserialize((
+                              Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                              + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOO_MANY)
+                                      .replace("%nl%", "\n")));
       return;
     }
 
     // Assemble the list of servers as components
     TextComponent.Builder serverListBuilder = Component.text()
-        .append(Component.translatable("velocity.command.server-available",
-            NamedTextColor.YELLOW))
-        .append(Component.space());
+            .append(LegacyComponentSerializer
+                    .legacyAmpersand()
+                    .deserialize((
+                            Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                            + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_AVAILABLE)
+                                    .replace("%nl%", "\n")));
     for (int i = 0; i < servers.size(); i++) {
       RegisteredServer rs = servers.get(i);
       serverListBuilder.append(formatServerComponent(currentServer, rs));
@@ -110,28 +124,57 @@ public class ServerCommand implements SimpleCommand {
     TextComponent serverTextComponent = Component.text(serverInfo.getName());
 
     int connectedPlayers = server.getPlayersConnected().size();
-    TranslatableComponent playersTextComponent;
+    Component playersTextComponent;
     if (connectedPlayers == 1) {
-      playersTextComponent = Component.translatable("velocity.command.server-tooltip-player-online");
+      playersTextComponent = LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                      Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                      + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_PLAYER_ONLINE)
+                              .replace("%nl%", "\n")
+                              .replace("{0}", String.valueOf(connectedPlayers)));
     } else {
-      playersTextComponent = Component.translatable("velocity.command.server-tooltip-players-online");
+      playersTextComponent = LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                      Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                      + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_PLAYERS_ONLINE)
+                              .replace("%nl%", "\n")
+                              .replace("{0}", String.valueOf(connectedPlayers)));
     }
-    playersTextComponent = playersTextComponent.args(Component.text(connectedPlayers));
+
     if (serverInfo.getName().equals(currentPlayerServer)) {
       serverTextComponent = serverTextComponent.color(NamedTextColor.GREEN)
           .hoverEvent(
               showText(
-                  Component.translatable("velocity.command.server-tooltip-current-server")
-                      .append(Component.newline())
-                      .append(playersTextComponent))
+                  LegacyComponentSerializer
+                      .legacyAmpersand()
+                      .deserialize((
+                          Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                          + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_CURRENT_SERVER)
+                              .replace("%nl%", "\n")
+                              .replace("{0}",
+                                      LegacyComponentSerializer
+                                              .legacySection()
+                                              .serialize(
+                                                      playersTextComponent))))
           );
     } else {
       serverTextComponent = serverTextComponent.color(NamedTextColor.GRAY)
           .clickEvent(ClickEvent.runCommand("/server " + serverInfo.getName()))
           .hoverEvent(
-              showText(Component.translatable("velocity.command.server-tooltip-offer-connect-server")
-                  .append(Component.newline())
-                  .append(playersTextComponent))
+              showText(
+                LegacyComponentSerializer
+                  .legacyAmpersand()
+                  .deserialize((
+                    Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                    + Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_OFFER_CONNECT_SERVER)
+                      .replace("%nl%", "\n")
+                      .replace("{0}",
+                              LegacyComponentSerializer
+                                      .legacySection()
+                                      .serialize(
+                                              playersTextComponent))))
           );
     }
     return serverTextComponent;
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java b/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
index 034e0b3a..58794cf1 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
@@ -457,7 +457,7 @@ public class VelocityConfiguration implements ProxyConfig {
         PingPassthroughMode.DISABLED);
 
     String bind = config.getOrElse("bind", "0.0.0.0:25577");
-    String motd = config.getOrElse("motd", "&#09add3A Velocity Server");
+    String motd = config.getOrElse("motd", "&#09add3A ElytraProxy Server");
     int maxPlayers = config.getIntOrElse("show-max-players", 500);
     Boolean onlineMode = config.getOrElse("online-mode", true);
     Boolean announceForge = config.getOrElse("announce-forge", true);
@@ -641,7 +641,7 @@ public class VelocityConfiguration implements ProxyConfig {
 
     private Advanced(CommentedConfig config) {
       if (config != null) {
-        this.compressionThreshold = config.getIntOrElse("compression-threshold", 256);
+        this.compressionThreshold = config.getIntOrElse("compression-threshold", 512);
         this.compressionLevel = config.getIntOrElse("compression-level", -1);
         this.loginRatelimit = config.getIntOrElse("login-ratelimit", 3000);
         this.connectionTimeout = config.getIntOrElse("connection-timeout", 5000);
@@ -653,7 +653,7 @@ public class VelocityConfiguration implements ProxyConfig {
         }
         this.tcpFastOpen = config.getOrElse("tcp-fast-open", false);
         this.bungeePluginMessageChannel = config.getOrElse("bungee-plugin-message-channel", true);
-        this.showPingRequests = config.getOrElse("show-ping-requests", false);
+        this.showPingRequests = config.getOrElse("show-ping-requests", true);
         this.failoverOnUnexpectedServerDisconnect = config
             .getOrElse("failover-on-unexpected-server-disconnect", true);
         this.announceProxyCommands = config.getOrElse("announce-proxy-commands", true);
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
index fa51244f..e9d64d40 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
@@ -37,7 +37,6 @@ import com.velocitypowered.proxy.VelocityServer;
 import com.velocitypowered.proxy.connection.client.HandshakeSessionHandler;
 import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
 import com.velocitypowered.proxy.connection.client.StatusSessionHandler;
-import com.velocitypowered.proxy.network.Connections;
 import com.velocitypowered.proxy.protocol.MinecraftPacket;
 import com.velocitypowered.proxy.protocol.StateRegistry;
 import com.velocitypowered.proxy.protocol.VelocityConnectionEvent;
@@ -141,6 +140,7 @@ public class MinecraftConnection extends ChannelInboundHandlerAdapter {
 
       if (msg instanceof MinecraftPacket) {
         // ElytraProxy Start
+        // TODO: FIX
         if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.ENABLE) {
           InetSocketAddress adr = (InetSocketAddress) ctx.channel().localAddress();
           InetSocketAddress adr1 = (InetSocketAddress) ctx.channel().remoteAddress();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java
index 9f408310..227ea644 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java
@@ -46,11 +46,16 @@ import javax.crypto.SecretKey;
 import javax.crypto.spec.SecretKeySpec;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.TextComponent;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import ru.elytrium.elytraproxy.config.Settings;
 
 public class LoginSessionHandler implements MinecraftSessionHandler {
 
-  private static final Component MODERN_IP_FORWARDING_FAILURE = Component
-      .translatable("velocity.error.modern-forwarding-failed");
+  private static final TextComponent MODERN_IP_FORWARDING_FAILURE = LegacyComponentSerializer
+          .legacyAmpersand()
+          .deserialize((
+                  Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_FAILED)
+                          .replace("%nl%", "\n"));
 
   private final VelocityServer server;
   private final VelocityServerConnection serverConn;
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
index c07ac639..0ebf62e5 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
@@ -69,8 +69,6 @@ import java.util.Queue;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import net.kyori.adventure.identity.Identity;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -162,25 +160,39 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
               event.getResult()))
           .whenComplete((ignored, throwable) -> {
             if (Settings.IMP.MAIN_SETTINGS.ENABLE_COMMAND_SPY_IN_CHAT) {
-              for (ConnectedPlayer player : VelocityServer.getConnectionsByUuid().values()) {
-                if (player.hasPermission("elytraproxy.commandspy")) {
-                  player.sendMessage(LegacyComponentSerializer
-                          .legacyAmpersand()
-                          .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_FORMAT
-                                  .replace("{cmd}", originalCommand)
-                                  .replace("{player}", player.getUsername())));
+              for (ConnectedPlayer player1 : VelocityServer.getConnectionsByUuid().values()) {
+                if (player1.hasPermission("elytraproxy.commandspy")) {
+                  if (!player1.getUsername().equalsIgnoreCase(player.getUsername())) {
+                    player1.sendMessage(LegacyComponentSerializer
+                            .legacyAmpersand()
+                            .deserialize(
+                                    Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_FORMAT
+                                            .replace("%nl%", "\n")
+                                            .replace("{0}", player.getUsername())
+                                            .replace("{1}", "/" + originalCommand)));
+                  }
                 }
               }
             }
             if (server.getConfiguration().isLogCommandExecutions()) {
-              logger.info("{} -> executed command /{}", player, originalCommand);
+              logger.info(
+                      Settings.IMP.MESSAGES.ELYTRAPROXY.CONSOLE_LOG_COMMAND_EXECUTIONS_FORMAT
+                              .replace("%nl%", "\n")
+                              .replace("&", "§")
+                              .replace("{0}", String.valueOf(player))
+                              .replace("{1}", "/" + originalCommand));
             }
           })
           .exceptionally(e -> {
             logger.info("Exception occurred while running command for {}",
                 player.getUsername(), e);
-            player.sendMessage(Component.translatable("velocity.command.generic-error",
-                NamedTextColor.RED));
+            player.sendMessage(Identity.nil(),
+                    LegacyComponentSerializer
+                            .legacyAmpersand()
+                            .deserialize((
+                                    Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                                    + Settings.IMP.MESSAGES.VELOCITY.COMMAND.GENERIC_ERROR)
+                                            .replace("%nl%", "\n")));
             return null;
           });
     } else {
@@ -339,8 +351,12 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
 
   @Override
   public void exception(Throwable throwable) {
-    player.disconnect(Component.translatable("velocity.error.player-connection-error",
-        NamedTextColor.RED));
+    player.disconnect(
+        LegacyComponentSerializer
+            .legacyAmpersand()
+            .deserialize((
+                    Settings.IMP.MESSAGES.VELOCITY.ERROR.PLAYER_CONNECTION_ERROR)
+                            .replace("%nl%", "\n")));
   }
 
   @Override
@@ -597,7 +613,7 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
         }, player.getConnection().eventLoop())
         .exceptionally((ex) -> {
           logger.error(
-              "Exception while finishing regular tab completion, with request {} and response{}",
+              "Exception while finishing regular tab completion, with request {} and response {}",
               request, response, ex);
           return null;
         });
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
index 10d05c8b..68ac3abb 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
@@ -48,7 +48,6 @@ import com.velocitypowered.api.proxy.server.RegisteredServer;
 import com.velocitypowered.api.util.GameProfile;
 import com.velocitypowered.api.util.ModInfo;
 import com.velocitypowered.proxy.VelocityServer;
-import com.velocitypowered.proxy.config.VelocityConfiguration;
 import com.velocitypowered.proxy.connection.MinecraftConnection;
 import com.velocitypowered.proxy.connection.MinecraftConnectionAssociation;
 import com.velocitypowered.proxy.connection.backend.VelocityServerConnection;
@@ -93,7 +92,6 @@ import net.kyori.adventure.permission.PermissionChecker;
 import net.kyori.adventure.pointer.Pointers;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.TranslatableComponent;
-import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import net.kyori.adventure.text.serializer.plain.PlainComponentSerializer;
@@ -106,12 +104,11 @@ import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.jetbrains.annotations.NotNull;
+import ru.elytrium.elytraproxy.config.Settings;
 
 public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
 
   private static final int MAX_PLUGIN_CHANNELS = 1024;
-  private static final PlainComponentSerializer PASS_THRU_TRANSLATE = new PlainComponentSerializer(
-      c -> "", TranslatableComponent::key);
   static final PermissionProvider DEFAULT_PERMISSIONS = s -> PermissionFunction.ALWAYS_UNDEFINED;
 
   private static final Logger logger = LogManager.getLogger(ConnectedPlayer.class);
@@ -500,15 +497,23 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
 
     Component friendlyError;
     if (connectedServer != null && connectedServer.getServerInfo().equals(server.getServerInfo())) {
-      friendlyError = Component.translatable("velocity.error.connected-server-error",
-          Component.text(server.getServerInfo().getName()));
+      friendlyError = LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                      Settings.IMP.MESSAGES.VELOCITY.ERROR.CONNECTED_SERVER_ERROR)
+                              .replace("%nl%", "\n")
+                              .replace("{0}", server.getServerInfo().getName()));
     } else {
       logger.error("{}: unable to connect to server {}", this, server.getServerInfo().getName(),
           wrapped);
-      friendlyError = Component.translatable("velocity.error.connecting-server-error",
-          Component.text(server.getServerInfo().getName()));
+      friendlyError = LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize((
+                      Settings.IMP.MESSAGES.VELOCITY.ERROR.CONNECTING_SERVER_ERROR)
+                              .replace("%nl%", "\n")
+                              .replace("{0}", server.getServerInfo().getName()));
     }
-    handleConnectionException(server, null, friendlyError.color(NamedTextColor.RED), safe);
+    handleConnectionException(server, null, friendlyError, safe);
   }
 
   /**
@@ -525,21 +530,42 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
     }
 
     Component disconnectReason = GsonComponentSerializer.gson().deserialize(disconnect.getReason());
-    String plainTextReason = PASS_THRU_TRANSLATE.serialize(disconnectReason);
     if (connectedServer != null && connectedServer.getServerInfo().equals(server.getServerInfo())) {
       logger.info("{}: kicked from server {}: {}", this, server.getServerInfo().getName(),
-          plainTextReason);
+              LegacyComponentSerializer
+                      .legacySection()
+                      .serialize(disconnectReason));
+      // TODO: rewrite this shit
       handleConnectionException(server, disconnectReason,
-          Component.translatable("velocity.error.moved-to-new-server", NamedTextColor.RED,
-              Component.text(server.getServerInfo().getName()),
-              disconnectReason), safe);
+              LegacyComponentSerializer
+                      .legacyAmpersand()
+                      .deserialize((
+                              Settings.IMP.MESSAGES.VELOCITY.ERROR.MOVED_TO_NEW_SERVER)
+                                      .replace("%nl%", "\n")
+                                      .replace("{0}", server.getServerInfo().getName())
+                                      .replace("{1}",
+                                              LegacyComponentSerializer
+                                                      .legacySection()
+                                                      .serialize(
+                                                              disconnectReason))), safe);
     } else {
       logger.error("{}: disconnected while connecting to {}: {}", this,
-          server.getServerInfo().getName(), plainTextReason);
+          server.getServerInfo().getName(),
+              LegacyComponentSerializer
+                      .legacySection()
+                      .serialize(disconnectReason));
       handleConnectionException(server, disconnectReason,
-          Component.translatable("velocity.error.cant-connect", NamedTextColor.RED,
-              Component.text(server.getServerInfo().getName()),
-              disconnectReason), safe);
+              LegacyComponentSerializer
+                      .legacyAmpersand()
+                      .deserialize((
+                              Settings.IMP.MESSAGES.VELOCITY.ERROR.CANT_CONNECT)
+                                      .replace("%nl%", "\n")
+                                      .replace("{0}", server.getServerInfo().getName())
+                                      .replace("{1}",
+                                              LegacyComponentSerializer
+                                                      .legacySection()
+                                                      .serialize(
+                                                              disconnectReason))), safe);
     }
   }
 
@@ -627,14 +653,19 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
                           getProtocolVersion()), ((Impl) status).isSafe());
                       break;
                     case SUCCESS:
-                      Component requestedMessage = res.getMessageComponent();
-                      if (requestedMessage == null) {
-                        requestedMessage = Component.translatable("velocity.error.moved-to-new-server",
-                            NamedTextColor.RED,
-                            Component.text(originalEvent.getServer().getServerInfo().getName()),
-                            friendlyReason);
-                      }
-                      sendMessage(requestedMessage);
+                      sendMessage(Identity.nil(),
+                            LegacyComponentSerializer
+                                  .legacyAmpersand()
+                                  .deserialize((
+                                        Settings.IMP.MESSAGES.VELOCITY.ERROR.MOVED_TO_NEW_SERVER)
+                                              .replace("%nl%","\n")
+                                              .replace("{0}", originalEvent.getServer()
+                                                            .getServerInfo().getName())
+                                              .replace("{1}",
+                                                      LegacyComponentSerializer
+                                                              .legacySection()
+                                                              .serialize(
+                                                                      friendlyReason))));
                       break;
                     default:
                       // The only remaining value is successful (no need to do anything!)
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java
index 12b6f38f..ed8765e1 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java
@@ -43,9 +43,11 @@ import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.TextComponent;
 import net.kyori.adventure.text.TranslatableComponent;
 import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.checkerframework.checker.nullness.qual.Nullable;
+import ru.elytrium.elytraproxy.config.Settings;
 
 public class HandshakeSessionHandler implements MinecraftSessionHandler {
 
@@ -71,10 +73,11 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
 
   @Override
   public boolean handle(LegacyHandshake packet) {
-    connection.closeWith(LegacyDisconnect.from(Component.text(
-        "Your client is extremely old. Please update to a newer version of Minecraft.",
-        NamedTextColor.RED)
-    ));
+    connection.closeWith(LegacyDisconnect
+        .from(Component.text(
+                "Your client is extremely old. Please update to a newer version of Minecraft.",
+                NamedTextColor.RED)
+        ));
     return true;
   }
 
@@ -129,7 +132,12 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
     /*
     InetAddress address = ((InetSocketAddress) connection.getRemoteAddress()).getAddress();
     if (!server.getIpAttemptLimiter().attempt(address)) {
-      ic.disconnectQuietly(Component.translatable("velocity.error.logging-in-too-fast"));
+      ic.disconnectQuietly(
+              LegacyComponentSerializer
+                      .legacyAmpersand()
+                      .deserialize((
+                              Settings.IMP.MESSAGES.VELOCITY.ERROR.LOGGING_IN_TOO_FAST)
+                                      .replace("%nl%", "\n")));
       return;
     }
     */
@@ -141,8 +149,12 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
     // and lower, otherwise IP information will never get forwarded.
     if (server.getConfiguration().getPlayerInfoForwardingMode() == PlayerInfoForwarding.MODERN
         && handshake.getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_13) < 0) {
-      ic.disconnectQuietly(Component.translatable(
-          "velocity.error.modern-forwarding-needs-new-client"));
+      ic.disconnectQuietly(
+             LegacyComponentSerializer
+                    .legacyAmpersand()
+                    .deserialize((
+                           Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_NEEDS_NEW_CLIENT)
+                                  .replace("%nl%", "\n")));
       return;
     }
 
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
index 2afb43da..f59d1d34 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
@@ -64,6 +64,7 @@ import java.util.concurrent.ThreadLocalRandom;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.translation.GlobalTranslator;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.asynchttpclient.ListenableFuture;
@@ -151,8 +152,12 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
                 GameProfile.class), true);
           } else if (profileResponse.getStatusCode() == 204) {
             // Apparently an offline-mode user logged onto this online-mode proxy.
-            inbound.disconnect(Component.translatable("velocity.error.online-mode-only",
-                NamedTextColor.RED));
+            inbound.disconnect(
+                    LegacyComponentSerializer
+                            .legacyAmpersand()
+                            .deserialize((
+                                    Settings.IMP.MESSAGES.VELOCITY.ERROR.ONLINE_MODE_ONLY)
+                                            .replace("%nl%", "\n")));
           } else {
             // Something else went wrong
             logger.error(
@@ -241,8 +246,12 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
           mcConnection, inbound.getVirtualHost().orElse(null), onlineMode);
       this.connectedPlayer = player;
       if (!server.canRegisterConnection(player)) {
-        player.disconnect0(Component.translatable("velocity.error.already-connected-proxy",
-            NamedTextColor.RED), true);
+        player.disconnect0(
+                LegacyComponentSerializer
+                        .legacyAmpersand()
+                        .deserialize((
+                                Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY)
+                                        .replace("%nl%", "\n")), true);
         return;
       }
       /*
@@ -264,8 +273,12 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
       // ElytraProxy Start - Init antibot & protocol blocker
       if (Settings.IMP.MAIN_SETTINGS.BANNED_PROTOCOLS
               .contains(mcConnection.getProtocolVersion().getProtocol())) {
-        player.disconnect0(Component.text(
-                Settings.IMP.MESSAGES.ELYTRAPROXY.PROTOCOL_BLOCKED), true);
+        player.disconnect0(
+                LegacyComponentSerializer
+                        .legacyAmpersand()
+                        .deserialize((
+                                Settings.IMP.MESSAGES.ELYTRAPROXY.PROTOCOL_BLOCKED)
+                                        .replace("%nl%", "\n")), true);
         return;
       }
       if (Settings.IMP.ANTIBOT.ENABLE) {
@@ -287,13 +300,13 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
     if (Settings.IMP.ANTIBOT.BANNED_NICK_PATTERNS
               .stream().anyMatch(formattedNickname::contains)) {
       player.disconnect0(
-              Component.text(
-                      "§cВ вашем нике содержатся запрещённые фразы."
-                              + "\n§cЕсли вы считаете что это ошибка,"
-                              + " свяжитесь с администрацией. (ely.su/discord)"),
-              true
-      );
-      logger.info("Firewaled bot {}", player.getUsername());
+              LegacyComponentSerializer
+                      .legacyAmpersand()
+                      .deserialize((
+                              Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                              + Settings.IMP.MESSAGES.ELYTRAPROXY.NICK_BLOCKED)
+                                      .replace("%nl%", "\n")), true);
+      server.getElytraProxy().getLogger().info("Firewalled bot {}", player.getUsername());
     } else {
       //injectBotFilterOrFinishLogin(player);
 
@@ -369,8 +382,12 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
             player.disconnect0(reason.get(), true);
           } else {
             if (!server.registerConnection(player)) {
-              player.disconnect0(Component.translatable("velocity.error.already-connected-proxy"),
-                  true);
+              player.disconnect0(
+                      LegacyComponentSerializer
+                              .legacyAmpersand()
+                              .deserialize((
+                                      Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY)
+                                              .replace("%nl%", "\n")), true);
               return;
             }
 
@@ -399,8 +416,12 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
         .thenRunAsync(() -> {
           Optional<RegisteredServer> toTry = event.getInitialServer();
           if (!toTry.isPresent()) {
-            player.disconnect0(Component.translatable("velocity.error.no-available-servers",
-                NamedTextColor.RED), true);
+            player.disconnect0(
+                    LegacyComponentSerializer
+                            .legacyAmpersand()
+                            .deserialize((
+                                    Settings.IMP.MESSAGES.VELOCITY.ERROR.NO_AVAILABLE_SERVERS)
+                                            .replace("%nl%", "\n")), true);
             return;
           }
           player.createConnectionRequest(toTry.get()).fireAndForget();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionMessages.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionMessages.java
index 5e29672c..f38650b1 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionMessages.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionMessages.java
@@ -17,19 +17,27 @@
 
 package com.velocitypowered.proxy.connection.util;
 
-import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.TextComponent;
-import net.kyori.adventure.text.TranslatableComponent;
-import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import ru.elytrium.elytraproxy.config.Settings;
 
 public class ConnectionMessages {
 
-  public static final TranslatableComponent ALREADY_CONNECTED = Component
-      .translatable("velocity.error.already-connected", NamedTextColor.RED);
-  public static final TranslatableComponent IN_PROGRESS = Component
-      .translatable("velocity.error.already-connecting", NamedTextColor.RED);
-  public static final TranslatableComponent INTERNAL_SERVER_CONNECTION_ERROR = Component
-      .translatable("velocity.error.internal-server-connection-error", NamedTextColor.RED);
+  public static final TextComponent ALREADY_CONNECTED = LegacyComponentSerializer
+          .legacyAmpersand()
+          .deserialize((
+                  Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED)
+                          .replace("%nl%", "\n"));
+  public static final TextComponent IN_PROGRESS = LegacyComponentSerializer
+          .legacyAmpersand()
+          .deserialize((
+                  Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTING)
+                          .replace("%nl%", "\n"));
+  public static final TextComponent INTERNAL_SERVER_CONNECTION_ERROR = LegacyComponentSerializer
+          .legacyAmpersand()
+          .deserialize((
+                  Settings.IMP.MESSAGES.VELOCITY.ERROR.INTERNAL_SERVER_CONNECTION_ERROR)
+                          .replace("%nl%", "\n"));
 
   private ConnectionMessages() {
     throw new AssertionError();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/console/VelocityConsole.java b/proxy/src/main/java/com/velocitypowered/proxy/console/VelocityConsole.java
index fe38209d..f10b009d 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/console/VelocityConsole.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/console/VelocityConsole.java
@@ -31,6 +31,9 @@ import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.permission.PermissionChecker;
 import net.kyori.adventure.pointer.Pointers;
 import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import net.kyori.text.TextComponent;
+import net.kyori.text.format.TextColor;
 import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import net.kyori.adventure.translation.GlobalTranslator;
@@ -44,6 +47,7 @@ import org.jetbrains.annotations.NotNull;
 import org.jline.reader.Candidate;
 import org.jline.reader.LineReader;
 import org.jline.reader.LineReaderBuilder;
+import ru.elytrium.elytraproxy.config.Settings;
 
 public final class VelocityConsole extends SimpleTerminalConsole implements ConsoleCommandSource {
 
@@ -123,8 +127,13 @@ public final class VelocityConsole extends SimpleTerminalConsole implements Cons
   protected void runCommand(String command) {
     try {
       if (!this.server.getCommandManager().executeAsync(this, command).join()) {
-        sendMessage(Component.translatable("velocity.command.command-does-not-exist",
-            NamedTextColor.RED));
+        sendMessage(
+                LegacyComponentSerializer
+                        .legacyAmpersand()
+                        .deserialize((
+                                Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                                + Settings.IMP.MESSAGES.VELOCITY.COMMAND.COMMAND_DOES_NOT_EXIST)
+                                        .replace("%nl%", "\n")));
       }
     } catch (Exception e) {
       logger.error("An error occurred while running this command.", e);
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/ElytraProxy.java b/proxy/src/main/java/ru/elytrium/elytraproxy/ElytraProxy.java
index 337f03d8..b297f5d5 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/ElytraProxy.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/ElytraProxy.java
@@ -37,8 +37,7 @@ import java.nio.charset.StandardCharsets;
 
 import lombok.Getter;
 import net.kyori.adventure.identity.Identity;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import ru.elytrium.elytraproxy.botfilter.protocol.cache.netty.MultiplePreparedPacketsEncoder;
@@ -152,13 +151,22 @@ public class ElytraProxy {
   public void reload(CommandSource source) {
     try {
       new ElytraProxy(velocityServer);
-      source.sendMessage(Identity.nil(), Component.text(
-              "ElytraProxy reloaded.", NamedTextColor.GREEN));
+      source.sendMessage(Identity.nil(),
+              LegacyComponentSerializer
+                      .legacyAmpersand()
+                      .deserialize((
+                              Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                              + Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_SUCCESS)
+                                      .replace("%nl%", "\n")));
     } catch (Exception e) {
       logger.error("Unable to reload configuration", e);
-      source.sendMessage(Identity.nil(), Component.text(
-              "Unable to reload ElytraProxy. Check the console for more details.",
-              NamedTextColor.RED));
+      source.sendMessage(Identity.nil(),
+              LegacyComponentSerializer
+                      .legacyAmpersand()
+                      .deserialize((
+                              Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                              + Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_FAILURE)
+                                      .replace("%nl%", "\n")));
     }
   }
 
@@ -171,10 +179,12 @@ public class ElytraProxy {
       conn.setReadTimeout(1200);
       try (BufferedReader in = new BufferedReader(
               new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))) {
-        if (!in.readLine().trim().equalsIgnoreCase(Settings.IMP.VERSION)) {
-          logger.error("****************************************");
-          logger.warn("The new update was found, please update.");
-          logger.error("****************************************");
+        if (!Settings.IMP.VERSION.contains("-DEV")) {
+          if (!in.readLine().trim().equalsIgnoreCase(Settings.IMP.VERSION)) {
+            logger.error("****************************************");
+            logger.warn("The new update was found, please update.");
+            logger.error("****************************************");
+          }
         }
       }
     } catch (IOException ex) {
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/AlertCommand.java b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/AlertCommand.java
index 6b4b2be1..e5cd0435 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/AlertCommand.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/AlertCommand.java
@@ -47,19 +47,25 @@ public class AlertCommand implements SimpleCommand {
       source.sendMessage(
               LegacyComponentSerializer
                       .legacyAmpersand()
-                      .deserialize(prefix + Settings.IMP.MESSAGES.VELOCITY.ERROR.MESSAGE_NEEDED)
-      );
+                      .deserialize((
+                              prefix
+                              + Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_MESSAGE_NEEDED)
+                                      .replace("%nl%", "\n")));
     } else {
       String message = String.join(" ", args);
       Component component = LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.VELOCITY.INFO.ALERT_PREFIX + message);
+                      .legacyAmpersand()
+                      .deserialize((
+                              Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_PREFIX + message)
+                                      .replace("%nl%", "\n"));
       if (server.getAllPlayers().size() == 0) {
         source.sendMessage(
                 LegacyComponentSerializer
                         .legacyAmpersand()
-                        .deserialize(prefix + Settings.IMP.MESSAGES.VELOCITY.ERROR.SERVER_EMPTY)
-        );
+                        .deserialize((
+                                prefix
+                                + Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_SERVER_EMPTY)
+                                        .replace("%nl%", "\n")));
       } else if (server.getAllPlayers().size() >= 1) {
         if (!(source instanceof Player)) {
           source.sendMessage(component);
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/ElytraProxyCommand.java b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/ElytraProxyCommand.java
index 0d80ac09..013a3b29 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/ElytraProxyCommand.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/ElytraProxyCommand.java
@@ -31,10 +31,12 @@ import java.util.Map;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import ru.elytrium.elytraproxy.ElytraProxy;
+import ru.elytrium.elytraproxy.config.Settings;
 
 public class ElytraProxyCommand implements SimpleCommand {
 
@@ -63,8 +65,19 @@ public class ElytraProxyCommand implements SimpleCommand {
   }
 
   private void usage(CommandSource source) {
-    String commandText = "/elytraproxy <reload>";
-    source.sendMessage(Identity.nil(), Component.text(commandText, NamedTextColor.RED));
+    source.sendMessage(Identity.nil(), Component.text("§eThis server is using ElytraProxy"
+            + " that based on Velocity Proxy"));
+    source.sendMessage(Identity.nil(), Component.text("§eOriginal Velocity by astei"
+            + " and many-many contributors"));
+    source.sendMessage(Identity.nil(), Component.text("§eElytraProxy by Elytrium dev team"));
+    source.sendMessage(Identity.nil(), Component.text("§dMade With Love ❤"));
+    source.sendMessage(Identity.nil(), Component.text("§a"
+            + "https://github.com/Elytrium/ElytraProxy"));
+    if (source.hasPermission("elytraproxy.reload")) {
+      source.sendMessage(Identity.nil(), Component.text("§aCommands: "));
+      source.sendMessage(Identity.nil(), Component.text("§6/elytraproxy reload §7-§f"
+              + " reloads proxy server itself, without plugins"));
+    }
   }
 
   @Override
@@ -149,18 +162,31 @@ public class ElytraProxyCommand implements SimpleCommand {
     public void execute(CommandSource source, String @NonNull [] args) {
       try {
         if (server.reloadConfiguration()) {
-          source.sendMessage(Identity.nil(), Component.text(
-              "Configuration reloaded.", NamedTextColor.GREEN));
+          source.sendMessage(Identity.nil(),
+                  LegacyComponentSerializer
+                          .legacyAmpersand()
+                          .deserialize((
+                                  Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                                  + Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_SUCCESS)
+                                          .replace("%nl%", "\n")));
         } else {
-          source.sendMessage(Identity.nil(), Component.text(
-              "Unable to reload your configuration. Check the console for more details.",
-              NamedTextColor.RED));
+          source.sendMessage(Identity.nil(),
+                  LegacyComponentSerializer
+                          .legacyAmpersand()
+                          .deserialize((
+                                  Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                                  + Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE)
+                                          .replace("%nl%", "\n")));
         }
       } catch (Exception e) {
         logger.error("Unable to reload configuration", e);
-        source.sendMessage(Identity.nil(), Component.text(
-            "Unable to reload your configuration. Check the console for more details.",
-            NamedTextColor.RED));
+        source.sendMessage(Identity.nil(),
+                LegacyComponentSerializer
+                        .legacyAmpersand()
+                        .deserialize((
+                                Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX
+                                + Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE)
+                                        .replace("%nl%", "\n")));
       }
 
       elytraProxy.reload(source);
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/FindCommand.java b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/FindCommand.java
index 8dc457ad..1454ced2 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/FindCommand.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/FindCommand.java
@@ -28,6 +28,7 @@ import java.util.Optional;
 import java.util.stream.Collectors;
 
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import ru.elytrium.elytraproxy.config.Settings;
 
 public class FindCommand implements SimpleCommand {
 
@@ -63,29 +64,36 @@ public class FindCommand implements SimpleCommand {
     final String[] args = invocation.arguments();
 
     if (args.length == 0) {
-      source.sendMessage(LegacyComponentSerializer.legacySection().deserialize(
-              prefix
-                      + " §fУкажите ник игрока."));
+      source.sendMessage(
+              LegacyComponentSerializer
+                      .legacyAmpersand()
+                      .deserialize((
+                              prefix
+                              + Settings.IMP.MESSAGES.ELYTRAPROXY.FIND_USERNAME_NEEDED)
+                                      .replace("%nl%", "\n")));
     } else {
       Optional<Player> player = server.getPlayer(args[0]);
       if (player.isPresent()) {
         Player pl = player.get();
         Optional<ServerConnection> server = pl.getCurrentServer();
-        server.ifPresent(srv ->
-                source.sendMessage(
+        server.ifPresent(srv -> source.sendMessage(
                         LegacyComponentSerializer
                                 .legacyAmpersand()
-                                .deserialize(prefix
-                                        + "§fИгрок §6" + pl.getUsername()
-                                        + " §fсейчас на сервере §6" + srv.getServerInfo().getName())
-                )
-        );
+                                .deserialize((
+                                        prefix
+                                        + Settings.IMP.MESSAGES.ELYTRAPROXY.FIND_USER_ONLINE_AT)
+                                                .replace("%nl%", "\n")
+                                                .replace("{0}", pl.getUsername())
+                                                .replace("{1}", srv.getServerInfo().getName()))));
       } else {
         source.sendMessage(
                 LegacyComponentSerializer
                         .legacySection()
-                        .deserialize(prefix + "§fДанный игрок §cне онлайн§f.")
-        );
+                        .deserialize((
+                                prefix
+                                + Settings.IMP.MESSAGES.ELYTRAPROXY.USER_NOT_ONLINE)
+                                        .replace("%nl%", "\n")
+                                        .replace("{0}", args[0])));
       }
     }
   }
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/SendCommand.java b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/SendCommand.java
index b5de161a..a85b143e 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/commands/SendCommand.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/commands/SendCommand.java
@@ -24,6 +24,7 @@ import com.velocitypowered.api.proxy.ProxyServer;
 import com.velocitypowered.api.proxy.server.RegisteredServer;
 import com.velocitypowered.api.proxy.server.ServerInfo;
 import com.velocitypowered.proxy.VelocityServer;
+import com.velocitypowered.proxy.command.builtin.CommandMessages;
 import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
 
 import java.util.Collection;
@@ -32,6 +33,7 @@ import java.util.stream.Collectors;
 
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import ru.elytrium.elytraproxy.config.Settings;
 
 public class SendCommand implements SimpleCommand {
 
@@ -76,26 +78,34 @@ public class SendCommand implements SimpleCommand {
     final String[] args = invocation.arguments();
 
     if (args.length != 2) {
-      source.sendMessage(LegacyComponentSerializer.legacyAmpersand().deserialize(
-            prefix
-                    + "§cНедостаточно §fаргументов в команде."
-                    + " Используйте: §6/send <server|player|all|current> <target>"));
+      source.sendMessage(
+              LegacyComponentSerializer
+                      .legacyAmpersand()
+                      .deserialize((
+                              prefix
+                              + Settings.IMP.MESSAGES.ELYTRAPROXY.SEND_NOT_ENOUGH_ARGUMENTS)
+                                      .replace("%nl%", "\n")));
       return;
     }
 
     RegisteredServer target = server.getServer(args[1]).orElse(null);
     if (target == null) {
-      source.sendMessage(LegacyComponentSerializer.legacyAmpersand().deserialize(
-            prefix
-                    + "§fУказанного сервера §cне существует§f."));
+      source.sendMessage(CommandMessages.SERVER_DOES_NOT_EXIST(args[1]));
       return;
     }
 
-    String sender = (source instanceof Player) ? ((Player) source).getUsername() : "CONSOLE";
-    Component summoned = LegacyComponentSerializer.legacyAmpersand().deserialize(
-            prefix
-                    + "§fВы были перемещены на сервер §6"
-                    + target.getServerInfo().getName() + " §fадминистратором §6" + sender);
+    String sender = (source instanceof Player) ? ((Player) source).getUsername()
+            : ((Settings.IMP.MESSAGES.ELYTRAPROXY.IF_CONSOLE)
+                    .replace("%nl%", "\n")
+                    .replace("&", "§"));
+    Component summoned = LegacyComponentSerializer
+            .legacyAmpersand()
+            .deserialize((
+                    prefix
+                    + Settings.IMP.MESSAGES.ELYTRAPROXY.SEND_YOU_GOT_SUMMONED)
+                            .replace("%nl%", "\n")
+                            .replace("{0}", target.getServerInfo().getName())
+                            .replace("{1}", sender));
 
     switch (args[0].toLowerCase()) {
       case "all":
@@ -106,9 +116,7 @@ public class SendCommand implements SimpleCommand {
         break;
       case "current":
         if (!(source instanceof Player)) {
-          source.sendMessage(LegacyComponentSerializer.legacyAmpersand().deserialize(
-              prefix
-                      + "§fИз консоли данную команду выполнить §cневозможно§f."));
+          source.sendMessage(CommandMessages.PLAYERS_ONLY);
           break;
         }
         Player player = (Player) source;
@@ -126,9 +134,14 @@ public class SendCommand implements SimpleCommand {
           player.createConnectionRequest(target).fireAndForget();
           player.sendMessage(summoned);
         } else {
-          source.sendMessage(LegacyComponentSerializer.legacyAmpersand().deserialize(
-              prefix
-                      + "§fДанный игрок §cне онлайн§f."));
+          source.sendMessage(
+                  LegacyComponentSerializer
+                          .legacyAmpersand()
+                          .deserialize((
+                                  prefix
+                                  + Settings.IMP.MESSAGES.ELYTRAPROXY.USER_NOT_ONLINE)
+                                          .replace("%nl%", "\n")
+                                          .replace("{0}", args[0])));
         }
         break;
     }
diff --git a/proxy/src/main/java/ru/elytrium/elytraproxy/config/Settings.java b/proxy/src/main/java/ru/elytrium/elytraproxy/config/Settings.java
index a5a8b6e6..5115678e 100644
--- a/proxy/src/main/java/ru/elytrium/elytraproxy/config/Settings.java
+++ b/proxy/src/main/java/ru/elytrium/elytraproxy/config/Settings.java
@@ -27,14 +27,97 @@ public class Settings extends Config {
   public static final Settings IMP = new Settings();
 
   @Final
-  public String VERSION = "0.1.0";
+  public String VERSION = "0.1.1";
+
+  @Create
+  public MESSAGES MESSAGES;
+
+  @Comment("Don't use \\n, use %nl% for new line. Ampersand (&) color codes are supported too.")
+  public static class MESSAGES {
+    @Create
+    public MESSAGES.ELYTRAPROXY ELYTRAPROXY;
+    @Create
+    public MESSAGES.VELOCITY VELOCITY;
+
+    @Comment("alert-prefix, command-spy-format, log-command-executions-format, protocol-blocked, glist-format-view-all and nick-blocked doesn't have prefix.")
+    public static class ELYTRAPROXY {
+      public String PREFIX = "&5&l[ElytraProxy]&f ";
+      public String ALERT_PREFIX = "&8[&4Alert&8]&f ";
+      public String IF_CONSOLE = "CONSOLE";
+      public String ALERT_MESSAGE_NEEDED = "You must supply a message.";
+      public String ALERT_SERVER_EMPTY = "Server is empty.";
+      public String FIND_USERNAME_NEEDED = "Please follow this command by a user name.";
+      public String FIND_USER_ONLINE_AT = "&6{0} &fis online at &6{1}";
+      public String USER_NOT_ONLINE = "&6{0} &fis not online.";
+      public String SEND_YOU_GOT_SUMMONED = "Summoned to &6{0} &fby &6{1}";
+      public String SEND_NOT_ENOUGH_ARGUMENTS = "Not enough arguments, usage: &6/send <server|player|all|current> <target>";
+      public String COMMAND_SPY_FORMAT = "&7 — Player {0} executed command {1}";
+      public String CONSOLE_LOG_COMMAND_EXECUTIONS_FORMAT = "{0} -> executed command {1}";
+      public String PROTOCOL_BLOCKED = "&c1.7.x not supported";
+      public String NICK_BLOCKED = "&cYour nickname contains forbidden phrases.";
+      public String RELOAD_SUCCESS = "ElytraProxy configuration successfully reloaded.";
+      public String RELOAD_FAILURE = "&cUnable to reload your ElytraProxy configuration. Check the console for more details.";
+      /*
+      public String MYSQL_LOAD_FAILED: "Ошибка при инициализации базы данных. Выключение..."
+      */
+    }
+
+    @Comment({
+            "You may found other languages translations here: ",
+            "https://github.com/VelocityPowered/Velocity/tree/dev/2.0.0/proxy/src/main/resources/com/velocitypowered/proxy/l10n"
+    })
+    public static class VELOCITY {
+      @Create
+      public MESSAGES.VELOCITY.ERROR ERROR;
+      @Create
+      public MESSAGES.VELOCITY.COMMAND COMMAND;
+
+      @Comment("Error messages doesn't have ElytraProxy prefix")
+      public static class ERROR {
+        public String ALREADY_CONNECTED = "&cYou are already connected to this server!";
+        public String ALREADY_CONNECTED_PROXY = "&cYou are already connected to this proxy!";
+        public String ALREADY_CONNECTING = "&cYou are already trying to connect to a server!";
+        public String CANT_CONNECT = "&cUnable to connect to &6{0}&c: &6{1}";
+        public String CONNECTING_SERVER_ERROR = "&cUnable to connect you to &6{0}&c. Please try again later.";
+        public String CONNECTED_SERVER_ERROR = "&cYour connection to &6{0} &cencountered a problem.";
+        public String INTERNAL_SERVER_CONNECTION_ERROR = "&cAn internal server connection error occurred.";
+        // public String LOGGING_IN_TOO_FAST = "&cYou are logging in too fast, try again later.";
+        public String ONLINE_MODE_ONLY = "&cYou are not logged into your Minecraft account. If you are logged into your Minecraft account, try restarting your Minecraft client.";
+        public String PLAYER_CONNECTION_ERROR = "&cAn internal error occurred in your connection.";
+        public String MODERN_FORWARDING_NEEDS_NEW_CLIENT = "&cThis server is only compatible with Minecraft 1.13 and above.";
+        public String MODERN_FORWARDING_FAILED = "&cYour server did not send a forwarding request to the proxy. Make sure the server is configured for Velocity forwarding.";
+        public String MOVED_TO_NEW_SERVER = "&cYou were kicked from &6{0}&c: &6{1}";
+        public String NO_AVAILABLE_SERVERS = "&cThere are no available servers to connect you to. Try again later or contact an admin.";
+      }
+
+      public static class COMMAND {
+        public String GENERIC_ERROR = "An error occurred while running this command.";
+        public String COMMAND_DOES_NOT_EXIST = "This command does not exist.";
+        public String PLAYERS_ONLY = "Only players can run this command.";
+        public String SERVER_DOES_NOT_EXIST = "The specified server &6{0} &fdoes not exist.";
+        public String SERVER_CURRENT_SERVER = "You are currently connected to &6{0}.";
+        public String SERVER_TOO_MANY = "There are too many servers set up. Use tab completion to view all servers available.";
+        public String SERVER_AVAILABLE = "Available servers: &6";
+        public String SERVER_TOOLTIP_CURRENT_SERVER = "Currently connected to this server%nl%&6{0}";
+        public String SERVER_TOOLTIP_PLAYER_ONLINE = "&6{0} &fplayer online";
+        public String SERVER_TOOLTIP_PLAYERS_ONLINE = "&6{0} &fplayers online";
+        public String SERVER_TOOLTIP_OFFER_CONNECT_SERVER = "Click to connect to this server%nl%&6{0}";
+        public String GLIST_VIEW_ALL = "To view all players on servers, use &6/glist all&f.";
+        public String GLIST_PLAYER_SINGULAR = "&6{0} &fplayer is currently connected to the proxy.";
+        public String GLIST_PLAYER_PLURAL = "&6{0} &fplayers are currently connected to the proxy.";
+        public String GLIST_FORMAT_VIEW_ALL = "&f[&6{0}&f] (&6{1}&f): ";
+        public String RELOAD_SUCCESS = "Velocity configuration successfully reloaded.";
+        public String RELOAD_FAILURE = "&cUnable to reload your Velocity configuration. Check the console for more details.";
+      }
+    }
+  }
 
   @Create
   public MAIN_SETTINGS MAIN_SETTINGS;
 
   public static class MAIN_SETTINGS {
     @Comment("How many attempts are allowed before rate limiting?")
-    public int LOGIN_RATELIMIT_ATTEMPTS = 2;
+    public int LOGIN_RATELIMIT_ATTEMPTS = 4;
     @Comment({
             "The list of protocols can be found here https://wiki.vg/Protocol_version_numbers",
             "For example, the list contains all protocols of version 1.7.x",
@@ -61,11 +144,11 @@ public class Settings extends Config {
             "Most likely does not work with SRV records"
     })
     public static class HOSTNAMES_MANAGER {
-      public boolean ENABLE = true;
+      public boolean ENABLE = false;
       @Comment("If whitelist enabled, all hostnames (domains and ips) in list WON'T BE BLOCKED, but other hostnames WILL BE BLOCKED")
       public boolean WHITELIST = true;
-      public boolean DOMAINS_CHECK = true;
-      public boolean IPS_CHECK = false;
+      public boolean DOMAINS_CHECK = false;
+      public boolean IPS_CHECK = true;
       public List<String> HOSTNAMES = Arrays.asList("your-digital-ip", "your-domain.com");
       @Comment("IP's in this list will be ignored in check.")
       public List<String> IGNORED_IPS = Arrays.asList("127.0.0.1", "your-haproxy-ip");
@@ -73,43 +156,17 @@ public class Settings extends Config {
   }
 
   @Create
-  public MESSAGES MESSAGES;
-
-  public static class MESSAGES {
-    @Create
-    public MESSAGES.ELYTRAPROXY ELYTRAPROXY;
-    @Create
-    public MESSAGES.VELOCITY VELOCITY;
-
-    @Comment("CommandSpy format and protocol blocked doesn't have prefix")
-    public static class ELYTRAPROXY {
-      public String PREFIX = "§5§l[ElytraProxy]§f ";
-      public String PROTOCOL_BLOCKED = "&cYour &6minecraft version&c is blocked. We allow only X.X-X.X!";
-      public String COMMAND_SPY_FORMAT = "&7 — Игрок {player} ввёл команду {cmd}";
-    }
-
-    public static class VELOCITY {
-      @Create
-      public MESSAGES.VELOCITY.INFO INFO;
-      @Create
-      public MESSAGES.VELOCITY.ERROR ERROR;
-
-      public static class INFO {
-        public String ALERT_PREFIX = "§8[§4Alert§8]§f ";
-      }
+  public ANTIBOT ANTIBOT;
 
-      public static class ERROR {
-        public String SERVER_EMPTY = "§fНа сервере никого нет.";
-        public String MESSAGE_NEEDED = "§cYou must supply a message.";
-      /*
-      public String USER_NOT_ONLINE = "§cThat user is not online.";
-      public String ALREADY_CONNECTED = "§cYou are already connected to this server!";
-      public String ALREADY_CONNECTED_PROXY = "§cYou are already connected to this proxy!";
-      public String ALREADY_CONNECTING = "§cAlready connecting to this server!";
-      public String CANT_CONNECT = "Не удалось подключиться к серверу {0}: {1}";
-      */
-      }
-    }
+  public static class ANTIBOT {
+    public boolean ENABLE = true;
+    @Comment({
+            "If the player's nickname contains something from this list, hes connection will be rejected",
+            "In lowercase"
+    })
+    public List<String> BANNED_NICK_PATTERNS = Arrays.asList(
+          "dropbot", "mcspam", "mcdrop", "mcrage", "mcstorm", "extremebot", "cipher_bot", "biboran"
+    );
   }
 
   /*
@@ -121,33 +178,20 @@ public class Settings extends Config {
     public boolean ONLINE_MODE_REQUIRES_LOGIN = false;
     public String TABLE = "auth";
   }
-  */
 
   @Create
-  public ANTIBOT ANTIBOT;
-
-  public static class ANTIBOT {
-    public boolean ENABLE = true;
-    @Comment("In lowercase")
-    public List<String> BANNED_NICK_PATTERNS = Arrays.asList(
-          "dropbot", "mcspam", "mcdrop", "mcrage", "mcstorm", "extremebot", "cipher_bot"
-    );
-  }
-
-  /*
-  @Create
-  public SQL SQL;
+  public DATABASE DATABASE;
 
-  @Comment("Настройка базы данных")
-  public static class SQL {
-    @Comment("Тип датабазы. mysql или mysql))")
-    public String STORAGE_TYPE = "mysql";
-    @Comment("Настройки для mysql")
+  @Comment("Database settings")
+  public static class DATABASE {
+    //@Comment("Тип датабазы. mysql или mysql))")
+    //public String STORAGE_TYPE = "mysql";
+    @Comment("Settings for MYSQL")
     public String HOSTNAME = "127.0.0.1";
     public int PORT = 3306;
     public String USER = "user";
     public String PASSWORD = "password";
-    public String DATABASE = "database";
+    public String DATABASE = "elytraproxy";
   }
   */
 
diff --git a/proxy/src/main/resources/default-elytraproxy.yml b/proxy/src/main/resources/default-elytraproxy.yml
deleted file mode 100644
index 9943a16b..00000000
--- a/proxy/src/main/resources/default-elytraproxy.yml
+++ /dev/null
@@ -1,52 +0,0 @@
-prefix: "§5§l[Elytrium]"
-messages:
-  error:
-    alreadyConnected: "Вы уже подключены к этому серверу!"
-    alreadyConnectedProxy: "Игрок с таким ником уже играет на сервере!"
-    alreadyConnecting: "Вы уже подключаетесь к серверу!"
-    cantConnect: "Не удалось подключиться к серверу {0}: {1}"
-    connectingServerError: "Не удалось подключить вас к серверу {0}. Пожалуйста, попробуйте снова через некоторое время."
-    connectedServerError: "С вашим подключением к серверу {0} возникла проблема."
-    internalServerConnectionError: "На сервере произошла внутренняя ошибка подключения."
-    loggingInTooFast: "Вы входите слишком быстро, попробуйте снова через некоторое время."
-    onlineModeOnly: "Вы не вошли в свой аккаунт Minecraft. Если вы уверены, что вошли в аккаунт, попробуйте перезапустить свой клиент Minecraft."
-    playerConnectionError: "В вашем подключении произошла внутренняя ошибка."
-    modernForwardingNeedsNewClient: "Этот сервер совместим только с Minecraft 1.13 и выше."
-    modernForwardingFailed: "Ваш сервер не посылал запрос на переадресацию на прокси-сервер. Убедитесь, что сервер настроен на переадресацию Velocity."
-    movedToNewServer: "Вы были кикнуты с сервера {0}: {1}"
-    noAvailableServers: "Нет серверов, доступных для подключения. Попробуйте позже или свяжитесь с администратором."
-    configLoadFailed: "Невозможно обратиться к конфиг-файлу elytraproxy.yml. Выключение..."
-    mysqlLoadFailed: "Ошибка при инициализации базы данных. Выключение..."
-  command:
-    genericError: "Во время выполнения этой команды произошла ошибка."
-    commandDoesNotExist: "Этой команды не существует."
-    serverDoesNotExist: "Указанный сервер {0} не существует."
-    serverTooMany: "Настроено слишком много серверов. Для просмотра всех доступных серверов, используйте автозаполнение клавишей Tab."
-    serverAvailable: "Доступные серверы:"
-    serverTooltipPlayerOnline: "{0} игрок онлайн"
-    serverTooltipPlayersOnline: "{0} игрок(а, ов) онлайн"
-    serverTooltipCurrentServer: "Подключен к этому серверу"
-    serverTooltipOfferConnectServer: "Кликните, чтобы присоединиться к этому серверу"
-    glistPlayerPlural: "{0} игрок(а, ов) подключены к прокси на данный момент."
-    glistViewAll: "Чтобы просмотреть всех игроков на серверах, используйте /glist all."
-    reloadFailure: "Не удалось перезагрузить конфигурацию Velocity. Проверьте консоль для подробностей."
-    versionCopyright: "Copyright 2018-2021 {0}. {1} лицензирована на условиях GNU General Public License v3."
-mysql:
-  hostname: "localhost:3306"
-  user: "root"
-  password: ""
-  database: "elytraproxy"
-plugins:
-  auth:
-    enable: true
-    onlineModeRequiresLogin: false
-    table: auth
-  antibot:
-    enable: true
-    bannedNicknames:
-      - dropbot
-      - mcspam
-      - mcdrop
-      - mcrage
-      - mcstorm
-    table: antibot
\ No newline at end of file
diff --git a/proxy/src/main/resources/default-velocity.toml b/proxy/src/main/resources/default-velocity.toml
index 4a844733..c85137f5 100644
--- a/proxy/src/main/resources/default-velocity.toml
+++ b/proxy/src/main/resources/default-velocity.toml
@@ -6,7 +6,7 @@ bind = "0.0.0.0:25577"
 
 # What should be the MOTD? This gets displayed when the player adds your server to
 # their server list. Legacy color codes and JSON are accepted.
-motd = "&#09add3A Velocity Server"
+motd = "&#09add3A ElytraProxy Server"
 
 # What should we display for the maximum number of players? (Velocity does not support a cap
 # on the number of players online.)
@@ -89,7 +89,7 @@ try = [
 [advanced]
 # How large a Minecraft packet has to be before we compress it. Setting this to zero will
 # compress all packets, and setting it to -1 will disable compression entirely.
-compression-threshold = 256
+compression-threshold = 512
 
 # How much compression should be done (from 0-9). The default is -1, which uses the
 # default level of 6.
@@ -116,7 +116,7 @@ tcp-fast-open = false
 bungee-plugin-message-channel = true
 
 # Shows ping requests to the proxy from clients.
-show-ping-requests = false
+show-ping-requests = true
 
 # By default, Velocity will attempt to gracefully handle situations where the user unexpectedly
 # loses connection to the server without an explicit disconnect message by attempting to fall the
@@ -138,7 +138,7 @@ enabled = false
 port = 25577
 
 # This is the map name that is reported to the query services.
-map = "Velocity"
+map = "ElytraProxy"
 
 # Whether plugins should be shown in query response by default or not
 show-plugins = false
\ No newline at end of file
-- 
2.24.1.windows.2

